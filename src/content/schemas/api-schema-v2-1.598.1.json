{
  "openapi": "3.0.3",
  "info": {
    "title": "Cloudsmith API",
    "description": "The API to the Cloudsmith Service",
    "termsOfService": "https://help.cloudsmith.io/docs/legal-policies-overview",
    "contact": {
      "name": "Cloudsmith Support",
      "url": "https://help.cloudsmith.io/",
      "email": "support@cloudsmith.io"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.598.1 (v2)"
  },
  "externalDocs": {
    "description": "Cloudsmith API Reference",
    "url": "https://help.cloudsmith.io/reference/introduction"
  },
  "servers": [
    {
      "url": "https://api-stg.cloudsmith.io/v2/"
    }
  ],
  "paths": {
    "/analytics/metrics/download/{workspace}/": {
      "get": {
        "tags": ["analytics"],
        "description": "API to provide time-series data derived from download logs.",
        "operationId": "analytics_metrics_download_list",
        "parameters": [
          {
            "name": "aggregate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "* `BYTES_DOWNLOADED_AVG` - bytes_downloaded_avg\n* `BYTES_DOWNLOADED_SUM` - bytes_downloaded_sum\n* `IP_ADDRESS_COUNT_UNIQUE` - ip_address_count_unique\n* `REQUEST_COUNT` - request_count\n* `TIME_TAKEN_AVG` - time_taken_avg\n* `TIME_TAKEN_MAX` - time_taken_max\n* `TIME_TAKEN_P50` - time_taken_p50\n* `TIME_TAKEN_P75` - time_taken_p75\n* `TIME_TAKEN_P90` - time_taken_p90\n* `TIME_TAKEN_P95` - time_taken_p95\n* `TIME_TAKEN_P99` - time_taken_p99\n* `TIME_TAKEN_SUM` - time_taken_sum",
                "enum": [
                  "BYTES_DOWNLOADED_AVG",
                  "BYTES_DOWNLOADED_SUM",
                  "IP_ADDRESS_COUNT_UNIQUE",
                  "REQUEST_COUNT",
                  "TIME_TAKEN_AVG",
                  "TIME_TAKEN_MAX",
                  "TIME_TAKEN_P50",
                  "TIME_TAKEN_P75",
                  "TIME_TAKEN_P90",
                  "TIME_TAKEN_P95",
                  "TIME_TAKEN_P99",
                  "TIME_TAKEN_SUM"
                ]
              },
              "default": [
                "BYTES_DOWNLOADED_AVG",
                "BYTES_DOWNLOADED_SUM",
                "IP_ADDRESS_COUNT_UNIQUE",
                "REQUEST_COUNT",
                "TIME_TAKEN_AVG",
                "TIME_TAKEN_MAX",
                "TIME_TAKEN_P50",
                "TIME_TAKEN_P75",
                "TIME_TAKEN_P90",
                "TIME_TAKEN_P95",
                "TIME_TAKEN_P99",
                "TIME_TAKEN_SUM"
              ]
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "interval",
            "in": "query",
            "description": "* `MINUTE` - Minute\n* `HOUR` - Hour\n* `DAY` - Day\n* `WEEK` - Week\n* `MONTH` - Month\n* `YEAR` - Year",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "enum": ["MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "YEAR"]
            }
          },
          {
            "name": "package_format",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "* `DEB` - Debian\n* `RPM` - RedHat\n* `RUBY` - Ruby\n* `PYTHON` - Python\n* `MAVEN` - Maven\n* `BOWER` - Bower\n* `DOCKER` - Docker\n* `RAW` - Raw\n* `CHOCOLATEY` - Chocolatey\n* `NPM` - npm\n* `NUGET` - NuGet\n* `VAGRANT` - Vagrant\n* `COMPOSER` - Composer\n* `ALPINE` - Alpine\n* `HELM` - Helm\n* `CONAN` - Conan\n* `CARGO` - Cargo\n* `LUAROCKS` - LuaRocks\n* `CRAN` - CRAN\n* `GO` - Go\n* `DART` - Dart\n* `COCOAPODS` - CocoaPods\n* `TERRAFORM` - Terraform\n* `P2` - P2\n* `CONDA` - Conda\n* `HEX` - Hex\n* `SWIFT` - Swift\n* `DEFAULT` - Default",
                "enum": [
                  "DEB",
                  "RPM",
                  "RUBY",
                  "PYTHON",
                  "MAVEN",
                  "BOWER",
                  "DOCKER",
                  "RAW",
                  "CHOCOLATEY",
                  "NPM",
                  "NUGET",
                  "VAGRANT",
                  "COMPOSER",
                  "ALPINE",
                  "HELM",
                  "CONAN",
                  "CARGO",
                  "LUAROCKS",
                  "CRAN",
                  "GO",
                  "DART",
                  "COCOAPODS",
                  "TERRAFORM",
                  "P2",
                  "CONDA",
                  "HEX",
                  "SWIFT",
                  "DEFAULT"
                ]
              }
            }
          },
          {
            "name": "repository",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "workspace",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetricsResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      }
    },
    "/orgs/{org}/policies/": {
      "get": {
        "tags": ["orgs"],
        "description": "List policies.",
        "operationId": "orgs_policies_list",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "A search string to limit results by name. Legal fields are: `name`. Boolean operators may be used to construct intricate queries. Omitting boolean operators is interpreted as an implicit `AND`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "PoliciesNamedFooOrBar": {
                "summary": "Policies named foo or bar",
                "value": "name: foo OR name: bar"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A comma-separated string of fields to sort by. Legal fields are: `created_at`, `name`, `version`, `updated_at`. Descending order can be expressed by prepending `-` to a field name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "-created_at"
            },
            "examples": {
              "`version`Descending,`updatedAt`Ascending": {
                "summary": "`version` descending, `updated_at` ascending",
                "value": "-version,updated_at"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPolicyList"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": ["orgs"],
        "description": "Create a policy.",
        "operationId": "orgs_policies_create",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      }
    },
    "/orgs/{org}/policies/{policy}/": {
      "get": {
        "tags": ["orgs"],
        "description": "Retrieve a policy.",
        "operationId": "orgs_policies_retrieve",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": ["orgs"],
        "description": "Update a policy.",
        "operationId": "orgs_policies_update",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Policy"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": ["orgs"],
        "description": "Delete a policy.",
        "operationId": "orgs_policies_destroy",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "patch": {
        "tags": ["orgs"],
        "description": "Partially update a policy.",
        "operationId": "orgs_policies_partial_update",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPolicy"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Policy"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      }
    },
    "/orgs/{org}/policies/{policy}/actions/": {
      "get": {
        "tags": ["orgs"],
        "description": "List all actions for the policy.",
        "operationId": "orgs_policies_actions_list",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActionList"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "post": {
        "tags": ["orgs"],
        "description": "Create an action for a policy.",
        "operationId": "orgs_policies_actions_create",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      }
    },
    "/orgs/{org}/policies/{policy}/actions/{action}/": {
      "get": {
        "tags": ["orgs"],
        "description": "Retrieve an action for a policy.",
        "operationId": "orgs_policies_actions_retrieve",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "description": "The Action identifier."
            }
          },
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "put": {
        "tags": ["orgs"],
        "description": "Update an action for a policy.",
        "operationId": "orgs_policies_actions_update",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "description": "The Action identifier."
            }
          },
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "tags": ["orgs"],
        "description": "Delete an action for a policy.",
        "operationId": "orgs_policies_actions_destroy",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "description": "The Action identifier."
            }
          },
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No response body"
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      },
      "patch": {
        "tags": ["orgs"],
        "description": "Partially update an action for a policy.",
        "operationId": "orgs_policies_actions_partial_update",
        "parameters": [
          {
            "name": "action",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "description": "The Action identifier."
            }
          },
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      }
    },
    "/orgs/{org}/policies/{policy}/simulate/": {
      "get": {
        "tags": ["orgs"],
        "description": "Simulates the execution of a Policy to verify its behavior without taking any actions.\n\nThis endpoint evaluates all packages in the organization, generating a \"decision log\" for each evaluation.\nEach log contains:\n- Package metadata provided to the policy engine at runtime.\n- Output from the user-defined Rego policy.\n\nNo actions associated with the policy are executed. Instead, the endpoint reports what would happen to each package if the policy were active.",
        "operationId": "orgs_policies_simulate_list",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "package_query_string",
            "in": "query",
            "description": "A [package search](https://help.cloudsmith.io/docs/search-packages) query by which to filter the packages being evaluated.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPolicyDecisionLogList"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      }
    },
    "/orgs/{org}/policies/decision_logs/": {
      "get": {
        "tags": ["orgs"],
        "description": "List policy decision logs.",
        "operationId": "orgs_policies_decision_logs_list",
        "parameters": [
          {
            "name": "correlation_id",
            "in": "query",
            "description": "Filter by `correlation_id`.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "ended_after",
            "in": "query",
            "description": "Filter by `ended_at`. This operates as an inclusive lower bound (greater than or equal to).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "ended_before",
            "in": "query",
            "description": "Filter by `ended_at`. This operates as an exclusive upper bound (less than).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "match",
            "in": "query",
            "description": "Filter by whether the policy matched the package.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "nullable": true
            }
          },
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "pattern": "^[-_\\w]+$",
              "type": "string"
            }
          },
          {
            "name": "package",
            "in": "query",
            "description": "Filter by package identifier (`slug_perm`).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "package_format",
            "in": "query",
            "description": "Filter by package format.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "A page number within the paginated result set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "description": "Number of results to return per page.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "policy",
            "in": "query",
            "description": "Filter by  policy identifier (`slug_perm`).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "repository",
            "in": "query",
            "description": "Filter by repository identifier (`slug_perm`).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A comma-separated string of fields to sort by. Legal fields are: `started_at`, `ended_at`. Descending order can be expressed by prepending `-` to a field name.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "-started_at"
            }
          },
          {
            "name": "started_after",
            "in": "query",
            "description": "Filter by `started_at`. This operates as an inclusive lower bound (greater than or equal to).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "started_before",
            "in": "query",
            "description": "Filter by `started_at`. This operates as an exclusive upper bound (less than).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPolicyDecisionLogList"
                }
              }
            }
          }
        },
        "security": [
          {
            "apikey": []
          },
          {
            "basic": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Action": {
        "discriminator": {
          "propertyName": "action_type",
          "mapping": {
            "MovePackage": "#/components/schemas/MovePackageActionTyped",
            "SetPackageState": "#/components/schemas/SetPackageStateActionTyped",
            "AddPackageTags": "#/components/schemas/AddPackageTagsActionTyped"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/MovePackageActionTyped"
          },
          {
            "$ref": "#/components/schemas/SetPackageStateActionTyped"
          },
          {
            "$ref": "#/components/schemas/AddPackageTagsActionTyped"
          }
        ]
      },
      "AddPackageTagsAction": {
        "required": ["created_at", "effect", "slug_perm", "tags", "updated_at"],
        "type": "object",
        "properties": {
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this action occurs relative to other actions for the same policy."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Action identifier.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "effect": {
            "type": "string",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "maxLength": 100,
              "type": "string"
            }
          }
        }
      },
      "AddPackageTagsActionTyped": {
        "allOf": [
          {
            "required": ["action_type"],
            "type": "object",
            "properties": {
              "action_type": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AddPackageTagsAction"
          }
        ]
      },
      "AggregateEnum": {
        "type": "string",
        "description": "* `BYTES_DOWNLOADED_AVG` - bytes_downloaded_avg\n* `BYTES_DOWNLOADED_SUM` - bytes_downloaded_sum\n* `IP_ADDRESS_COUNT_UNIQUE` - ip_address_count_unique\n* `REQUEST_COUNT` - request_count\n* `TIME_TAKEN_AVG` - time_taken_avg\n* `TIME_TAKEN_MAX` - time_taken_max\n* `TIME_TAKEN_P50` - time_taken_p50\n* `TIME_TAKEN_P75` - time_taken_p75\n* `TIME_TAKEN_P90` - time_taken_p90\n* `TIME_TAKEN_P95` - time_taken_p95\n* `TIME_TAKEN_P99` - time_taken_p99\n* `TIME_TAKEN_SUM` - time_taken_sum",
        "enum": [
          "BYTES_DOWNLOADED_AVG",
          "BYTES_DOWNLOADED_SUM",
          "IP_ADDRESS_COUNT_UNIQUE",
          "REQUEST_COUNT",
          "TIME_TAKEN_AVG",
          "TIME_TAKEN_MAX",
          "TIME_TAKEN_P50",
          "TIME_TAKEN_P75",
          "TIME_TAKEN_P90",
          "TIME_TAKEN_P95",
          "TIME_TAKEN_P99",
          "TIME_TAKEN_SUM"
        ]
      },
      "BlankEnum": {
        "type": "string",
        "enum": [""]
      },
      "CountryEnum": {
        "type": "string",
        "description": "* `AF` - Afghanistan\n* `AX` - Åland Islands\n* `AL` - Albania\n* `DZ` - Algeria\n* `AS` - American Samoa\n* `AD` - Andorra\n* `AO` - Angola\n* `AI` - Anguilla\n* `AQ` - Antarctica\n* `AG` - Antigua and Barbuda\n* `AR` - Argentina\n* `AM` - Armenia\n* `AW` - Aruba\n* `AU` - Australia\n* `AT` - Austria\n* `AZ` - Azerbaijan\n* `BS` - Bahamas\n* `BH` - Bahrain\n* `BD` - Bangladesh\n* `BB` - Barbados\n* `BY` - Belarus\n* `BE` - Belgium\n* `BZ` - Belize\n* `BJ` - Benin\n* `BM` - Bermuda\n* `BT` - Bhutan\n* `BO` - Bolivia\n* `BQ` - Bonaire, Sint Eustatius and Saba\n* `BA` - Bosnia and Herzegovina\n* `BW` - Botswana\n* `BV` - Bouvet Island\n* `BR` - Brazil\n* `IO` - British Indian Ocean Territory\n* `BN` - Brunei\n* `BG` - Bulgaria\n* `BF` - Burkina Faso\n* `BI` - Burundi\n* `CV` - Cabo Verde\n* `KH` - Cambodia\n* `CM` - Cameroon\n* `CA` - Canada\n* `KY` - Cayman Islands\n* `CF` - Central African Republic\n* `TD` - Chad\n* `CL` - Chile\n* `CN` - China\n* `CX` - Christmas Island\n* `CC` - Cocos (Keeling) Islands\n* `CO` - Colombia\n* `KM` - Comoros\n* `CG` - Congo\n* `CD` - Congo (the Democratic Republic of the)\n* `CK` - Cook Islands\n* `CR` - Costa Rica\n* `CI` - Côte d'Ivoire\n* `HR` - Croatia\n* `CU` - Cuba\n* `CW` - Curaçao\n* `CY` - Cyprus\n* `CZ` - Czechia\n* `DK` - Denmark\n* `DJ` - Djibouti\n* `DM` - Dominica\n* `DO` - Dominican Republic\n* `EC` - Ecuador\n* `EG` - Egypt\n* `SV` - El Salvador\n* `GQ` - Equatorial Guinea\n* `ER` - Eritrea\n* `EE` - Estonia\n* `SZ` - Eswatini\n* `ET` - Ethiopia\n* `FK` - Falkland Islands (Malvinas)\n* `FO` - Faroe Islands\n* `FJ` - Fiji\n* `FI` - Finland\n* `FR` - France\n* `GF` - French Guiana\n* `PF` - French Polynesia\n* `TF` - French Southern Territories\n* `GA` - Gabon\n* `GM` - Gambia\n* `GE` - Georgia\n* `DE` - Germany\n* `GH` - Ghana\n* `GI` - Gibraltar\n* `GR` - Greece\n* `GL` - Greenland\n* `GD` - Grenada\n* `GP` - Guadeloupe\n* `GU` - Guam\n* `GT` - Guatemala\n* `GG` - Guernsey\n* `GN` - Guinea\n* `GW` - Guinea-Bissau\n* `GY` - Guyana\n* `HT` - Haiti\n* `HM` - Heard Island and McDonald Islands\n* `VA` - Holy See\n* `HN` - Honduras\n* `HK` - Hong Kong\n* `HU` - Hungary\n* `IS` - Iceland\n* `IN` - India\n* `ID` - Indonesia\n* `IR` - Iran\n* `IQ` - Iraq\n* `IE` - Ireland\n* `IM` - Isle of Man\n* `IL` - Israel\n* `IT` - Italy\n* `JM` - Jamaica\n* `JP` - Japan\n* `JE` - Jersey\n* `JO` - Jordan\n* `KZ` - Kazakhstan\n* `KE` - Kenya\n* `KI` - Kiribati\n* `KW` - Kuwait\n* `KG` - Kyrgyzstan\n* `LA` - Laos\n* `LV` - Latvia\n* `LB` - Lebanon\n* `LS` - Lesotho\n* `LR` - Liberia\n* `LY` - Libya\n* `LI` - Liechtenstein\n* `LT` - Lithuania\n* `LU` - Luxembourg\n* `MO` - Macao\n* `MG` - Madagascar\n* `MW` - Malawi\n* `MY` - Malaysia\n* `MV` - Maldives\n* `ML` - Mali\n* `MT` - Malta\n* `MH` - Marshall Islands\n* `MQ` - Martinique\n* `MR` - Mauritania\n* `MU` - Mauritius\n* `YT` - Mayotte\n* `MX` - Mexico\n* `FM` - Micronesia\n* `MD` - Moldova\n* `MC` - Monaco\n* `MN` - Mongolia\n* `ME` - Montenegro\n* `MS` - Montserrat\n* `MA` - Morocco\n* `MZ` - Mozambique\n* `MM` - Myanmar\n* `NA` - Namibia\n* `NR` - Nauru\n* `NP` - Nepal\n* `NL` - Netherlands\n* `NC` - New Caledonia\n* `NZ` - New Zealand\n* `NI` - Nicaragua\n* `NE` - Niger\n* `NG` - Nigeria\n* `NU` - Niue\n* `NF` - Norfolk Island\n* `KP` - North Korea\n* `MK` - North Macedonia\n* `MP` - Northern Mariana Islands\n* `NO` - Norway\n* `OM` - Oman\n* `PK` - Pakistan\n* `PW` - Palau\n* `PS` - Palestine, State of\n* `PA` - Panama\n* `PG` - Papua New Guinea\n* `PY` - Paraguay\n* `PE` - Peru\n* `PH` - Philippines\n* `PN` - Pitcairn\n* `PL` - Poland\n* `PT` - Portugal\n* `PR` - Puerto Rico\n* `QA` - Qatar\n* `RE` - Réunion\n* `RO` - Romania\n* `RU` - Russia\n* `RW` - Rwanda\n* `BL` - Saint Barthélemy\n* `SH` - Saint Helena, Ascension and Tristan da Cunha\n* `KN` - Saint Kitts and Nevis\n* `LC` - Saint Lucia\n* `MF` - Saint Martin (French part)\n* `PM` - Saint Pierre and Miquelon\n* `VC` - Saint Vincent and the Grenadines\n* `WS` - Samoa\n* `SM` - San Marino\n* `ST` - Sao Tome and Principe\n* `SA` - Saudi Arabia\n* `SN` - Senegal\n* `RS` - Serbia\n* `SC` - Seychelles\n* `SL` - Sierra Leone\n* `SG` - Singapore\n* `SX` - Sint Maarten (Dutch part)\n* `SK` - Slovakia\n* `SI` - Slovenia\n* `SB` - Solomon Islands\n* `SO` - Somalia\n* `ZA` - South Africa\n* `GS` - South Georgia and the South Sandwich Islands\n* `KR` - South Korea\n* `SS` - South Sudan\n* `ES` - Spain\n* `LK` - Sri Lanka\n* `SD` - Sudan\n* `SR` - Suriname\n* `SJ` - Svalbard and Jan Mayen\n* `SE` - Sweden\n* `CH` - Switzerland\n* `SY` - Syria\n* `TW` - Taiwan\n* `TJ` - Tajikistan\n* `TZ` - Tanzania\n* `TH` - Thailand\n* `TL` - Timor-Leste\n* `TG` - Togo\n* `TK` - Tokelau\n* `TO` - Tonga\n* `TT` - Trinidad and Tobago\n* `TN` - Tunisia\n* `TR` - Türkiye\n* `TM` - Turkmenistan\n* `TC` - Turks and Caicos Islands\n* `TV` - Tuvalu\n* `UG` - Uganda\n* `UA` - Ukraine\n* `AE` - United Arab Emirates\n* `GB` - United Kingdom\n* `UM` - United States Minor Outlying Islands\n* `US` - United States of America\n* `UY` - Uruguay\n* `UZ` - Uzbekistan\n* `VU` - Vanuatu\n* `VE` - Venezuela\n* `VN` - Vietnam\n* `VG` - Virgin Islands (British)\n* `VI` - Virgin Islands (U.S.)\n* `WF` - Wallis and Futuna\n* `EH` - Western Sahara\n* `YE` - Yemen\n* `ZM` - Zambia\n* `ZW` - Zimbabwe",
        "enum": [
          "AF",
          "AX",
          "AL",
          "DZ",
          "AS",
          "AD",
          "AO",
          "AI",
          "AQ",
          "AG",
          "AR",
          "AM",
          "AW",
          "AU",
          "AT",
          "AZ",
          "BS",
          "BH",
          "BD",
          "BB",
          "BY",
          "BE",
          "BZ",
          "BJ",
          "BM",
          "BT",
          "BO",
          "BQ",
          "BA",
          "BW",
          "BV",
          "BR",
          "IO",
          "BN",
          "BG",
          "BF",
          "BI",
          "CV",
          "KH",
          "CM",
          "CA",
          "KY",
          "CF",
          "TD",
          "CL",
          "CN",
          "CX",
          "CC",
          "CO",
          "KM",
          "CG",
          "CD",
          "CK",
          "CR",
          "CI",
          "HR",
          "CU",
          "CW",
          "CY",
          "CZ",
          "DK",
          "DJ",
          "DM",
          "DO",
          "EC",
          "EG",
          "SV",
          "GQ",
          "ER",
          "EE",
          "SZ",
          "ET",
          "FK",
          "FO",
          "FJ",
          "FI",
          "FR",
          "GF",
          "PF",
          "TF",
          "GA",
          "GM",
          "GE",
          "DE",
          "GH",
          "GI",
          "GR",
          "GL",
          "GD",
          "GP",
          "GU",
          "GT",
          "GG",
          "GN",
          "GW",
          "GY",
          "HT",
          "HM",
          "VA",
          "HN",
          "HK",
          "HU",
          "IS",
          "IN",
          "ID",
          "IR",
          "IQ",
          "IE",
          "IM",
          "IL",
          "IT",
          "JM",
          "JP",
          "JE",
          "JO",
          "KZ",
          "KE",
          "KI",
          "KW",
          "KG",
          "LA",
          "LV",
          "LB",
          "LS",
          "LR",
          "LY",
          "LI",
          "LT",
          "LU",
          "MO",
          "MG",
          "MW",
          "MY",
          "MV",
          "ML",
          "MT",
          "MH",
          "MQ",
          "MR",
          "MU",
          "YT",
          "MX",
          "FM",
          "MD",
          "MC",
          "MN",
          "ME",
          "MS",
          "MA",
          "MZ",
          "MM",
          "NA",
          "NR",
          "NP",
          "NL",
          "NC",
          "NZ",
          "NI",
          "NE",
          "NG",
          "NU",
          "NF",
          "KP",
          "MK",
          "MP",
          "NO",
          "OM",
          "PK",
          "PW",
          "PS",
          "PA",
          "PG",
          "PY",
          "PE",
          "PH",
          "PN",
          "PL",
          "PT",
          "PR",
          "QA",
          "RE",
          "RO",
          "RU",
          "RW",
          "BL",
          "SH",
          "KN",
          "LC",
          "MF",
          "PM",
          "VC",
          "WS",
          "SM",
          "ST",
          "SA",
          "SN",
          "RS",
          "SC",
          "SL",
          "SG",
          "SX",
          "SK",
          "SI",
          "SB",
          "SO",
          "ZA",
          "GS",
          "KR",
          "SS",
          "ES",
          "LK",
          "SD",
          "SR",
          "SJ",
          "SE",
          "CH",
          "SY",
          "TW",
          "TJ",
          "TZ",
          "TH",
          "TL",
          "TG",
          "TK",
          "TO",
          "TT",
          "TN",
          "TR",
          "TM",
          "TC",
          "TV",
          "UG",
          "UA",
          "AE",
          "GB",
          "UM",
          "US",
          "UY",
          "UZ",
          "VU",
          "VE",
          "VN",
          "VG",
          "VI",
          "WF",
          "EH",
          "YE",
          "ZM",
          "ZW"
        ]
      },
      "IntervalEnum": {
        "type": "string",
        "description": "* `MINUTE` - Minute\n* `HOUR` - Hour\n* `DAY` - Day\n* `WEEK` - Week\n* `MONTH` - Month\n* `YEAR` - Year",
        "enum": ["MINUTE", "HOUR", "DAY", "WEEK", "MONTH", "YEAR"]
      },
      "MetricsParams": {
        "required": ["interval", "start_time"],
        "type": "object",
        "properties": {
          "start_time": {
            "type": "string",
            "format": "date-time"
          },
          "end_time": {
            "type": "string",
            "format": "date-time"
          },
          "repository": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "package_format": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageFormatEnum"
            }
          },
          "aggregate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateEnum"
            },
            "default": [
              "BYTES_DOWNLOADED_AVG",
              "BYTES_DOWNLOADED_SUM",
              "IP_ADDRESS_COUNT_UNIQUE",
              "REQUEST_COUNT",
              "TIME_TAKEN_AVG",
              "TIME_TAKEN_MAX",
              "TIME_TAKEN_P50",
              "TIME_TAKEN_P75",
              "TIME_TAKEN_P90",
              "TIME_TAKEN_P95",
              "TIME_TAKEN_P99",
              "TIME_TAKEN_SUM"
            ]
          },
          "interval": {
            "$ref": "#/components/schemas/IntervalEnum"
          }
        },
        "description": "Extends the base/common filters serializer to provide parameters useful\nfor aggregation/timeseries reporting."
      },
      "MetricsResponse": {
        "required": ["filters", "results"],
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/MetricsParams"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricsResponseResult"
            }
          }
        }
      },
      "MetricsResponseDimensions": {
        "required": ["aggregate", "unit"],
        "type": "object",
        "properties": {
          "aggregate": {
            "$ref": "#/components/schemas/AggregateEnum"
          },
          "unit": {
            "type": "string"
          }
        },
        "description": "Dimensions show result-specific groupings for a result/series.\n\nOnly includes those which are more specific than the overall filters (i.e.\nanything grouped by)."
      },
      "MetricsResponseResult": {
        "required": ["dimensions", "timestamps", "values"],
        "type": "object",
        "properties": {
          "dimensions": {
            "$ref": "#/components/schemas/MetricsResponseDimensions"
          },
          "timestamps": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MovePackageAction": {
        "required": ["created_at", "effect", "slug_perm", "target_repo", "updated_at"],
        "type": "object",
        "properties": {
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this action occurs relative to other actions for the same policy."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Action identifier.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "effect": {
            "type": "string",
            "readOnly": true
          },
          "target_repo": {
            "type": "string",
            "description": "The slug_perm immutably identifies the repository. It will never change once a repository has been created."
          }
        }
      },
      "MovePackageActionTyped": {
        "allOf": [
          {
            "required": ["action_type"],
            "type": "object",
            "properties": {
              "action_type": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/MovePackageAction"
          }
        ]
      },
      "NullEnum": {
        "type": "string",
        "enum": [null]
      },
      "Organization": {
        "required": ["name", "slug", "slug_perm"],
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "country": {
            "description": "The country your organization is based in.\n\n* `AF` - Afghanistan\n* `AX` - Åland Islands\n* `AL` - Albania\n* `DZ` - Algeria\n* `AS` - American Samoa\n* `AD` - Andorra\n* `AO` - Angola\n* `AI` - Anguilla\n* `AQ` - Antarctica\n* `AG` - Antigua and Barbuda\n* `AR` - Argentina\n* `AM` - Armenia\n* `AW` - Aruba\n* `AU` - Australia\n* `AT` - Austria\n* `AZ` - Azerbaijan\n* `BS` - Bahamas\n* `BH` - Bahrain\n* `BD` - Bangladesh\n* `BB` - Barbados\n* `BY` - Belarus\n* `BE` - Belgium\n* `BZ` - Belize\n* `BJ` - Benin\n* `BM` - Bermuda\n* `BT` - Bhutan\n* `BO` - Bolivia\n* `BQ` - Bonaire, Sint Eustatius and Saba\n* `BA` - Bosnia and Herzegovina\n* `BW` - Botswana\n* `BV` - Bouvet Island\n* `BR` - Brazil\n* `IO` - British Indian Ocean Territory\n* `BN` - Brunei\n* `BG` - Bulgaria\n* `BF` - Burkina Faso\n* `BI` - Burundi\n* `CV` - Cabo Verde\n* `KH` - Cambodia\n* `CM` - Cameroon\n* `CA` - Canada\n* `KY` - Cayman Islands\n* `CF` - Central African Republic\n* `TD` - Chad\n* `CL` - Chile\n* `CN` - China\n* `CX` - Christmas Island\n* `CC` - Cocos (Keeling) Islands\n* `CO` - Colombia\n* `KM` - Comoros\n* `CG` - Congo\n* `CD` - Congo (the Democratic Republic of the)\n* `CK` - Cook Islands\n* `CR` - Costa Rica\n* `CI` - Côte d'Ivoire\n* `HR` - Croatia\n* `CU` - Cuba\n* `CW` - Curaçao\n* `CY` - Cyprus\n* `CZ` - Czechia\n* `DK` - Denmark\n* `DJ` - Djibouti\n* `DM` - Dominica\n* `DO` - Dominican Republic\n* `EC` - Ecuador\n* `EG` - Egypt\n* `SV` - El Salvador\n* `GQ` - Equatorial Guinea\n* `ER` - Eritrea\n* `EE` - Estonia\n* `SZ` - Eswatini\n* `ET` - Ethiopia\n* `FK` - Falkland Islands (Malvinas)\n* `FO` - Faroe Islands\n* `FJ` - Fiji\n* `FI` - Finland\n* `FR` - France\n* `GF` - French Guiana\n* `PF` - French Polynesia\n* `TF` - French Southern Territories\n* `GA` - Gabon\n* `GM` - Gambia\n* `GE` - Georgia\n* `DE` - Germany\n* `GH` - Ghana\n* `GI` - Gibraltar\n* `GR` - Greece\n* `GL` - Greenland\n* `GD` - Grenada\n* `GP` - Guadeloupe\n* `GU` - Guam\n* `GT` - Guatemala\n* `GG` - Guernsey\n* `GN` - Guinea\n* `GW` - Guinea-Bissau\n* `GY` - Guyana\n* `HT` - Haiti\n* `HM` - Heard Island and McDonald Islands\n* `VA` - Holy See\n* `HN` - Honduras\n* `HK` - Hong Kong\n* `HU` - Hungary\n* `IS` - Iceland\n* `IN` - India\n* `ID` - Indonesia\n* `IR` - Iran\n* `IQ` - Iraq\n* `IE` - Ireland\n* `IM` - Isle of Man\n* `IL` - Israel\n* `IT` - Italy\n* `JM` - Jamaica\n* `JP` - Japan\n* `JE` - Jersey\n* `JO` - Jordan\n* `KZ` - Kazakhstan\n* `KE` - Kenya\n* `KI` - Kiribati\n* `KW` - Kuwait\n* `KG` - Kyrgyzstan\n* `LA` - Laos\n* `LV` - Latvia\n* `LB` - Lebanon\n* `LS` - Lesotho\n* `LR` - Liberia\n* `LY` - Libya\n* `LI` - Liechtenstein\n* `LT` - Lithuania\n* `LU` - Luxembourg\n* `MO` - Macao\n* `MG` - Madagascar\n* `MW` - Malawi\n* `MY` - Malaysia\n* `MV` - Maldives\n* `ML` - Mali\n* `MT` - Malta\n* `MH` - Marshall Islands\n* `MQ` - Martinique\n* `MR` - Mauritania\n* `MU` - Mauritius\n* `YT` - Mayotte\n* `MX` - Mexico\n* `FM` - Micronesia\n* `MD` - Moldova\n* `MC` - Monaco\n* `MN` - Mongolia\n* `ME` - Montenegro\n* `MS` - Montserrat\n* `MA` - Morocco\n* `MZ` - Mozambique\n* `MM` - Myanmar\n* `NA` - Namibia\n* `NR` - Nauru\n* `NP` - Nepal\n* `NL` - Netherlands\n* `NC` - New Caledonia\n* `NZ` - New Zealand\n* `NI` - Nicaragua\n* `NE` - Niger\n* `NG` - Nigeria\n* `NU` - Niue\n* `NF` - Norfolk Island\n* `KP` - North Korea\n* `MK` - North Macedonia\n* `MP` - Northern Mariana Islands\n* `NO` - Norway\n* `OM` - Oman\n* `PK` - Pakistan\n* `PW` - Palau\n* `PS` - Palestine, State of\n* `PA` - Panama\n* `PG` - Papua New Guinea\n* `PY` - Paraguay\n* `PE` - Peru\n* `PH` - Philippines\n* `PN` - Pitcairn\n* `PL` - Poland\n* `PT` - Portugal\n* `PR` - Puerto Rico\n* `QA` - Qatar\n* `RE` - Réunion\n* `RO` - Romania\n* `RU` - Russia\n* `RW` - Rwanda\n* `BL` - Saint Barthélemy\n* `SH` - Saint Helena, Ascension and Tristan da Cunha\n* `KN` - Saint Kitts and Nevis\n* `LC` - Saint Lucia\n* `MF` - Saint Martin (French part)\n* `PM` - Saint Pierre and Miquelon\n* `VC` - Saint Vincent and the Grenadines\n* `WS` - Samoa\n* `SM` - San Marino\n* `ST` - Sao Tome and Principe\n* `SA` - Saudi Arabia\n* `SN` - Senegal\n* `RS` - Serbia\n* `SC` - Seychelles\n* `SL` - Sierra Leone\n* `SG` - Singapore\n* `SX` - Sint Maarten (Dutch part)\n* `SK` - Slovakia\n* `SI` - Slovenia\n* `SB` - Solomon Islands\n* `SO` - Somalia\n* `ZA` - South Africa\n* `GS` - South Georgia and the South Sandwich Islands\n* `KR` - South Korea\n* `SS` - South Sudan\n* `ES` - Spain\n* `LK` - Sri Lanka\n* `SD` - Sudan\n* `SR` - Suriname\n* `SJ` - Svalbard and Jan Mayen\n* `SE` - Sweden\n* `CH` - Switzerland\n* `SY` - Syria\n* `TW` - Taiwan\n* `TJ` - Tajikistan\n* `TZ` - Tanzania\n* `TH` - Thailand\n* `TL` - Timor-Leste\n* `TG` - Togo\n* `TK` - Tokelau\n* `TO` - Tonga\n* `TT` - Trinidad and Tobago\n* `TN` - Tunisia\n* `TR` - Türkiye\n* `TM` - Turkmenistan\n* `TC` - Turks and Caicos Islands\n* `TV` - Tuvalu\n* `UG` - Uganda\n* `UA` - Ukraine\n* `AE` - United Arab Emirates\n* `GB` - United Kingdom\n* `UM` - United States Minor Outlying Islands\n* `US` - United States of America\n* `UY` - Uruguay\n* `UZ` - Uzbekistan\n* `VU` - Vanuatu\n* `VE` - Venezuela\n* `VN` - Vietnam\n* `VG` - Virgin Islands (British)\n* `VI` - Virgin Islands (U.S.)\n* `WF` - Wallis and Futuna\n* `EH` - Western Sahara\n* `YE` - Yemen\n* `ZM` - Zambia\n* `ZW` - Zimbabwe",
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/CountryEnum"
              },
              {
                "$ref": "#/components/schemas/BlankEnum"
              },
              {
                "$ref": "#/components/schemas/NullEnum"
              }
            ]
          },
          "location": {
            "maxLength": 60,
            "type": "string",
            "description": "The city/town/area your organization is based in.",
            "nullable": true
          },
          "name": {
            "maxLength": 50,
            "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
            "type": "string",
            "description": "A descriptive name for your organization."
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "slug_perm": {
            "type": "string",
            "readOnly": true
          },
          "tagline": {
            "maxLength": 80,
            "type": "string",
            "description": "A short public descriptive for your organization.",
            "nullable": true
          }
        },
        "description": "Serializer for organizations for policy purposes."
      },
      "PackageFormatEnum": {
        "type": "string",
        "description": "* `DEB` - Debian\n* `RPM` - RedHat\n* `RUBY` - Ruby\n* `PYTHON` - Python\n* `MAVEN` - Maven\n* `BOWER` - Bower\n* `DOCKER` - Docker\n* `RAW` - Raw\n* `CHOCOLATEY` - Chocolatey\n* `NPM` - npm\n* `NUGET` - NuGet\n* `VAGRANT` - Vagrant\n* `COMPOSER` - Composer\n* `ALPINE` - Alpine\n* `HELM` - Helm\n* `CONAN` - Conan\n* `CARGO` - Cargo\n* `LUAROCKS` - LuaRocks\n* `CRAN` - CRAN\n* `GO` - Go\n* `DART` - Dart\n* `COCOAPODS` - CocoaPods\n* `TERRAFORM` - Terraform\n* `P2` - P2\n* `CONDA` - Conda\n* `HEX` - Hex\n* `SWIFT` - Swift\n* `DEFAULT` - Default",
        "enum": [
          "DEB",
          "RPM",
          "RUBY",
          "PYTHON",
          "MAVEN",
          "BOWER",
          "DOCKER",
          "RAW",
          "CHOCOLATEY",
          "NPM",
          "NUGET",
          "VAGRANT",
          "COMPOSER",
          "ALPINE",
          "HELM",
          "CONAN",
          "CARGO",
          "LUAROCKS",
          "CRAN",
          "GO",
          "DART",
          "COCOAPODS",
          "TERRAFORM",
          "P2",
          "CONDA",
          "HEX",
          "SWIFT",
          "DEFAULT"
        ]
      },
      "PackageStateEnum": {
        "type": "string",
        "description": "* `AVAILABLE` - The package is available for download.\n* `BLOCKED` - The package is not downloadable.\n* `DELETED` - The package is deleted.\n* `QUARANTINED` - The package is quarantined.",
        "enum": ["AVAILABLE", "BLOCKED", "DELETED", "QUARANTINED"]
      },
      "PackageTypeEnum": {
        "type": "string",
        "description": "* `BINARY` - Binary\n* `SOURCE` - Source\n* `COMBINED` - Combined\n* `OTHER` - Other",
        "enum": ["BINARY", "SOURCE", "COMBINED", "OTHER"]
      },
      "PaginatedActionList": {
        "required": ["results"],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        }
      },
      "PaginatedPolicyDecisionLogList": {
        "required": ["results"],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyDecisionLog"
            }
          }
        }
      },
      "PaginatedPolicyList": {
        "required": ["results"],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Policy"
            }
          }
        }
      },
      "PatchedAction": {
        "discriminator": {
          "propertyName": "action_type",
          "mapping": {
            "MovePackage": "#/components/schemas/PatchedMovePackageActionTyped",
            "SetPackageState": "#/components/schemas/PatchedSetPackageStateActionTyped",
            "AddPackageTags": "#/components/schemas/PatchedAddPackageTagsActionTyped"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/PatchedMovePackageActionTyped"
          },
          {
            "$ref": "#/components/schemas/PatchedSetPackageStateActionTyped"
          },
          {
            "$ref": "#/components/schemas/PatchedAddPackageTagsActionTyped"
          }
        ]
      },
      "PatchedAddPackageTagsAction": {
        "type": "object",
        "properties": {
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this action occurs relative to other actions for the same policy."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Action identifier.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "effect": {
            "type": "string",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "maxLength": 100,
              "type": "string"
            }
          }
        }
      },
      "PatchedAddPackageTagsActionTyped": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "action_type": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/PatchedAddPackageTagsAction"
          }
        ]
      },
      "PatchedMovePackageAction": {
        "type": "object",
        "properties": {
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this action occurs relative to other actions for the same policy."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Action identifier.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "effect": {
            "type": "string",
            "readOnly": true
          },
          "target_repo": {
            "type": "string",
            "description": "The slug_perm immutably identifies the repository. It will never change once a repository has been created."
          }
        }
      },
      "PatchedMovePackageActionTyped": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "action_type": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/PatchedMovePackageAction"
          }
        ]
      },
      "PatchedPolicy": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "maxLength": 250,
            "type": "string",
            "description": "The description of the Policy.",
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the Policy."
          },
          "rego": {
            "type": "string",
            "description": "The rego code which constitutes the Policy logic."
          },
          "enabled": {
            "type": "boolean",
            "description": "If true, the policy is enabled."
          },
          "is_terminal": {
            "type": "boolean",
            "description": "If true and the policy matches, no further policies are evaluated."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Policy identifier.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "version": {
            "type": "integer",
            "description": "The version of the rego code.",
            "readOnly": true
          },
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this policy is evaluated relative to other policies."
          }
        }
      },
      "PatchedSetPackageStateAction": {
        "type": "object",
        "properties": {
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this action occurs relative to other actions for the same policy."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Action identifier.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "effect": {
            "type": "string",
            "readOnly": true
          },
          "package_state": {
            "$ref": "#/components/schemas/PackageStateEnum"
          }
        }
      },
      "PatchedSetPackageStateActionTyped": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "action_type": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/PatchedSetPackageStateAction"
          }
        ]
      },
      "Policy": {
        "required": ["created_at", "name", "rego", "slug_perm", "updated_at", "version"],
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "maxLength": 250,
            "type": "string",
            "description": "The description of the Policy.",
            "nullable": true
          },
          "name": {
            "maxLength": 100,
            "type": "string",
            "description": "The name of the Policy."
          },
          "rego": {
            "type": "string",
            "description": "The rego code which constitutes the Policy logic."
          },
          "enabled": {
            "type": "boolean",
            "description": "If true, the policy is enabled."
          },
          "is_terminal": {
            "type": "boolean",
            "description": "If true and the policy matches, no further policies are evaluated."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Policy identifier.",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "version": {
            "type": "integer",
            "description": "The version of the rego code.",
            "readOnly": true
          },
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this policy is evaluated relative to other policies."
          }
        }
      },
      "PolicyArchitecture": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 64,
            "type": "string",
            "nullable": true
          },
          "name": {
            "maxLength": 32,
            "type": "string"
          }
        },
        "description": "Serializer for a package architecture for policy purposes."
      },
      "PolicyDecisionLog": {
        "required": [
          "actions",
          "correlation_id",
          "ended_at",
          "policy",
          "policy_input",
          "policy_output",
          "started_at"
        ],
        "type": "object",
        "properties": {
          "correlation_id": {
            "type": "string",
            "format": "uuid"
          },
          "policy": {
            "$ref": "#/components/schemas/Policy"
          },
          "started_at": {
            "type": "string",
            "format": "date-time"
          },
          "ended_at": {
            "type": "string",
            "format": "date-time"
          },
          "policy_input": {
            "$ref": "#/components/schemas/PolicyInput"
          },
          "policy_output": {},
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        },
        "description": "Serializer for policy decision logs"
      },
      "PolicyDistribution": {
        "required": ["name", "slug"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 32,
            "type": "string"
          },
          "slug": {
            "maxLength": 64,
            "type": "string"
          },
          "variants": {
            "maxLength": 128,
            "type": "string",
            "nullable": true
          }
        },
        "description": "Serializer for a distribution for policy purposes."
      },
      "PolicyDistributionVersion": {
        "required": ["slug"],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 64,
            "type": "string",
            "description": "The textual name for this version."
          },
          "slug": {
            "maxLength": 64,
            "type": "string"
          }
        },
        "description": "Serializer for a distribution version for policy purposes."
      },
      "PolicyInput": {
        "required": ["v0"],
        "type": "object",
        "properties": {
          "v0": {
            "$ref": "#/components/schemas/PolicyInputV0"
          }
        },
        "description": "Serializer for policy input."
      },
      "PolicyInputV0": {
        "required": ["organization", "package", "repository", "security_scan"],
        "type": "object",
        "properties": {
          "package": {
            "$ref": "#/components/schemas/PolicyPackage"
          },
          "repository": {
            "$ref": "#/components/schemas/PolicyRepository"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "security_scan": {}
        },
        "description": "Serializer for V0 policy input."
      },
      "PolicyPackage": {
        "required": [
          "architectures",
          "checksum_md5",
          "checksum_sha1",
          "checksum_sha256",
          "checksum_sha512",
          "distro",
          "distro_version",
          "extension",
          "filename",
          "files",
          "format",
          "package_type",
          "security_scan_status",
          "slug",
          "subtype",
          "version_orig"
        ],
        "type": "object",
        "properties": {
          "architectures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyArchitecture"
            }
          },
          "checksum_md5": {
            "type": "string",
            "readOnly": true
          },
          "checksum_sha1": {
            "type": "string",
            "readOnly": true
          },
          "checksum_sha256": {
            "type": "string",
            "readOnly": true
          },
          "checksum_sha512": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "maxLength": 12288,
            "type": "string",
            "description": "A textual description of this package.",
            "nullable": true
          },
          "distro": {
            "$ref": "#/components/schemas/PolicyDistribution"
          },
          "distro_version": {
            "$ref": "#/components/schemas/PolicyDistributionVersion"
          },
          "epoch": {
            "maximum": 2147483647,
            "minimum": -2147483648,
            "type": "integer",
            "description": "The epoch of the package version (if any).",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "readOnly": true
          },
          "filename": {
            "maxLength": 255,
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyPackageFile"
            }
          },
          "format": {
            "type": "string"
          },
          "indexed": {
            "type": "boolean"
          },
          "license": {
            "maxLength": 128,
            "type": "string",
            "description": "The license of this package.",
            "nullable": true
          },
          "name": {
            "maxLength": 200,
            "type": "string",
            "description": "The name of this package.",
            "nullable": true
          },
          "num_files": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer"
          },
          "package_type": {
            "$ref": "#/components/schemas/PackageTypeEnum"
          },
          "release": {
            "maxLength": 96,
            "type": "string",
            "description": "The release of the package version (if any).",
            "nullable": true
          },
          "security_scan_status": {
            "$ref": "#/components/schemas/SecurityScanStatusEnum"
          },
          "security_scan_status_updated_at": {
            "type": "string",
            "description": "The datetime the security scanning status was updated.",
            "format": "date-time",
            "nullable": true
          },
          "security_scan_started_at": {
            "type": "string",
            "description": "The datetime the security scanning was started.",
            "format": "date-time",
            "nullable": true
          },
          "security_scan_completed_at": {
            "type": "string",
            "description": "The datetime the security scanning was completed.",
            "format": "date-time",
            "nullable": true
          },
          "size": {
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer",
            "description": "The calculated size of the package.",
            "format": "int64"
          },
          "slug": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The public unique identifier for the package.",
            "readOnly": true
          },
          "slug_perm": {
            "maxLength": 16,
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string"
          },
          "subtype": {
            "type": "string",
            "readOnly": true
          },
          "summary": {
            "maxLength": 255,
            "type": "string",
            "description": "A one-liner synopsis of this package.",
            "nullable": true
          },
          "uploaded_at": {
            "type": "string",
            "description": "The date this package was uploaded.",
            "format": "date-time"
          },
          "uploader": {
            "$ref": "#/components/schemas/PolicyUploader"
          },
          "version": {
            "maxLength": 128,
            "type": "string",
            "description": "The raw version for this package.",
            "nullable": true
          },
          "version_orig": {
            "type": "string",
            "readOnly": true
          }
        },
        "description": "Serializer for packages for policy purposes."
      },
      "PolicyPackageFile": {
        "required": ["filename", "is_primary"],
        "type": "object",
        "properties": {
          "checksum_md5": {
            "maxLength": 32,
            "pattern": "^[a-fA-F0-9]{32}$",
            "type": "string",
            "nullable": true
          },
          "checksum_sha1": {
            "maxLength": 40,
            "pattern": "^[a-fA-F0-9]{40}$",
            "type": "string",
            "nullable": true
          },
          "checksum_sha256": {
            "maxLength": 64,
            "pattern": "^[a-fA-F0-9]{64}$",
            "type": "string",
            "nullable": true
          },
          "checksum_sha512": {
            "maxLength": 128,
            "pattern": "^[a-fA-F0-9]{128}$",
            "type": "string",
            "nullable": true
          },
          "filename": {
            "maxLength": 255,
            "type": "string"
          },
          "is_primary": {
            "type": "string",
            "readOnly": true
          },
          "size": {
            "maximum": 9223372036854776000,
            "minimum": -9223372036854776000,
            "type": "integer",
            "description": "The calculated size of the file.",
            "format": "int64"
          },
          "slug_perm": {
            "maxLength": 16,
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string"
          },
          "tag": {
            "maxLength": 255,
            "type": "string",
            "description": "Freeform descriptor that describes what the file is.",
            "nullable": true
          }
        },
        "description": "Serializer for package files for policy purposes."
      },
      "PolicyRepository": {
        "required": [
          "ecdsa_keys",
          "gpg_keys",
          "name",
          "open_source_license",
          "repository_type",
          "storage_region"
        ],
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "maxLength": 1000,
            "type": "string",
            "description": "A description of the repository's purpose/contents."
          },
          "ecdsa_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryEcdsaKey"
            }
          },
          "gpg_keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RepositoryGpgKey"
            }
          },
          "name": {
            "maxLength": 50,
            "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
            "type": "string",
            "description": "A descriptive name for the repository."
          },
          "open_source_license": {
            "type": "string",
            "nullable": true
          },
          "repository_type": {
            "$ref": "#/components/schemas/RepositoryTypeEnum"
          },
          "slug": {
            "maxLength": 50,
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The slug identifies the repository in URIs."
          },
          "slug_perm": {
            "maxLength": 16,
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The slug_perm immutably identifies the repository. It will never change once a repository has been created."
          },
          "storage_region": {
            "type": "string",
            "readOnly": true
          }
        },
        "description": "Serializer for the Repository model for policy purposes."
      },
      "PolicyUploader": {
        "required": ["first_name", "last_name", "slug", "slug_perm"],
        "type": "object",
        "properties": {
          "email": {
            "title": "Email address",
            "maxLength": 254,
            "type": "string",
            "description": "Your email address that we use to contact you. This is only visible to you.",
            "format": "email",
            "nullable": true
          },
          "first_name": {
            "maxLength": 120,
            "type": "string"
          },
          "last_name": {
            "maxLength": 30,
            "type": "string"
          },
          "slug": {
            "type": "string",
            "readOnly": true
          },
          "slug_perm": {
            "type": "string",
            "readOnly": true
          }
        },
        "description": "Serializer for packager uploader for policy puposes."
      },
      "RepositoryEcdsaKey": {
        "required": [
          "active",
          "created_at",
          "default",
          "fingerprint",
          "fingerprint_short",
          "public_key",
          "ssh_fingerprint"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "If selected this is the active key for this repository.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "default": {
            "type": "boolean",
            "description": "If selected this is the default key for this repository.",
            "readOnly": true
          },
          "fingerprint_short": {
            "type": "string",
            "readOnly": true
          },
          "fingerprint": {
            "type": "string",
            "description": "The long identifier used by ECDSA for this key.",
            "readOnly": true
          },
          "public_key": {
            "type": "string",
            "description": "The public key given to repository users.",
            "readOnly": true
          },
          "ssh_fingerprint": {
            "type": "string",
            "description": "The SSH fingerprint used by ECDSA for this key.",
            "nullable": true,
            "readOnly": true
          }
        },
        "description": "Serializer for the RepositoryRsaKey model."
      },
      "RepositoryGpgKey": {
        "required": [
          "active",
          "comment",
          "created_at",
          "default",
          "fingerprint",
          "fingerprint_short",
          "public_key"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "If selected this is the active key for this repository.",
            "readOnly": true
          },
          "comment": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "default": {
            "type": "boolean",
            "description": "If selected this is the default key for this repository.",
            "readOnly": true
          },
          "fingerprint_short": {
            "type": "string",
            "readOnly": true
          },
          "fingerprint": {
            "type": "string",
            "description": "The long identifier used by GPG for this key.",
            "readOnly": true
          },
          "public_key": {
            "type": "string",
            "description": "The public key given to repository users.",
            "readOnly": true
          }
        },
        "description": "Serializer for the RepositoryGpgKey model."
      },
      "RepositoryTypeEnum": {
        "type": "string",
        "description": "* `PUBLIC` - Public\n* `PRIVATE` - Private\n* `OPEN_SOURCE` - Open-Source",
        "enum": ["PUBLIC", "PRIVATE", "OPEN_SOURCE"]
      },
      "SecurityScanStatusEnum": {
        "type": "string",
        "description": "* `AWAITING_SCAN` - Awaiting Security Scan\n* `SCANNING` - Security Scanning in Progress\n* `VULNERABLE` - Scan Detected Vulnerabilities\n* `NOT_VULNERABLE` - Scan Detected No Vulnerabilities\n* `DISABLED` - Security Scanning Disabled\n* `FAILED` - Security Scanning Failed\n* `SKIPPED` - Security Scanning Skipped\n* `UNSUPPORTED_PACKAGE` - Security Scanning Not Supported\n* `UNSUPPORTED_FORMAT` - Security Scanning Not Supported",
        "enum": [
          "AWAITING_SCAN",
          "SCANNING",
          "VULNERABLE",
          "NOT_VULNERABLE",
          "DISABLED",
          "FAILED",
          "SKIPPED",
          "UNSUPPORTED_PACKAGE",
          "UNSUPPORTED_FORMAT"
        ]
      },
      "SetPackageStateAction": {
        "required": ["created_at", "effect", "package_state", "slug_perm", "updated_at"],
        "type": "object",
        "properties": {
          "precedence": {
            "maximum": 32767,
            "minimum": 0,
            "type": "integer",
            "description": "The order in which this action occurs relative to other actions for the same policy."
          },
          "slug_perm": {
            "pattern": "^[-a-zA-Z0-9_]+$",
            "type": "string",
            "description": "The Action identifier.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "description": "The date and time the policy was created.",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time the policy was updated.",
            "format": "date-time",
            "readOnly": true
          },
          "effect": {
            "type": "string",
            "readOnly": true
          },
          "package_state": {
            "$ref": "#/components/schemas/PackageStateEnum"
          }
        }
      },
      "SetPackageStateActionTyped": {
        "allOf": [
          {
            "required": ["action_type"],
            "type": "object",
            "properties": {
              "action_type": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/schemas/SetPackageStateAction"
          }
        ]
      }
    },
    "securitySchemes": {
      "apikey": {
        "type": "apiKey",
        "name": "X-Api-Key",
        "in": "header"
      },
      "basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
