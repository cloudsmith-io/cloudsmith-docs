{
    "basePath": "/v1",
    "consumes": [
        "application/json"
    ],
    "definitions": {
        "AllocatedLimit": {
            "properties": {
                "configured": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Configured",
                    "type": "string"
                },
                "percentage_used": {
                    "maxLength": 10,
                    "minLength": 1,
                    "title": "Percentage used",
                    "type": "string"
                },
                "plan_limit": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Plan limit",
                    "type": "string"
                },
                "used": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Used",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AllocatedLimitRaw": {
            "properties": {
                "configured": {
                    "title": "Configured",
                    "type": "integer"
                },
                "percentage_used": {
                    "format": "decimal",
                    "title": "Percentage used",
                    "type": "string"
                },
                "plan_limit": {
                    "title": "Plan limit",
                    "type": "integer"
                },
                "used": {
                    "title": "Used",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "AlpinePackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AlpinePackageUploadRequest": {
            "properties": {
                "distribution": {
                    "description": "The distribution to store the package for.",
                    "minLength": 1,
                    "title": "Distribution",
                    "type": "string"
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "distribution",
                "package_file"
            ],
            "type": "object"
        },
        "Architecture": {
            "properties": {
                "description": {
                    "maxLength": 64,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "CargoPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CargoPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "CocoapodsPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CocoapodsPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "CommonBandwidthMetrics": {
            "properties": {
                "average": {
                    "$ref": "#/definitions/CommonBandwidthMetricsValue"
                },
                "highest": {
                    "$ref": "#/definitions/CommonBandwidthMetricsValue"
                },
                "lowest": {
                    "$ref": "#/definitions/CommonBandwidthMetricsValue"
                },
                "total": {
                    "$ref": "#/definitions/CommonBandwidthMetricsValue"
                }
            },
            "required": [
                "average",
                "highest",
                "lowest",
                "total"
            ],
            "type": "object"
        },
        "CommonBandwidthMetricsValue": {
            "description": "Average bandwidth usage in the specified period, e.g. a day",
            "properties": {
                "display": {
                    "description": "Bandwidth usage value",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Display",
                    "type": "string"
                },
                "units": {
                    "default": "bytes",
                    "description": "Unit of measurement e.g. bytes",
                    "minLength": 1,
                    "title": "Units",
                    "type": "string"
                },
                "value": {
                    "description": "Human readable version of display value",
                    "title": "Value",
                    "type": "integer"
                }
            },
            "required": [
                "display",
                "value"
            ],
            "type": "object"
        },
        "CommonDownloadsMetrics": {
            "properties": {
                "average": {
                    "$ref": "#/definitions/CommonDownloadsMetricsValue"
                },
                "highest": {
                    "$ref": "#/definitions/CommonDownloadsMetricsValue"
                },
                "lowest": {
                    "$ref": "#/definitions/CommonDownloadsMetricsValue"
                },
                "total": {
                    "$ref": "#/definitions/CommonDownloadsMetricsValue"
                }
            },
            "required": [
                "average",
                "highest",
                "lowest",
                "total"
            ],
            "type": "object"
        },
        "CommonDownloadsMetricsValue": {
            "properties": {
                "value": {
                    "title": "Value",
                    "type": "integer"
                }
            },
            "required": [
                "value"
            ],
            "type": "object"
        },
        "CommonMetrics": {
            "properties": {
                "active": {
                    "default": 0,
                    "description": "Number of packages with at least 1 download",
                    "title": "Active",
                    "type": "integer"
                },
                "bandwidth": {
                    "$ref": "#/definitions/CommonBandwidthMetrics"
                },
                "downloads": {
                    "$ref": "#/definitions/CommonDownloadsMetrics"
                },
                "inactive": {
                    "default": 0,
                    "description": "Packages with zero downloads",
                    "title": "Inactive",
                    "type": "integer"
                },
                "total": {
                    "default": 0,
                    "description": "Total number of packages in repo",
                    "title": "Total",
                    "type": "integer"
                }
            },
            "required": [
                "bandwidth",
                "downloads"
            ],
            "type": "object"
        },
        "ComposerPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ComposerPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "ComposerUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "ComposerUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "ComposerUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ConanPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "conan_channel": {
                    "description": "Conan channel.",
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Conan channel",
                    "type": "string",
                    "x-nullable": true
                },
                "conan_prefix": {
                    "description": "Conan prefix (User).",
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Conan prefix",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ConanPackageUploadRequest": {
            "properties": {
                "conan_channel": {
                    "description": "Conan channel.",
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Conan channel",
                    "type": "string",
                    "x-nullable": true
                },
                "conan_prefix": {
                    "description": "Conan prefix (User).",
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Conan prefix",
                    "type": "string",
                    "x-nullable": true
                },
                "info_file": {
                    "description": "The info file is an python file containing the package metadata.",
                    "minLength": 1,
                    "title": "Info file",
                    "type": "string"
                },
                "manifest_file": {
                    "description": "The info file is an python file containing the package metadata.",
                    "minLength": 1,
                    "title": "Manifest file",
                    "type": "string"
                },
                "metadata_file": {
                    "description": "The conan file is an python file containing the package metadata.",
                    "minLength": 1,
                    "title": "Metadata file",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "info_file",
                "manifest_file",
                "metadata_file",
                "package_file"
            ],
            "type": "object"
        },
        "CondaPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CondaPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "CranPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "r_version": {
                    "description": "Binary package uploads should specify the version of R they were built for.",
                    "maxLength": 16,
                    "minLength": 1,
                    "title": "R version",
                    "type": "string",
                    "x-nullable": true
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "CranPackageUploadRequest": {
            "properties": {
                "architecture": {
                    "description": "Binary package uploads for macOS should specify the architecture they were built for.",
                    "minLength": 1,
                    "title": "Architecture",
                    "type": "string"
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "r_version": {
                    "description": "Binary package uploads should specify the version of R they were built for.",
                    "maxLength": 16,
                    "minLength": 1,
                    "title": "R version",
                    "type": "string",
                    "x-nullable": true
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "CranUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "CranUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "CranUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DartPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DartPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "DartUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "DartUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "DartUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "DebPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DebPackageUploadRequest": {
            "properties": {
                "changes_file": {
                    "description": "The changes archive containing the changes made to the source and debian packaging files",
                    "minLength": 1,
                    "title": "Changes file",
                    "type": "string",
                    "x-nullable": true
                },
                "component": {
                    "default": "main",
                    "description": "The component (channel) for the package (e.g. 'main', 'unstable', etc.)",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^[-_.\\w]+$",
                    "title": "Component",
                    "type": "string"
                },
                "distribution": {
                    "description": "The distribution to store the package for.",
                    "minLength": 1,
                    "title": "Distribution",
                    "type": "string"
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "sources_file": {
                    "description": "The sources archive containing the source code for the binary",
                    "minLength": 1,
                    "title": "Sources file",
                    "type": "string",
                    "x-nullable": true
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "distribution",
                "package_file"
            ],
            "type": "object"
        },
        "DebUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "component": {
                    "description": "The component to fetch from the upstream",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Component",
                    "type": "string"
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "distro_versions": {
                    "description": "The distribution version that packages found on this upstream could be associated with.",
                    "items": {
                        "description": "The distribution version that packages found on this upstream could be associated with.",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "include_sources": {
                    "description": "When true, source packages will be available from this upstream.",
                    "title": "Source Packages",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_distribution": {
                    "description": "The distribution to fetch from the upstream",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Upstream distribution",
                    "type": "string",
                    "x-nullable": true
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verification_status": {
                    "default": "Unknown",
                    "description": "The signature verification status for this upstream.",
                    "enum": [
                        "Unknown",
                        "Invalid",
                        "Valid",
                        "Invalid (No Key)"
                    ],
                    "readOnly": true,
                    "title": "Verification status",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "distro_versions",
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "DebUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "component": {
                    "description": "The component to fetch from the upstream",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Component",
                    "type": "string"
                },
                "distro_versions": {
                    "description": "The distribution version that packages found on this upstream could be associated with.",
                    "items": {
                        "description": "The distribution version that packages found on this upstream could be associated with.",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "include_sources": {
                    "description": "When true, source packages will be available from this upstream.",
                    "title": "Source Packages",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_distribution": {
                    "description": "The distribution to fetch from the upstream",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Upstream distribution",
                    "type": "string",
                    "x-nullable": true
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "distro_versions",
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "DebUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "component": {
                    "description": "The component to fetch from the upstream",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Component",
                    "type": "string"
                },
                "distro_versions": {
                    "description": "The distribution version that packages found on this upstream could be associated with.",
                    "items": {
                        "description": "The distribution version that packages found on this upstream could be associated with.",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "include_sources": {
                    "description": "When true, source packages will be available from this upstream.",
                    "title": "Source Packages",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_distribution": {
                    "description": "The distribution to fetch from the upstream",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Upstream distribution",
                    "type": "string",
                    "x-nullable": true
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Distribution": {
            "description": "The distributions supported by this package format",
            "properties": {
                "name": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "slug": {
                    "description": "The slug identifier for this distribution",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "variants": {
                    "maxLength": 128,
                    "title": "Variants",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "name"
            ],
            "type": "object",
            "x-nullable": true
        },
        "DistributionFull": {
            "properties": {
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "name": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "slug": {
                    "description": "The slug identifier for this distribution",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "variants": {
                    "maxLength": 128,
                    "title": "Variants",
                    "type": "string",
                    "x-nullable": true
                },
                "versions": {
                    "description": "A list of the versions for this distribution",
                    "items": {
                        "$ref": "#/definitions/DistributionVersion"
                    },
                    "readOnly": true,
                    "type": "array"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "DistributionVersion": {
            "description": "A list of the versions for this distribution",
            "properties": {
                "name": {
                    "description": "The textual name for this version.",
                    "maxLength": 64,
                    "title": "Name",
                    "type": "string"
                },
                "slug": {
                    "description": "The slug identifier for this version",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DockerPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "DockerPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "DockerUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password",
                        "Certificate and Key"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "DockerUpstreamRequest": {
            "properties": {
                "auth_certificate": {
                    "description": "X.509 Certificate to use for mTLS authentication against the upstream",
                    "minLength": 1,
                    "title": "Auth certificate",
                    "type": "string"
                },
                "auth_certificate_key": {
                    "description": "Certificate key to use for mTLS authentication against the upstream",
                    "minLength": 1,
                    "title": "Auth certificate key",
                    "type": "string"
                },
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password",
                        "Certificate and Key"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "DockerUpstreamRequestPatch": {
            "properties": {
                "auth_certificate": {
                    "description": "X.509 Certificate to use for mTLS authentication against the upstream",
                    "minLength": 1,
                    "title": "Auth certificate",
                    "type": "string"
                },
                "auth_certificate_key": {
                    "description": "Certificate key to use for mTLS authentication against the upstream",
                    "minLength": 1,
                    "title": "Auth certificate key",
                    "type": "string"
                },
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password",
                        "Certificate and Key"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "EntitlementUsageMetrics": {
            "properties": {
                "tokens": {
                    "$ref": "#/definitions/CommonMetrics"
                }
            },
            "required": [
                "tokens"
            ],
            "type": "object"
        },
        "ErrorDetail": {
            "properties": {
                "detail": {
                    "description": "An extended message for the response.",
                    "minLength": 1,
                    "title": "Detail",
                    "type": "string"
                },
                "fields": {
                    "additionalProperties": {
                        "items": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "description": "A Dictionary of related errors where key: Field and value: Array of Errors related to that field",
                    "title": "Fields",
                    "type": "object"
                }
            },
            "required": [
                "detail"
            ],
            "type": "object"
        },
        "Eula": {
            "properties": {
                "identifier": {
                    "description": "A unique identifier that you can use for your own EULA tracking purposes. This might be a date, or a semantic version, etc. The only requirement is that it is unique across multiple EULAs.",
                    "format": "slug",
                    "maxLength": 16,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Identifier",
                    "type": "string",
                    "x-nullable": true
                },
                "number": {
                    "description": "A sequential identifier that increments by one for each new commit in a repository.",
                    "maximum": 2147483647,
                    "minimum": 0,
                    "title": "Number",
                    "type": "integer",
                    "x-nullable": true
                }
            },
            "type": "object",
            "x-nullable": true
        },
        "Format": {
            "properties": {
                "description": {
                    "description": "Description of the package format",
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "distributions": {
                    "description": "The distributions supported by this package format",
                    "items": {
                        "$ref": "#/definitions/Distribution"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "extensions": {
                    "description": "A non-exhaustive list of extensions supported",
                    "items": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array"
                },
                "name": {
                    "description": "Name for the package format",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "premium": {
                    "description": "If true the package format is a premium-only feature",
                    "title": "Premium",
                    "type": "boolean"
                },
                "premium_plan_id": {
                    "description": "The minimum plan id required for this package format",
                    "minLength": 1,
                    "title": "Premium plan id",
                    "type": "string",
                    "x-nullable": true
                },
                "premium_plan_name": {
                    "description": "The minimum plan name required for this package format",
                    "minLength": 1,
                    "title": "Premium plan name",
                    "type": "string",
                    "x-nullable": true
                },
                "slug": {
                    "description": "Slug for the package format",
                    "minLength": 1,
                    "title": "Slug",
                    "type": "string"
                },
                "supports": {
                    "$ref": "#/definitions/FormatSupport"
                }
            },
            "required": [
                "description",
                "extensions",
                "name",
                "premium",
                "slug",
                "supports"
            ],
            "type": "object"
        },
        "FormatSupport": {
            "description": "A set of what the package format supports",
            "properties": {
                "dependencies": {
                    "description": "If true the package format supports dependencies",
                    "title": "Dependencies",
                    "type": "boolean"
                },
                "distributions": {
                    "description": "If true the package format supports distributions",
                    "title": "Distributions",
                    "type": "boolean"
                },
                "file_lists": {
                    "description": "If true the package format supports file lists",
                    "title": "File lists",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "If true the package format supports metadata",
                    "title": "Metadata",
                    "type": "boolean"
                },
                "upstreams": {
                    "$ref": "#/definitions/FormatSupportUpstream"
                },
                "versioning": {
                    "description": "If true the package format supports versioning",
                    "title": "Versioning",
                    "type": "boolean"
                }
            },
            "required": [
                "dependencies",
                "distributions",
                "file_lists",
                "metadata",
                "upstreams",
                "versioning"
            ],
            "type": "object"
        },
        "FormatSupportUpstream": {
            "description": "The upstream support for the package format",
            "properties": {
                "auth_modes": {
                    "description": "The authentication modes supported by the upstream format",
                    "items": {
                        "default": "Username and Password",
                        "enum": [
                            "Username and Password",
                            "Token",
                            "Certificate and Key"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                },
                "caching": {
                    "description": "If true the upstream format supports caching",
                    "title": "Caching",
                    "type": "boolean"
                },
                "indexing": {
                    "description": "If true the upstream format supports indexing",
                    "title": "Indexing",
                    "type": "boolean"
                },
                "indexing_behavior": {
                    "default": "Unsupported",
                    "description": "The behavior of the upstream when indexing",
                    "enum": [
                        "Unsupported",
                        "Ahead-of-time (static) indexing",
                        "Just-in-time (dynamic) indexing"
                    ],
                    "title": "Indexing behavior",
                    "type": "string"
                },
                "proxying": {
                    "description": "If true the upstream format supports proxying",
                    "title": "Proxying",
                    "type": "boolean"
                },
                "signature_verification": {
                    "default": "Unsupported",
                    "description": "The signature verification supported by the upstream format",
                    "enum": [
                        "Unsupported",
                        "Repository Metadata",
                        "Packages",
                        "Repository Metadata and Packages"
                    ],
                    "title": "Signature verification",
                    "type": "string"
                }
            },
            "required": [
                "auth_modes",
                "caching",
                "indexing",
                "proxying"
            ],
            "type": "object"
        },
        "GeoIpLocation": {
            "properties": {
                "city": {
                    "minLength": 1,
                    "title": "City",
                    "type": "string",
                    "x-nullable": true
                },
                "continent": {
                    "minLength": 1,
                    "title": "Continent",
                    "type": "string",
                    "x-nullable": true
                },
                "country": {
                    "minLength": 1,
                    "title": "Country",
                    "type": "string",
                    "x-nullable": true
                },
                "country_code": {
                    "readOnly": true,
                    "title": "Country code",
                    "type": "string"
                },
                "latitude": {
                    "format": "decimal",
                    "title": "Latitude",
                    "type": "string",
                    "x-nullable": true
                },
                "longitude": {
                    "format": "decimal",
                    "title": "Longitude",
                    "type": "string",
                    "x-nullable": true
                },
                "postal_code": {
                    "minLength": 1,
                    "title": "Postal code",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "city",
                "continent",
                "country",
                "postal_code"
            ],
            "type": "object"
        },
        "GoPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "GoPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "GoUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "GoUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "GoUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HelmPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HelmPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "provenance_file": {
                    "description": "The provenance file containing the signature for the chart. If one is not provided, it will be generated automatically.",
                    "minLength": 1,
                    "title": "Provenance file",
                    "type": "string",
                    "x-nullable": true
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "HelmUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "HelmUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "HelmUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "HexPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "HexPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "HexUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "HexUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "HexUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "History": {
            "properties": {
                "days": {
                    "default": 0,
                    "title": "Days",
                    "type": "integer"
                },
                "display": {
                    "$ref": "#/definitions/HistoryFieldset"
                },
                "end": {
                    "format": "date-time",
                    "title": "End",
                    "type": "string"
                },
                "plan": {
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Plan",
                    "type": "string"
                },
                "raw": {
                    "$ref": "#/definitions/HistoryFieldsetRaw"
                },
                "start": {
                    "format": "date-time",
                    "title": "Start",
                    "type": "string"
                }
            },
            "required": [
                "display",
                "end",
                "plan",
                "raw",
                "start"
            ],
            "type": "object"
        },
        "HistoryFieldset": {
            "properties": {
                "downloaded": {
                    "$ref": "#/definitions/Usage"
                },
                "storage_used": {
                    "$ref": "#/definitions/StorageUsage"
                },
                "uploaded": {
                    "$ref": "#/definitions/Usage"
                }
            },
            "required": [
                "downloaded",
                "storage_used",
                "uploaded"
            ],
            "type": "object"
        },
        "HistoryFieldsetRaw": {
            "properties": {
                "downloaded": {
                    "$ref": "#/definitions/UsageRaw"
                },
                "storage_used": {
                    "$ref": "#/definitions/StorageUsageRaw"
                },
                "uploaded": {
                    "$ref": "#/definitions/UsageRaw"
                }
            },
            "required": [
                "downloaded",
                "storage_used",
                "uploaded"
            ],
            "type": "object"
        },
        "LuarocksPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "LuarocksPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "MavenPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "artifact_id": {
                    "description": "The ID of the artifact.",
                    "minLength": 1,
                    "title": "Artifact id",
                    "type": "string",
                    "x-nullable": true
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "group_id": {
                    "description": "Artifact's group ID.",
                    "maxLength": 2083,
                    "title": "Group id",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "packaging": {
                    "description": "Artifact's Maven packaging type.",
                    "maxLength": 64,
                    "title": "Packaging",
                    "type": "string",
                    "x-nullable": true
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "sbt_version": {
                    "maxLength": 64,
                    "title": "Sbt version",
                    "type": "string",
                    "x-nullable": true
                },
                "scala_version": {
                    "maxLength": 64,
                    "title": "Scala version",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "MavenPackageUploadRequest": {
            "properties": {
                "artifact_id": {
                    "description": "The ID of the artifact.",
                    "minLength": 1,
                    "title": "Artifact id",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_files": {
                    "description": "Extra files to include in the package. This can be a single file or multiple files.",
                    "items": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "group_id": {
                    "description": "Artifact's group ID.",
                    "maxLength": 2083,
                    "title": "Group id",
                    "type": "string",
                    "x-nullable": true
                },
                "ivy_file": {
                    "description": "The ivy file is an XML file describing the dependencies of the project.",
                    "minLength": 1,
                    "title": "Ivy file",
                    "type": "string",
                    "x-nullable": true
                },
                "javadoc_file": {
                    "description": "Adds bundled Java documentation to the Maven package",
                    "minLength": 1,
                    "title": "Javadoc file",
                    "type": "string",
                    "x-nullable": true
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "packaging": {
                    "description": "Artifact's Maven packaging type.",
                    "maxLength": 64,
                    "title": "Packaging",
                    "type": "string",
                    "x-nullable": true
                },
                "pom_file": {
                    "description": "The POM file is an XML file containing the Maven coordinates.",
                    "minLength": 1,
                    "title": "Pom file",
                    "type": "string",
                    "x-nullable": true
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "sbt_version": {
                    "maxLength": 64,
                    "title": "Sbt version",
                    "type": "string",
                    "x-nullable": true
                },
                "scala_version": {
                    "maxLength": 64,
                    "title": "Scala version",
                    "type": "string",
                    "x-nullable": true
                },
                "sources_file": {
                    "description": "Adds bundled Java source code to the Maven package.",
                    "minLength": 1,
                    "title": "Sources file",
                    "type": "string",
                    "x-nullable": true
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                },
                "tests_file": {
                    "description": "Adds bundled Java tests to the Maven package.",
                    "minLength": 1,
                    "title": "Tests file",
                    "type": "string",
                    "x-nullable": true
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "MavenUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy",
                        "Cache Only"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verification_status": {
                    "default": "Unknown",
                    "description": "The signature verification status for this upstream.",
                    "enum": [
                        "Unknown",
                        "Invalid",
                        "Valid",
                        "Invalid (No Key)"
                    ],
                    "readOnly": true,
                    "title": "Verification status",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "MavenUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy",
                        "Cache Only"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "MavenUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy",
                        "Cache Only"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Namespace": {
            "properties": {
                "name": {
                    "readOnly": true,
                    "title": "Name",
                    "type": "string"
                },
                "slug": {
                    "format": "slug",
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "type_name": {
                    "readOnly": true,
                    "title": "Type name",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NamespaceAuditLog": {
            "properties": {
                "actor": {
                    "minLength": 1,
                    "title": "Actor",
                    "type": "string",
                    "x-nullable": true
                },
                "actor_ip_address": {
                    "minLength": 1,
                    "title": "Actor ip address",
                    "type": "string",
                    "x-nullable": true
                },
                "actor_kind": {
                    "readOnly": true,
                    "title": "Actor kind",
                    "type": "string"
                },
                "actor_location": {
                    "$ref": "#/definitions/GeoIpLocation"
                },
                "actor_slug_perm": {
                    "minLength": 1,
                    "title": "Actor slug perm",
                    "type": "string",
                    "x-nullable": true
                },
                "actor_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Actor url",
                    "type": "string",
                    "x-nullable": true
                },
                "context": {
                    "minLength": 1,
                    "title": "Context",
                    "type": "string"
                },
                "event": {
                    "minLength": 1,
                    "title": "Event",
                    "type": "string"
                },
                "event_at": {
                    "format": "date-time",
                    "title": "Event at",
                    "type": "string"
                },
                "object": {
                    "minLength": 1,
                    "title": "Object",
                    "type": "string"
                },
                "object_kind": {
                    "minLength": 1,
                    "title": "Object kind",
                    "type": "string"
                },
                "object_slug_perm": {
                    "minLength": 1,
                    "title": "Object slug perm",
                    "type": "string"
                },
                "target": {
                    "minLength": 1,
                    "title": "Target",
                    "type": "string"
                },
                "target_kind": {
                    "minLength": 1,
                    "title": "Target kind",
                    "type": "string"
                },
                "target_slug_perm": {
                    "format": "slug",
                    "maxLength": 24,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Target slug perm",
                    "type": "string",
                    "x-nullable": true
                },
                "uuid": {
                    "format": "uuid",
                    "readOnly": true,
                    "title": "Uuid",
                    "type": "string"
                }
            },
            "required": [
                "actor",
                "actor_ip_address",
                "actor_location",
                "actor_slug_perm",
                "context",
                "event",
                "event_at",
                "object",
                "object_kind",
                "object_slug_perm",
                "target",
                "target_kind"
            ],
            "type": "object"
        },
        "NestedLicensePolicy": {
            "properties": {
                "allow_unknown_licenses": {
                    "readOnly": true,
                    "title": "Allow unknown licenses",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "description": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "readOnly": true,
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "spdx_identifiers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Url",
                    "type": "string"
                }
            },
            "required": [
                "spdx_identifiers"
            ],
            "type": "object"
        },
        "NestedVulnerabilityPolicy": {
            "properties": {
                "allow_unknown_severity": {
                    "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
                    "readOnly": true,
                    "title": "Allow unknown severity",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "description": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "min_severity": {
                    "default": "Critical",
                    "enum": [
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Min severity",
                    "type": "string"
                },
                "name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "readOnly": true,
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NestedVulnerabilityScanResults": {
            "properties": {
                "created_at": {
                    "description": "The time this scan result was stored.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "has_vulnerabilities": {
                    "description": "Do the results contain any known vulnerabilities?",
                    "readOnly": true,
                    "title": "Has vulnerabilities",
                    "type": "boolean"
                },
                "identifier": {
                    "minLength": 1,
                    "title": "Identifier",
                    "type": "string"
                },
                "max_severity": {
                    "default": "Unknown",
                    "enum": [
                        "Unknown",
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Max severity",
                    "type": "string"
                },
                "num_vulnerabilities": {
                    "default": 0,
                    "title": "Num vulnerabilities",
                    "type": "integer"
                },
                "scan_id": {
                    "description": "Deprecated (23-05-15): Please use 'identifier' instead. Previously: A monotonically increasing number that identified a scan within a repository.",
                    "title": "Scan id",
                    "type": "integer",
                    "x-nullable": true
                },
                "url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Url",
                    "type": "string"
                }
            },
            "required": [
                "identifier",
                "scan_id"
            ],
            "type": "object"
        },
        "NpmPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NpmPackageUploadRequest": {
            "properties": {
                "npm_dist_tag": {
                    "default": "latest",
                    "description": "The default npm dist-tag for this package/version - This will replace any other package/version if they are using the same tag.",
                    "maxLength": 255,
                    "minLength": 1,
                    "title": "Npm dist tag",
                    "type": "string"
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "NpmUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password",
                        "Token"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "NpmUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password",
                        "Token"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "NpmUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password",
                        "Token"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "NugetPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "NugetPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "symbols_file": {
                    "description": "Uploads a symbols file as a separate package",
                    "minLength": 1,
                    "title": "Symbols file",
                    "type": "string",
                    "x-nullable": true
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "NugetUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "NugetUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "NugetUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Organization": {
            "properties": {
                "country": {
                    "maxLength": 32,
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Country",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "location": {
                    "description": "The city/town/area your organization is based in.",
                    "readOnly": true,
                    "title": "Location",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "slug": {
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "tagline": {
                    "description": "A short public descriptive for your organization.",
                    "readOnly": true,
                    "title": "Tagline",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OrganizationGroupSync": {
            "properties": {
                "idp_key": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Idp key",
                    "type": "string"
                },
                "idp_value": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Idp value",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "team": {
                    "format": "slug",
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Team",
                    "type": "string"
                }
            },
            "required": [
                "idp_key",
                "idp_value",
                "team"
            ],
            "type": "object"
        },
        "OrganizationGroupSyncRequest": {
            "properties": {
                "idp_key": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Idp key",
                    "type": "string"
                },
                "idp_value": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Idp value",
                    "type": "string"
                },
                "organization": {
                    "title": "Organization",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "team": {
                    "format": "slug",
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Team",
                    "type": "string"
                }
            },
            "required": [
                "idp_key",
                "idp_value",
                "organization",
                "team"
            ],
            "type": "object"
        },
        "OrganizationGroupSyncStatus": {
            "properties": {
                "saml_group_sync_status": {
                    "readOnly": true,
                    "title": "Saml group sync status",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "OrganizationInvite": {
            "properties": {
                "email": {
                    "description": "The email of the user to be invited.",
                    "format": "email",
                    "minLength": 1,
                    "title": "Email",
                    "type": "string"
                },
                "expires_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Expires at",
                    "type": "string"
                },
                "inviter": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Inviter",
                    "type": "string"
                },
                "inviter_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Inviter url",
                    "type": "string",
                    "x-nullable": true
                },
                "org": {
                    "readOnly": true,
                    "title": "Org",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "description": "The role to be assigned to the invited user.",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "teams": {
                    "items": {
                        "$ref": "#/definitions/OrganizationTeamInvite"
                    },
                    "type": "array"
                },
                "user": {
                    "description": "The slug of the user to be invited.",
                    "minLength": 1,
                    "title": "User",
                    "type": "string"
                },
                "user_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "User url",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "OrganizationInviteExtend": {
            "properties": {
                "email": {
                    "description": "The email of the user to be invited.",
                    "format": "email",
                    "minLength": 1,
                    "title": "Email",
                    "type": "string"
                },
                "expires_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Expires at",
                    "type": "string"
                },
                "inviter": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Inviter",
                    "type": "string"
                },
                "inviter_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Inviter url",
                    "type": "string",
                    "x-nullable": true
                },
                "org": {
                    "readOnly": true,
                    "title": "Org",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "description": "The role to be assigned to the invited user.",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "slug_perm": {
                    "description": "The slug_perm of the invite to be extended.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "teams": {
                    "items": {
                        "$ref": "#/definitions/OrganizationTeamInvite"
                    },
                    "type": "array"
                },
                "user": {
                    "description": "The slug of the user to be invited.",
                    "minLength": 1,
                    "title": "User",
                    "type": "string"
                },
                "user_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "User url",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "OrganizationInviteRequest": {
            "properties": {
                "email": {
                    "description": "The email of the user to be invited.",
                    "format": "email",
                    "minLength": 1,
                    "title": "Email",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "description": "The role to be assigned to the invited user.",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "teams": {
                    "items": {
                        "$ref": "#/definitions/OrganizationTeamInvite"
                    },
                    "type": "array"
                },
                "user": {
                    "description": "The slug of the user to be invited.",
                    "minLength": 1,
                    "title": "User",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationInviteUpdate": {
            "properties": {
                "role": {
                    "default": "Member",
                    "description": "The role to be assigned to the invited user.",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "title": "Role",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationInviteUpdateRequestPatch": {
            "properties": {
                "role": {
                    "default": "Member",
                    "description": "The role to be assigned to the invited user.",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "title": "Role",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationMembership": {
            "properties": {
                "email": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Email",
                    "type": "string"
                },
                "has_two_factor": {
                    "readOnly": true,
                    "title": "Has two factor",
                    "type": "boolean"
                },
                "is_active": {
                    "readOnly": true,
                    "title": "Is active",
                    "type": "boolean"
                },
                "joined_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Joined at",
                    "type": "string"
                },
                "last_login_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Last login at",
                    "type": "string",
                    "x-nullable": true
                },
                "last_login_method": {
                    "default": "Unknown",
                    "enum": [
                        "Unknown",
                        "Password",
                        "Social",
                        "SAML"
                    ],
                    "readOnly": true,
                    "title": "Last login method",
                    "type": "string"
                },
                "role": {
                    "default": "Owner",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "readOnly": true,
                    "title": "Role",
                    "type": "string"
                },
                "user": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User",
                    "type": "string"
                },
                "user_id": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User id",
                    "type": "string"
                },
                "user_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User name",
                    "type": "string"
                },
                "user_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "User url",
                    "type": "string"
                },
                "visibility": {
                    "default": "Public",
                    "enum": [
                        "Public",
                        "Private"
                    ],
                    "readOnly": true,
                    "title": "Visibility",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationMembershipRequestPatch": {
            "properties": {},
            "type": "object"
        },
        "OrganizationMembershipRoleUpdate": {
            "properties": {
                "email": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Email",
                    "type": "string"
                },
                "has_two_factor": {
                    "readOnly": true,
                    "title": "Has two factor",
                    "type": "boolean"
                },
                "joined_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Joined at",
                    "type": "string"
                },
                "last_login_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Last login at",
                    "type": "string",
                    "x-nullable": true
                },
                "last_login_method": {
                    "default": "Unknown",
                    "enum": [
                        "Unknown",
                        "Password",
                        "Social",
                        "SAML"
                    ],
                    "readOnly": true,
                    "title": "Last login method",
                    "type": "string"
                },
                "role": {
                    "default": "Owner",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "user": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User",
                    "type": "string"
                },
                "user_id": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User id",
                    "type": "string"
                },
                "user_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User name",
                    "type": "string"
                },
                "user_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "User url",
                    "type": "string"
                },
                "visibility": {
                    "default": "Public",
                    "enum": [
                        "Public",
                        "Private"
                    ],
                    "readOnly": true,
                    "title": "Visibility",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationMembershipRoleUpdateRequestPatch": {
            "properties": {
                "role": {
                    "default": "Owner",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "title": "Role",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationMembershipVisibilityUpdate": {
            "properties": {
                "email": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Email",
                    "type": "string"
                },
                "has_two_factor": {
                    "readOnly": true,
                    "title": "Has two factor",
                    "type": "boolean"
                },
                "joined_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Joined at",
                    "type": "string"
                },
                "last_login_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Last login at",
                    "type": "string",
                    "x-nullable": true
                },
                "last_login_method": {
                    "default": "Unknown",
                    "enum": [
                        "Unknown",
                        "Password",
                        "Social",
                        "SAML"
                    ],
                    "readOnly": true,
                    "title": "Last login method",
                    "type": "string"
                },
                "role": {
                    "default": "Owner",
                    "enum": [
                        "Owner",
                        "Manager",
                        "Member",
                        "Collaborator"
                    ],
                    "readOnly": true,
                    "title": "Role",
                    "type": "string"
                },
                "user": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User",
                    "type": "string"
                },
                "user_id": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User id",
                    "type": "string"
                },
                "user_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User name",
                    "type": "string"
                },
                "user_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "User url",
                    "type": "string"
                },
                "visibility": {
                    "default": "Public",
                    "enum": [
                        "Public",
                        "Private"
                    ],
                    "title": "Visibility",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationMembershipVisibilityUpdateRequestPatch": {
            "properties": {
                "visibility": {
                    "default": "Public",
                    "enum": [
                        "Public",
                        "Private"
                    ],
                    "title": "Visibility",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "OrganizationPackageLicensePolicy": {
            "properties": {
                "allow_unknown_licenses": {
                    "title": "Allow unknown licenses",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "description": {
                    "maxLength": 250,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "spdx_identifiers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "spdx_identifiers"
            ],
            "type": "object"
        },
        "OrganizationPackageLicensePolicyRequest": {
            "properties": {
                "allow_unknown_licenses": {
                    "title": "Allow unknown licenses",
                    "type": "boolean"
                },
                "description": {
                    "maxLength": 250,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                },
                "spdx_identifiers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "name",
                "spdx_identifiers"
            ],
            "type": "object"
        },
        "OrganizationPackageLicensePolicyRequestPatch": {
            "properties": {
                "allow_unknown_licenses": {
                    "title": "Allow unknown licenses",
                    "type": "boolean"
                },
                "description": {
                    "maxLength": 250,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                },
                "spdx_identifiers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "OrganizationPackageVulnerabilityPolicy": {
            "properties": {
                "allow_unknown_severity": {
                    "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
                    "title": "Allow unknown severity",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "description": {
                    "maxLength": 250,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "min_severity": {
                    "default": "Critical",
                    "enum": [
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Min severity",
                    "type": "string"
                },
                "name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OrganizationPackageVulnerabilityPolicyRequest": {
            "properties": {
                "allow_unknown_severity": {
                    "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
                    "title": "Allow unknown severity",
                    "type": "boolean"
                },
                "description": {
                    "maxLength": 250,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "min_severity": {
                    "default": "Critical",
                    "enum": [
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Min severity",
                    "type": "string"
                },
                "name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OrganizationPackageVulnerabilityPolicyRequestPatch": {
            "properties": {
                "allow_unknown_severity": {
                    "description": "Denotes whether vulnerabilities detected by a security scan with an unknown severity are permitted by this policy.",
                    "title": "Allow unknown severity",
                    "type": "boolean"
                },
                "description": {
                    "maxLength": 250,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "min_severity": {
                    "default": "Critical",
                    "enum": [
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Min severity",
                    "type": "string"
                },
                "name": {
                    "maxLength": 100,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "on_violation_quarantine": {
                    "title": "On violation quarantine",
                    "type": "boolean"
                },
                "package_query_string": {
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "OrganizationSAMLAuth": {
            "properties": {
                "saml_auth_enabled": {
                    "title": "Saml auth enabled",
                    "type": "boolean"
                },
                "saml_auth_enforced": {
                    "title": "Saml auth enforced",
                    "type": "boolean"
                },
                "saml_metadata_inline": {
                    "description": "If configured, SAML metadata will be used as entered instead of retrieved from a remote URL.",
                    "maxLength": 32000,
                    "title": "Inline SAML metadata",
                    "type": "string"
                },
                "saml_metadata_url": {
                    "description": "If configured, SAML metadata be retrieved from a remote URL.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "Saml metadata url",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "saml_auth_enabled",
                "saml_auth_enforced"
            ],
            "type": "object"
        },
        "OrganizationSAMLAuthRequestPatch": {
            "properties": {
                "saml_auth_enabled": {
                    "title": "Saml auth enabled",
                    "type": "boolean"
                },
                "saml_auth_enforced": {
                    "title": "Saml auth enforced",
                    "type": "boolean"
                },
                "saml_metadata_inline": {
                    "description": "If configured, SAML metadata will be used as entered instead of retrieved from a remote URL.",
                    "maxLength": 32000,
                    "title": "Inline SAML metadata",
                    "type": "string"
                },
                "saml_metadata_url": {
                    "description": "If configured, SAML metadata be retrieved from a remote URL.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "Saml metadata url",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "OrganizationTeam": {
            "properties": {
                "description": {
                    "maxLength": 140,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "slug": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "visibility": {
                    "default": "Visible",
                    "enum": [
                        "Visible",
                        "Hidden"
                    ],
                    "title": "Visibility",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OrganizationTeamInvite": {
            "properties": {
                "role": {
                    "default": "Member",
                    "description": "The role to be assigned to the invited user in the team.",
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "team": {
                    "description": "The team identifier (slug).",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Team",
                    "type": "string"
                }
            },
            "required": [
                "team"
            ],
            "type": "object"
        },
        "OrganizationTeamMembers": {
            "properties": {
                "members": {
                    "description": "The team members",
                    "items": {
                        "$ref": "#/definitions/OrganizationTeamMembership"
                    },
                    "type": "array"
                }
            },
            "required": [
                "members"
            ],
            "type": "object"
        },
        "OrganizationTeamMembership": {
            "description": "The team members",
            "properties": {
                "role": {
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "user": {
                    "minLength": 1,
                    "title": "User",
                    "type": "string"
                }
            },
            "required": [
                "role",
                "user"
            ],
            "type": "object"
        },
        "OrganizationTeamRequest": {
            "properties": {
                "description": {
                    "maxLength": 140,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "slug": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Slug",
                    "type": "string"
                },
                "visibility": {
                    "default": "Visible",
                    "enum": [
                        "Visible",
                        "Hidden"
                    ],
                    "title": "Visibility",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "OrganizationTeamRequestPatch": {
            "properties": {
                "description": {
                    "maxLength": 140,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "slug": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Slug",
                    "type": "string"
                },
                "visibility": {
                    "default": "Visible",
                    "enum": [
                        "Visible",
                        "Hidden"
                    ],
                    "title": "Visibility",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "P2PackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "P2PackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "Package": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags": {
                    "$ref": "#/definitions/Tags"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageCopy": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "description": "The repository the package will be copied to.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags": {
                    "$ref": "#/definitions/Tags"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageCopyRequest": {
            "properties": {
                "destination": {
                    "minLength": 1,
                    "title": "Destination",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                }
            },
            "required": [
                "destination"
            ],
            "type": "object"
        },
        "PackageDenyPolicy": {
            "properties": {
                "action": {
                    "default": "Block downloads",
                    "enum": [
                        "Block downloads"
                    ],
                    "readOnly": true,
                    "title": "Action",
                    "type": "string"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "description": {
                    "maxLength": 250,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "enabled": {
                    "description": "Whether this rule is enabled or disabled.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "name": {
                    "maxLength": 100,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "package_query_string": {
                    "description": "Packages that match this query will trigger this deny rule.",
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "status": {
                    "default": "In Progress",
                    "enum": [
                        "Pending",
                        "In Progress",
                        "Complete",
                        "Cancelled",
                        "Errored"
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                }
            },
            "required": [
                "package_query_string"
            ],
            "type": "object"
        },
        "PackageDenyPolicyRequest": {
            "properties": {
                "description": {
                    "maxLength": 250,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "enabled": {
                    "description": "Whether this rule is enabled or disabled.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "name": {
                    "maxLength": 100,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "package_query_string": {
                    "description": "Packages that match this query will trigger this deny rule.",
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string"
                }
            },
            "required": [
                "package_query_string"
            ],
            "type": "object"
        },
        "PackageDenyPolicyRequestPatch": {
            "properties": {
                "description": {
                    "maxLength": 250,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "enabled": {
                    "description": "Whether this rule is enabled or disabled.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "name": {
                    "maxLength": 100,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "package_query_string": {
                    "description": "Packages that match this query will trigger this deny rule.",
                    "minLength": 1,
                    "title": "Package query string",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageDependencies": {
            "properties": {
                "dependencies": {
                    "items": {
                        "$ref": "#/definitions/PackageDependency"
                    },
                    "type": "array"
                }
            },
            "required": [
                "dependencies"
            ],
            "type": "object"
        },
        "PackageDependency": {
            "properties": {
                "dep_type": {
                    "default": "Depends",
                    "enum": [
                        "Depends",
                        "Pre-Depends",
                        "Recommends",
                        "Suggests",
                        "Enhances",
                        "Replaces",
                        "Breaks",
                        "Built-Using",
                        "Build-Depends",
                        "Build-Depends-Indep",
                        "Build-Conflicts",
                        "Build-Conflicts-Indep",
                        "Conflicts",
                        "Provides",
                        "Obsoletes",
                        "Requires",
                        "Runtime",
                        "Development",
                        "Compile",
                        "Provided",
                        "Test",
                        "System",
                        "Import",
                        "Excluded",
                        "Build-Requires",
                        "Python-Requires"
                    ],
                    "readOnly": true,
                    "title": "Dep type",
                    "type": "string"
                },
                "name": {
                    "maxLength": 255,
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Name",
                    "type": "string"
                },
                "operator": {
                    "default": "=",
                    "enum": [
                        "=",
                        "!=",
                        "<",
                        "<<",
                        "<=",
                        ">",
                        ">>",
                        ">=",
                        "~=",
                        "~>",
                        "matches"
                    ],
                    "readOnly": true,
                    "title": "Operator",
                    "type": "string",
                    "x-nullable": true
                },
                "version": {
                    "maxLength": 128,
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "PackageFile": {
            "properties": {
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string",
                    "x-nullable": true
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_primary": {
                    "readOnly": true,
                    "title": "Is primary",
                    "type": "boolean"
                },
                "is_synchronised": {
                    "readOnly": true,
                    "title": "Is synchronised",
                    "type": "boolean"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the file.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "tag": {
                    "description": "Freeform descriptor that describes what the file is.",
                    "readOnly": true,
                    "title": "Tag",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "PackageFilePartsUpload": {
            "properties": {
                "identifier": {
                    "description": "The identifier for the file to use uploading parts.",
                    "format": "uri",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier",
                    "type": "string"
                },
                "upload_querystring": {
                    "description": "The querystring to use for the next-step PUT upload.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Upload querystring",
                    "type": "string",
                    "x-nullable": true
                },
                "upload_url": {
                    "description": "The URL to use for the next-step PUT upload",
                    "format": "uri",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Upload url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageFileUpload": {
            "properties": {
                "identifier": {
                    "description": "The identifier for the file to use when creating packages",
                    "format": "uri",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier",
                    "type": "string"
                },
                "upload_fields": {
                    "description": "The dictionary of fields that must be sent with POST uploads",
                    "readOnly": true,
                    "title": "Upload fields",
                    "type": "object",
                    "x-nullable": true
                },
                "upload_headers": {
                    "description": "The dictionary of headers that must be sent with uploads",
                    "readOnly": true,
                    "title": "Upload headers",
                    "type": "object",
                    "x-nullable": true
                },
                "upload_querystring": {
                    "description": "The querystring to use for the next-step POST or PUT upload",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Upload querystring",
                    "type": "string",
                    "x-nullable": true
                },
                "upload_url": {
                    "description": "The URL to use for the next-step POST or PUT upload",
                    "format": "uri",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Upload url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageFileUploadRequest": {
            "properties": {
                "filename": {
                    "description": "Filename for the package file upload.",
                    "minLength": 1,
                    "title": "Filename",
                    "type": "string"
                },
                "md5_checksum": {
                    "description": "MD5 checksum for a POST-based package file upload.",
                    "maxLength": 32,
                    "minLength": 32,
                    "title": "Md5 checksum",
                    "type": "string"
                },
                "method": {
                    "default": "post",
                    "description": "The method to use for package file upload.",
                    "enum": [
                        "put_parts",
                        "put",
                        "post",
                        "presigned",
                        "unsigned_put"
                    ],
                    "title": "Method",
                    "type": "string"
                },
                "sha256_checksum": {
                    "description": "SHA256 checksum for a PUT-based package file upload.",
                    "maxLength": 64,
                    "minLength": 64,
                    "title": "Sha256 checksum",
                    "type": "string"
                }
            },
            "required": [
                "filename"
            ],
            "type": "object"
        },
        "PackageGroup": {
            "properties": {
                "backend_kind": {
                    "title": "Backend kind",
                    "type": "integer"
                },
                "count": {
                    "title": "Count",
                    "type": "integer",
                    "x-nullable": true
                },
                "last_push": {
                    "format": "date-time",
                    "title": "Last push",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "num_downloads": {
                    "title": "Num downloads",
                    "type": "integer",
                    "x-nullable": true
                },
                "size": {
                    "title": "Size",
                    "type": "integer",
                    "x-nullable": true
                }
            },
            "required": [
                "count",
                "last_push",
                "num_downloads",
                "size"
            ],
            "type": "object"
        },
        "PackageLicensePolicyEvaluationRequest": {
            "properties": {
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "evaluation_count": {
                    "readOnly": true,
                    "title": "Evaluation count",
                    "type": "integer"
                },
                "policy": {
                    "$ref": "#/definitions/NestedLicensePolicy"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "status": {
                    "default": "Pending",
                    "enum": [
                        "Pending",
                        "In Progress",
                        "Complete",
                        "Cancelled",
                        "Errored"
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "violation_count": {
                    "readOnly": true,
                    "title": "Violation count",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PackageLicensePolicyEvaluationRequestRequest": {
            "properties": {},
            "type": "object"
        },
        "PackageLicensePolicyViolationLog": {
            "properties": {
                "event_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Event at",
                    "type": "string"
                },
                "package": {
                    "$ref": "#/definitions/PackageVulnerability"
                },
                "policy": {
                    "$ref": "#/definitions/NestedLicensePolicy"
                },
                "reasons": {
                    "items": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "package",
                "policy",
                "reasons"
            ],
            "type": "object"
        },
        "PackageMove": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "description": "The repository the package will be moved to.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags": {
                    "$ref": "#/definitions/Tags"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageMoveRequest": {
            "properties": {
                "destination": {
                    "minLength": 1,
                    "title": "Destination",
                    "type": "string"
                }
            },
            "required": [
                "destination"
            ],
            "type": "object"
        },
        "PackageQuarantine": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags": {
                    "$ref": "#/definitions/Tags"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageQuarantineRequest": {
            "properties": {
                "release": {
                    "description": "If true, the package is released from quarantine.",
                    "title": "Release",
                    "type": "boolean"
                },
                "restore": {
                    "description": "If true, the package is released from quarantine. Note: This field is deprecated, please use 'release' instead.",
                    "title": "Restore",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "PackageResync": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags": {
                    "$ref": "#/definitions/Tags"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageStatus": {
            "properties": {
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PackageTag": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_immutable": {
                    "default": false,
                    "description": "If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.",
                    "title": "Is immutable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PackageTagRequest": {
            "properties": {
                "action": {
                    "default": "Add",
                    "enum": [
                        "Add",
                        "Clear",
                        "Replace",
                        "Remove"
                    ],
                    "title": "Action",
                    "type": "string",
                    "x-nullable": true
                },
                "is_immutable": {
                    "default": false,
                    "description": "If true, created tags will be immutable. An immutable flag is a tag that cannot be removed from a package.",
                    "title": "Is immutable",
                    "type": "boolean"
                },
                "tags": {
                    "default": [],
                    "description": "A list of tags to apply the action to. Not required for clears.",
                    "items": {
                        "maxLength": 64,
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "PackageUsageMetrics": {
            "properties": {
                "packages": {
                    "$ref": "#/definitions/CommonMetrics"
                }
            },
            "required": [
                "packages"
            ],
            "type": "object"
        },
        "PackageVersionBadge": {
            "properties": {},
            "type": "object"
        },
        "PackageVulnerability": {
            "properties": {
                "identifier": {
                    "minLength": 1,
                    "title": "Identifier",
                    "type": "string"
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "identifier"
            ],
            "type": "object"
        },
        "PackageVulnerabilityPolicyEvaluationRequest": {
            "properties": {
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "evaluation_count": {
                    "readOnly": true,
                    "title": "Evaluation count",
                    "type": "integer"
                },
                "policy": {
                    "$ref": "#/definitions/NestedVulnerabilityPolicy"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "status": {
                    "default": "Pending",
                    "enum": [
                        "Pending",
                        "In Progress",
                        "Complete",
                        "Cancelled",
                        "Errored"
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "violation_count": {
                    "readOnly": true,
                    "title": "Violation count",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "PackageVulnerabilityPolicyEvaluationRequestRequest": {
            "properties": {},
            "type": "object"
        },
        "PackageVulnerabilityPolicyViolationLog": {
            "properties": {
                "event_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Event at",
                    "type": "string"
                },
                "package": {
                    "$ref": "#/definitions/PackageVulnerability"
                },
                "policy": {
                    "$ref": "#/definitions/NestedVulnerabilityPolicy"
                },
                "reasons": {
                    "items": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array"
                },
                "vulnerability_scan_results": {
                    "$ref": "#/definitions/NestedVulnerabilityScanResults"
                }
            },
            "required": [
                "package",
                "policy",
                "reasons",
                "vulnerability_scan_results"
            ],
            "type": "object"
        },
        "ProviderSettings": {
            "properties": {
                "claims": {
                    "description": "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.",
                    "title": "Claims",
                    "type": "object"
                },
                "enabled": {
                    "description": "Whether the provider settings should be used for incoming OIDC requests.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the provider settings are being configured for",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "provider_url": {
                    "description": "The URL from the provider that serves as the base for the OpenID configuration.\nFor example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/",
                    "format": "uri",
                    "minLength": 1,
                    "title": "Provider url",
                    "type": "string"
                },
                "service_accounts": {
                    "description": "The service accounts associated with these provider settings",
                    "items": {
                        "description": "The service accounts associated with these provider settings",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "slug": {
                    "description": "The slug of the provider settings",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "description": "The unique, immutable identifier of the provider settings.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                }
            },
            "required": [
                "claims",
                "enabled",
                "name",
                "provider_url",
                "service_accounts"
            ],
            "type": "object"
        },
        "ProviderSettingsRequest": {
            "properties": {
                "claims": {
                    "description": "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.",
                    "title": "Claims",
                    "type": "object"
                },
                "enabled": {
                    "description": "Whether the provider settings should be used for incoming OIDC requests.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the provider settings are being configured for",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "provider_url": {
                    "description": "The URL from the provider that serves as the base for the OpenID configuration.\nFor example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/",
                    "format": "uri",
                    "minLength": 1,
                    "title": "Provider url",
                    "type": "string"
                },
                "service_accounts": {
                    "description": "The service accounts associated with these provider settings",
                    "items": {
                        "description": "The service accounts associated with these provider settings",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "claims",
                "enabled",
                "name",
                "provider_url",
                "service_accounts"
            ],
            "type": "object"
        },
        "ProviderSettingsRequestPatch": {
            "properties": {
                "claims": {
                    "description": "The set of claims that any received tokens from the provider must contain to authenticate as the configured service account.",
                    "title": "Claims",
                    "type": "object"
                },
                "enabled": {
                    "description": "Whether the provider settings should be used for incoming OIDC requests.",
                    "title": "Enabled",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the provider settings are being configured for",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "provider_url": {
                    "description": "The URL from the provider that serves as the base for the OpenID configuration.\nFor example, if the OpenID configuration is available at https://token.actions.githubusercontent.com/.well-known/openid-configuration, the provider URL would be https://token.actions.githubusercontent.com/",
                    "format": "uri",
                    "minLength": 1,
                    "title": "Provider url",
                    "type": "string"
                },
                "service_accounts": {
                    "description": "The service accounts associated with these provider settings",
                    "items": {
                        "description": "The service accounts associated with these provider settings",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "type": "object"
        },
        "PythonPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "PythonPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "PythonUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "PythonUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "PythonUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Quota": {
            "properties": {
                "usage": {
                    "$ref": "#/definitions/UsageFieldset"
                }
            },
            "required": [
                "usage"
            ],
            "type": "object"
        },
        "QuotaHistory": {
            "properties": {
                "history": {
                    "items": {
                        "$ref": "#/definitions/History"
                    },
                    "type": "array"
                }
            },
            "required": [
                "history"
            ],
            "type": "object"
        },
        "RateCheck": {
            "properties": {
                "interval": {
                    "description": "The time in seconds that you are suggested to wait until the next request in order to avoid consuming too much within the rate limit window.",
                    "readOnly": true,
                    "title": "Interval",
                    "type": "number"
                },
                "limit": {
                    "description": "The maximum number of requests that you are permitted to send per hour",
                    "readOnly": true,
                    "title": "Limit",
                    "type": "integer"
                },
                "remaining": {
                    "description": "The number of requests that are remaining in the current rate limit window",
                    "readOnly": true,
                    "title": "Remaining",
                    "type": "integer"
                },
                "reset": {
                    "description": "The UTC epoch timestamp at which the current rate limit window will reset",
                    "readOnly": true,
                    "title": "Reset",
                    "type": "integer"
                },
                "reset_iso_8601": {
                    "description": "The ISO 8601 datetime at which the current rate limit window will reset",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Reset iso 8601",
                    "type": "string"
                },
                "throttled": {
                    "description": "If true, throttling is currently being enforced.",
                    "readOnly": true,
                    "title": "Throttled",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RawPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "maxLength": 12288,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "maxLength": 255,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RawPackageUploadRequest": {
            "properties": {
                "content_type": {
                    "description": "A custom content/media (also known as MIME) type to be sent when downloading this file. By default Cloudsmith will attempt to detect the type, but if you need to override it, you can specify it here.",
                    "maxLength": 64,
                    "minLength": 1,
                    "title": "Content/Media Type",
                    "type": "string",
                    "x-nullable": true
                },
                "description": {
                    "description": "A textual description of this package.",
                    "maxLength": 12288,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "maxLength": 255,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "Repository": {
            "properties": {
                "cdn_url": {
                    "description": "Base URL from which packages and other artifacts are downloaded.",
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "content_kind": {
                    "default": "Standard",
                    "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
                    "enum": [
                        "Standard",
                        "Distribution",
                        "Upstream"
                    ],
                    "title": "Content kind",
                    "type": "string"
                },
                "contextual_auth_realm": {
                    "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
                    "title": "Contextual Authentication Realm?",
                    "type": "boolean"
                },
                "copy_own": {
                    "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Copy Own Packages",
                    "type": "boolean"
                },
                "copy_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Copy packages",
                    "type": "string"
                },
                "cosign_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
                    "title": "Cosign Signing Enabled?",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "default_privilege": {
                    "default": "None",
                    "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read",
                        "None"
                    ],
                    "title": "Default privilege",
                    "type": "string"
                },
                "delete_own": {
                    "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Delete Own Packages",
                    "type": "boolean"
                },
                "delete_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Delete packages",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "The datetime the repository was manually deleted at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Deleted at",
                    "type": "string",
                    "x-nullable": true
                },
                "description": {
                    "description": "A description of the repository's purpose/contents.",
                    "title": "Description",
                    "type": "string"
                },
                "distributes": {
                    "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                    "items": {
                        "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                        "format": "slug",
                        "pattern": "^[-a-zA-Z0-9_]+$",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "docker_refresh_tokens_enabled": {
                    "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
                    "title": "Docker Auth Refresh Enabled?",
                    "type": "boolean"
                },
                "ecdsa_keys": {
                    "items": {
                        "$ref": "#/definitions/RepositoryEcdsaKey"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "enforce_eula": {
                    "description": "If checked, downloads will explicitly require acceptance of an EULA.",
                    "title": "Require EULA acceptance for downloads?",
                    "type": "boolean"
                },
                "gpg_keys": {
                    "items": {
                        "$ref": "#/definitions/RepositoryGpgKey"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "index_files": {
                    "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
                    "title": "Index Files?",
                    "type": "boolean"
                },
                "is_open_source": {
                    "readOnly": true,
                    "title": "Is open source",
                    "type": "boolean"
                },
                "is_private": {
                    "readOnly": true,
                    "title": "Is private",
                    "type": "boolean"
                },
                "is_public": {
                    "readOnly": true,
                    "title": "Is public",
                    "type": "boolean"
                },
                "manage_entitlements_privilege": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Manage entitlements privilege",
                    "type": "string"
                },
                "move_own": {
                    "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Move Own Packages",
                    "type": "boolean"
                },
                "move_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Move packages",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for the repository.",
                    "maxLength": 50,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace to which this repository belongs.",
                    "format": "slug",
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "description": "API endpoint where data about this namespace can be retrieved.",
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "nuget_native_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
                    "title": "Nuget Native Signing Enabled?",
                    "type": "boolean"
                },
                "num_downloads": {
                    "description": "The number of downloads for packages in the repository.",
                    "readOnly": true,
                    "title": "Num downloads",
                    "type": "integer"
                },
                "num_policy_violated_packages": {
                    "description": "Number of packages with policy violations in a repository.",
                    "readOnly": true,
                    "title": "Num policy violated packages",
                    "type": "integer"
                },
                "num_quarantined_packages": {
                    "description": "Number of quarantined packages in a repository.",
                    "readOnly": true,
                    "title": "Num quarantined packages",
                    "type": "integer"
                },
                "open_source_license": {
                    "description": "The SPDX identifier of the open source license.",
                    "title": "Open source license",
                    "type": "string",
                    "x-nullable": true
                },
                "open_source_project_url": {
                    "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
                    "format": "uri",
                    "maxLength": 200,
                    "title": "Open-Source Project URL",
                    "type": "string",
                    "x-nullable": true
                },
                "package_count": {
                    "description": "The number of packages in the repository.",
                    "readOnly": true,
                    "title": "Package count",
                    "type": "integer"
                },
                "package_group_count": {
                    "description": "The number of groups in the repository.",
                    "readOnly": true,
                    "title": "Package group count",
                    "type": "integer"
                },
                "proxy_npmjs": {
                    "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Npm Packages?",
                    "type": "boolean"
                },
                "proxy_pypi": {
                    "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Python Packages?",
                    "type": "boolean"
                },
                "raw_package_index_enabled": {
                    "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
                    "title": "Serve index for raw packages?",
                    "type": "boolean"
                },
                "raw_package_index_signatures_enabled": {
                    "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
                    "title": "Display generated GPG signatures for the raw package index?",
                    "type": "boolean"
                },
                "replace_packages": {
                    "default": "Write",
                    "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Replace packages",
                    "type": "string"
                },
                "replace_packages_by_default": {
                    "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
                    "title": "Replace packages by default",
                    "type": "boolean"
                },
                "repository_type": {
                    "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "readOnly": true,
                    "title": "Repository Type",
                    "type": "integer"
                },
                "repository_type_str": {
                    "default": "Public",
                    "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
                    "enum": [
                        "Public",
                        "Private",
                        "Open-Source"
                    ],
                    "title": "Repository type str",
                    "type": "string"
                },
                "resync_own": {
                    "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Resync Own Packages",
                    "type": "boolean"
                },
                "resync_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Resync packages",
                    "type": "string"
                },
                "scan_own": {
                    "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Scan Own Packages",
                    "type": "boolean"
                },
                "scan_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Scan packages",
                    "type": "string"
                },
                "self_html_url": {
                    "description": "Website URL for this repository.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "description": "API endpoint where data about this repository can be retrieved.",
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "show_setup_all": {
                    "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
                    "title": "Always show Set Me Up for all formats?",
                    "type": "boolean"
                },
                "size": {
                    "description": "The calculated size of the repository.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "size_str": {
                    "description": "The calculated size of the repository (human readable).",
                    "readOnly": true,
                    "title": "Size str",
                    "type": "string"
                },
                "slug": {
                    "description": "The slug identifies the repository in URIs.",
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "description": "The slug_perm immutably identifies the repository. It will never change once a repository has been created.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "storage_region": {
                    "default": "default",
                    "description": "The Cloudsmith region in which package files are stored.",
                    "readOnly": true,
                    "title": "Storage region",
                    "type": "string"
                },
                "strict_npm_validation": {
                    "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
                    "title": "Strict Npm Validation?",
                    "type": "boolean"
                },
                "tag_pre_releases_as_latest": {
                    "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
                    "title": "Apply Latest Tag for Pre-Release Versions?",
                    "type": "boolean"
                },
                "use_debian_labels": {
                    "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-<identifier>'; or 'source=none' if no token was used. You can use this to help with pinning.",
                    "title": "Use Debian Labels?",
                    "type": "boolean"
                },
                "use_default_cargo_upstream": {
                    "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
                    "title": "Use crates.io as default Cargo upstream?",
                    "type": "boolean"
                },
                "use_entitlements_privilege": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Use entitlements privilege",
                    "type": "string"
                },
                "use_noarch_packages": {
                    "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
                    "title": "Use/Configure NoArch Packages?",
                    "type": "boolean"
                },
                "use_source_packages": {
                    "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
                    "title": "Use/Configure Source Packages?",
                    "type": "boolean"
                },
                "use_vulnerability_scanning": {
                    "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
                    "title": "Use Vulnerability Scanning?",
                    "type": "boolean"
                },
                "user_entitlements_enabled": {
                    "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
                    "title": "User Entitlements Enabled",
                    "type": "boolean"
                },
                "view_statistics": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "View statistics",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "RepositoryAuditLog": {
            "properties": {
                "actor": {
                    "minLength": 1,
                    "title": "Actor",
                    "type": "string",
                    "x-nullable": true
                },
                "actor_ip_address": {
                    "minLength": 1,
                    "title": "Actor ip address",
                    "type": "string",
                    "x-nullable": true
                },
                "actor_kind": {
                    "readOnly": true,
                    "title": "Actor kind",
                    "type": "string"
                },
                "actor_location": {
                    "$ref": "#/definitions/GeoIpLocation"
                },
                "actor_slug_perm": {
                    "minLength": 1,
                    "title": "Actor slug perm",
                    "type": "string",
                    "x-nullable": true
                },
                "actor_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Actor url",
                    "type": "string",
                    "x-nullable": true
                },
                "context": {
                    "minLength": 1,
                    "title": "Context",
                    "type": "string"
                },
                "event": {
                    "minLength": 1,
                    "title": "Event",
                    "type": "string"
                },
                "event_at": {
                    "format": "date-time",
                    "title": "Event at",
                    "type": "string"
                },
                "object": {
                    "minLength": 1,
                    "title": "Object",
                    "type": "string"
                },
                "object_kind": {
                    "minLength": 1,
                    "title": "Object kind",
                    "type": "string"
                },
                "object_slug_perm": {
                    "minLength": 1,
                    "title": "Object slug perm",
                    "type": "string"
                },
                "uuid": {
                    "format": "uuid",
                    "readOnly": true,
                    "title": "Uuid",
                    "type": "string"
                }
            },
            "required": [
                "actor",
                "actor_ip_address",
                "actor_location",
                "actor_slug_perm",
                "context",
                "event",
                "event_at",
                "object",
                "object_kind",
                "object_slug_perm"
            ],
            "type": "object"
        },
        "RepositoryCreate": {
            "properties": {
                "cdn_url": {
                    "description": "Base URL from which packages and other artifacts are downloaded.",
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "content_kind": {
                    "default": "Standard",
                    "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
                    "enum": [
                        "Standard",
                        "Distribution",
                        "Upstream"
                    ],
                    "title": "Content kind",
                    "type": "string"
                },
                "contextual_auth_realm": {
                    "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
                    "title": "Contextual Authentication Realm?",
                    "type": "boolean"
                },
                "copy_own": {
                    "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Copy Own Packages",
                    "type": "boolean"
                },
                "copy_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Copy packages",
                    "type": "string"
                },
                "cosign_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
                    "title": "Cosign Signing Enabled?",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "default_privilege": {
                    "default": "None",
                    "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read",
                        "None"
                    ],
                    "title": "Default privilege",
                    "type": "string"
                },
                "delete_own": {
                    "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Delete Own Packages",
                    "type": "boolean"
                },
                "delete_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Delete packages",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "The datetime the repository was manually deleted at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Deleted at",
                    "type": "string",
                    "x-nullable": true
                },
                "description": {
                    "description": "A description of the repository's purpose/contents.",
                    "title": "Description",
                    "type": "string"
                },
                "distributes": {
                    "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                    "items": {
                        "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                        "format": "slug",
                        "pattern": "^[-a-zA-Z0-9_]+$",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "docker_refresh_tokens_enabled": {
                    "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
                    "title": "Docker Auth Refresh Enabled?",
                    "type": "boolean"
                },
                "ecdsa_keys": {
                    "items": {
                        "$ref": "#/definitions/RepositoryEcdsaKey"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "enforce_eula": {
                    "description": "If checked, downloads will explicitly require acceptance of an EULA.",
                    "title": "Require EULA acceptance for downloads?",
                    "type": "boolean"
                },
                "gpg_keys": {
                    "items": {
                        "$ref": "#/definitions/RepositoryGpgKey"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "index_files": {
                    "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
                    "title": "Index Files?",
                    "type": "boolean"
                },
                "is_open_source": {
                    "readOnly": true,
                    "title": "Is open source",
                    "type": "boolean"
                },
                "is_private": {
                    "readOnly": true,
                    "title": "Is private",
                    "type": "boolean"
                },
                "is_public": {
                    "readOnly": true,
                    "title": "Is public",
                    "type": "boolean"
                },
                "manage_entitlements_privilege": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Manage entitlements privilege",
                    "type": "string"
                },
                "move_own": {
                    "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Move Own Packages",
                    "type": "boolean"
                },
                "move_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Move packages",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for the repository.",
                    "maxLength": 50,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace to which this repository belongs.",
                    "format": "slug",
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "description": "API endpoint where data about this namespace can be retrieved.",
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "nuget_native_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
                    "title": "Nuget Native Signing Enabled?",
                    "type": "boolean"
                },
                "num_downloads": {
                    "description": "The number of downloads for packages in the repository.",
                    "readOnly": true,
                    "title": "Num downloads",
                    "type": "integer"
                },
                "num_policy_violated_packages": {
                    "description": "Number of packages with policy violations in a repository.",
                    "readOnly": true,
                    "title": "Num policy violated packages",
                    "type": "integer"
                },
                "num_quarantined_packages": {
                    "description": "Number of quarantined packages in a repository.",
                    "readOnly": true,
                    "title": "Num quarantined packages",
                    "type": "integer"
                },
                "open_source_license": {
                    "description": "The SPDX identifier of the open source license.",
                    "title": "Open source license",
                    "type": "string",
                    "x-nullable": true
                },
                "open_source_project_url": {
                    "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
                    "format": "uri",
                    "maxLength": 200,
                    "title": "Open-Source Project URL",
                    "type": "string",
                    "x-nullable": true
                },
                "package_count": {
                    "description": "The number of packages in the repository.",
                    "readOnly": true,
                    "title": "Package count",
                    "type": "integer"
                },
                "package_group_count": {
                    "description": "The number of groups in the repository.",
                    "readOnly": true,
                    "title": "Package group count",
                    "type": "integer"
                },
                "proxy_npmjs": {
                    "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Npm Packages?",
                    "type": "boolean"
                },
                "proxy_pypi": {
                    "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Python Packages?",
                    "type": "boolean"
                },
                "raw_package_index_enabled": {
                    "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
                    "title": "Serve index for raw packages?",
                    "type": "boolean"
                },
                "raw_package_index_signatures_enabled": {
                    "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
                    "title": "Display generated GPG signatures for the raw package index?",
                    "type": "boolean"
                },
                "replace_packages": {
                    "default": "Write",
                    "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Replace packages",
                    "type": "string"
                },
                "replace_packages_by_default": {
                    "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
                    "title": "Replace packages by default",
                    "type": "boolean"
                },
                "repository_type": {
                    "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Open-Source repositories are always visible to everyone and are restricted by licensing, but are free to use and come with generous bandwidth/storage. You can only select Open-Source at repository creation time.",
                    "enum": [
                        1,
                        2,
                        3
                    ],
                    "readOnly": true,
                    "title": "Repository Type",
                    "type": "integer"
                },
                "repository_type_str": {
                    "default": "Public",
                    "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
                    "enum": [
                        "Public",
                        "Private",
                        "Open-Source"
                    ],
                    "title": "Repository type str",
                    "type": "string"
                },
                "resync_own": {
                    "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Resync Own Packages",
                    "type": "boolean"
                },
                "resync_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Resync packages",
                    "type": "string"
                },
                "scan_own": {
                    "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Scan Own Packages",
                    "type": "boolean"
                },
                "scan_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Scan packages",
                    "type": "string"
                },
                "self_html_url": {
                    "description": "Website URL for this repository.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "description": "API endpoint where data about this repository can be retrieved.",
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "show_setup_all": {
                    "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
                    "title": "Always show Set Me Up for all formats?",
                    "type": "boolean"
                },
                "size": {
                    "description": "The calculated size of the repository.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "size_str": {
                    "description": "The calculated size of the repository (human readable).",
                    "readOnly": true,
                    "title": "Size str",
                    "type": "string"
                },
                "slug": {
                    "description": "The slug identifies the repository in URIs.",
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "description": "The slug_perm immutably identifies the repository. It will never change once a repository has been created.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "storage_region": {
                    "default": "default",
                    "description": "The Cloudsmith region in which package files are stored.",
                    "title": "Storage region",
                    "type": "string"
                },
                "strict_npm_validation": {
                    "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
                    "title": "Strict Npm Validation?",
                    "type": "boolean"
                },
                "tag_pre_releases_as_latest": {
                    "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
                    "title": "Apply Latest Tag for Pre-Release Versions?",
                    "type": "boolean"
                },
                "use_debian_labels": {
                    "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-<identifier>'; or 'source=none' if no token was used. You can use this to help with pinning.",
                    "title": "Use Debian Labels?",
                    "type": "boolean"
                },
                "use_default_cargo_upstream": {
                    "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
                    "title": "Use crates.io as default Cargo upstream?",
                    "type": "boolean"
                },
                "use_entitlements_privilege": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Use entitlements privilege",
                    "type": "string"
                },
                "use_noarch_packages": {
                    "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
                    "title": "Use/Configure NoArch Packages?",
                    "type": "boolean"
                },
                "use_source_packages": {
                    "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
                    "title": "Use/Configure Source Packages?",
                    "type": "boolean"
                },
                "use_vulnerability_scanning": {
                    "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
                    "title": "Use Vulnerability Scanning?",
                    "type": "boolean"
                },
                "user_entitlements_enabled": {
                    "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
                    "title": "User Entitlements Enabled",
                    "type": "boolean"
                },
                "view_statistics": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "View statistics",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "RepositoryCreateRequest": {
            "properties": {
                "content_kind": {
                    "default": "Standard",
                    "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
                    "enum": [
                        "Standard",
                        "Distribution",
                        "Upstream"
                    ],
                    "title": "Content kind",
                    "type": "string"
                },
                "contextual_auth_realm": {
                    "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
                    "title": "Contextual Authentication Realm?",
                    "type": "boolean"
                },
                "copy_own": {
                    "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Copy Own Packages",
                    "type": "boolean"
                },
                "copy_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Copy packages",
                    "type": "string"
                },
                "cosign_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
                    "title": "Cosign Signing Enabled?",
                    "type": "boolean"
                },
                "default_privilege": {
                    "default": "None",
                    "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read",
                        "None"
                    ],
                    "title": "Default privilege",
                    "type": "string"
                },
                "delete_own": {
                    "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Delete Own Packages",
                    "type": "boolean"
                },
                "delete_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Delete packages",
                    "type": "string"
                },
                "description": {
                    "description": "A description of the repository's purpose/contents.",
                    "title": "Description",
                    "type": "string"
                },
                "distributes": {
                    "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                    "items": {
                        "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                        "format": "slug",
                        "pattern": "^[-a-zA-Z0-9_]+$",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "docker_refresh_tokens_enabled": {
                    "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
                    "title": "Docker Auth Refresh Enabled?",
                    "type": "boolean"
                },
                "enforce_eula": {
                    "description": "If checked, downloads will explicitly require acceptance of an EULA.",
                    "title": "Require EULA acceptance for downloads?",
                    "type": "boolean"
                },
                "index_files": {
                    "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
                    "title": "Index Files?",
                    "type": "boolean"
                },
                "manage_entitlements_privilege": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Manage entitlements privilege",
                    "type": "string"
                },
                "move_own": {
                    "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Move Own Packages",
                    "type": "boolean"
                },
                "move_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Move packages",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for the repository.",
                    "maxLength": 50,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "nuget_native_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
                    "title": "Nuget Native Signing Enabled?",
                    "type": "boolean"
                },
                "open_source_license": {
                    "description": "The SPDX identifier of the open source license.",
                    "title": "Open source license",
                    "type": "string",
                    "x-nullable": true
                },
                "open_source_project_url": {
                    "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
                    "format": "uri",
                    "maxLength": 200,
                    "title": "Open-Source Project URL",
                    "type": "string",
                    "x-nullable": true
                },
                "proxy_npmjs": {
                    "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Npm Packages?",
                    "type": "boolean"
                },
                "proxy_pypi": {
                    "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Python Packages?",
                    "type": "boolean"
                },
                "raw_package_index_enabled": {
                    "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
                    "title": "Serve index for raw packages?",
                    "type": "boolean"
                },
                "raw_package_index_signatures_enabled": {
                    "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
                    "title": "Display generated GPG signatures for the raw package index?",
                    "type": "boolean"
                },
                "replace_packages": {
                    "default": "Write",
                    "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Replace packages",
                    "type": "string"
                },
                "replace_packages_by_default": {
                    "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
                    "title": "Replace packages by default",
                    "type": "boolean"
                },
                "repository_type_str": {
                    "default": "Public",
                    "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
                    "enum": [
                        "Public",
                        "Private",
                        "Open-Source"
                    ],
                    "title": "Repository type str",
                    "type": "string"
                },
                "resync_own": {
                    "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Resync Own Packages",
                    "type": "boolean"
                },
                "resync_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Resync packages",
                    "type": "string"
                },
                "scan_own": {
                    "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Scan Own Packages",
                    "type": "boolean"
                },
                "scan_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Scan packages",
                    "type": "string"
                },
                "show_setup_all": {
                    "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
                    "title": "Always show Set Me Up for all formats?",
                    "type": "boolean"
                },
                "slug": {
                    "description": "The slug identifies the repository in URIs.",
                    "title": "Slug",
                    "type": "string"
                },
                "storage_region": {
                    "default": "default",
                    "description": "The Cloudsmith region in which package files are stored.",
                    "title": "Storage region",
                    "type": "string"
                },
                "strict_npm_validation": {
                    "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
                    "title": "Strict Npm Validation?",
                    "type": "boolean"
                },
                "tag_pre_releases_as_latest": {
                    "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
                    "title": "Apply Latest Tag for Pre-Release Versions?",
                    "type": "boolean"
                },
                "use_debian_labels": {
                    "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-<identifier>'; or 'source=none' if no token was used. You can use this to help with pinning.",
                    "title": "Use Debian Labels?",
                    "type": "boolean"
                },
                "use_default_cargo_upstream": {
                    "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
                    "title": "Use crates.io as default Cargo upstream?",
                    "type": "boolean"
                },
                "use_entitlements_privilege": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Use entitlements privilege",
                    "type": "string"
                },
                "use_noarch_packages": {
                    "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
                    "title": "Use/Configure NoArch Packages?",
                    "type": "boolean"
                },
                "use_source_packages": {
                    "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
                    "title": "Use/Configure Source Packages?",
                    "type": "boolean"
                },
                "use_vulnerability_scanning": {
                    "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
                    "title": "Use Vulnerability Scanning?",
                    "type": "boolean"
                },
                "user_entitlements_enabled": {
                    "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
                    "title": "User Entitlements Enabled",
                    "type": "boolean"
                },
                "view_statistics": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "View statistics",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "RepositoryEcdsaKey": {
            "properties": {
                "active": {
                    "description": "If selected this is the active key for this repository.",
                    "readOnly": true,
                    "title": "Active",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "default": {
                    "description": "If selected this is the default key for this repository.",
                    "readOnly": true,
                    "title": "Default",
                    "type": "boolean"
                },
                "fingerprint": {
                    "description": "The long identifier used by ECDSA for this key.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fingerprint",
                    "type": "string"
                },
                "fingerprint_short": {
                    "readOnly": true,
                    "title": "Fingerprint short",
                    "type": "string"
                },
                "public_key": {
                    "description": "The public key given to repository users.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Public key",
                    "type": "string"
                },
                "ssh_fingerprint": {
                    "description": "The SSH fingerprint used by ECDSA for this key.",
                    "readOnly": true,
                    "title": "Ssh fingerprint",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "RepositoryEcdsaKeyCreate": {
            "properties": {
                "ecdsa_passphrase": {
                    "description": "The ECDSA passphrase used for signing.",
                    "minLength": 1,
                    "title": "Ecdsa passphrase",
                    "type": "string"
                },
                "ecdsa_private_key": {
                    "description": "The ECDSA private key.",
                    "minLength": 1,
                    "title": "Ecdsa private key",
                    "type": "string"
                }
            },
            "required": [
                "ecdsa_private_key"
            ],
            "type": "object"
        },
        "RepositoryGeoIpCidr": {
            "properties": {
                "allow": {
                    "description": "The allowed CIDRs for this repository",
                    "items": {
                        "description": "The allowed CIDRs for this repository",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "deny": {
                    "description": "The denied CIDRs for this repository",
                    "items": {
                        "description": "The denied CIDRs for this repository",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "allow",
                "deny"
            ],
            "type": "object"
        },
        "RepositoryGeoIpCountryCode": {
            "properties": {
                "allow": {
                    "description": "The allowed country codes for this repository",
                    "items": {
                        "description": "The allowed country codes for this repository",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "deny": {
                    "description": "The denied country codes for this repository",
                    "items": {
                        "description": "The denied country codes for this repository",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "allow",
                "deny"
            ],
            "type": "object"
        },
        "RepositoryGeoIpRules": {
            "properties": {
                "cidr": {
                    "$ref": "#/definitions/RepositoryGeoIpCidr"
                },
                "country_code": {
                    "$ref": "#/definitions/RepositoryGeoIpCountryCode"
                }
            },
            "required": [
                "cidr",
                "country_code"
            ],
            "type": "object"
        },
        "RepositoryGeoIpRulesRequest": {
            "properties": {
                "cidr": {
                    "$ref": "#/definitions/RepositoryGeoIpCidr"
                },
                "country_code": {
                    "$ref": "#/definitions/RepositoryGeoIpCountryCode"
                }
            },
            "required": [
                "cidr",
                "country_code"
            ],
            "type": "object"
        },
        "RepositoryGeoIpRulesRequestPatch": {
            "properties": {
                "cidr": {
                    "$ref": "#/definitions/RepositoryGeoIpCidr"
                },
                "country_code": {
                    "$ref": "#/definitions/RepositoryGeoIpCountryCode"
                }
            },
            "type": "object"
        },
        "RepositoryGeoIpStatus": {
            "properties": {
                "geoip_enabled": {
                    "description": "If checked, any access to the website or downloads for this repository is allowed/denied according to the configured Geo/IP restriction rules.",
                    "readOnly": true,
                    "title": "Geo/IP Restriction Enabled?",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RepositoryGeoIpTestAddress": {
            "properties": {
                "addresses": {
                    "description": "The IP addresses to test against this repository",
                    "items": {
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "addresses"
            ],
            "type": "object"
        },
        "RepositoryGeoIpTestAddressResponse": {
            "properties": {
                "addresses": {
                    "description": "The IP address test results ordered by allowed",
                    "items": {
                        "$ref": "#/definitions/RepositoryGeoIpTestAddressResponseDict"
                    },
                    "type": "array"
                }
            },
            "required": [
                "addresses"
            ],
            "type": "object"
        },
        "RepositoryGeoIpTestAddressResponseDict": {
            "properties": {
                "allowed": {
                    "description": "The result of the IP test",
                    "title": "Allowed",
                    "type": "boolean"
                },
                "country_code": {
                    "description": "The country code of the tested IP address",
                    "minLength": 1,
                    "title": "Country code",
                    "type": "string",
                    "x-nullable": true
                },
                "ip_address": {
                    "description": "The IP address that was tested",
                    "minLength": 1,
                    "title": "Ip address",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason for the result",
                    "minLength": 1,
                    "title": "Reason",
                    "type": "string"
                }
            },
            "required": [
                "allowed",
                "country_code",
                "ip_address",
                "reason"
            ],
            "type": "object"
        },
        "RepositoryGpgKey": {
            "properties": {
                "active": {
                    "description": "If selected this is the active key for this repository.",
                    "readOnly": true,
                    "title": "Active",
                    "type": "boolean"
                },
                "comment": {
                    "minLength": 1,
                    "title": "Comment",
                    "type": "string"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "default": {
                    "description": "If selected this is the default key for this repository.",
                    "readOnly": true,
                    "title": "Default",
                    "type": "boolean"
                },
                "fingerprint": {
                    "description": "The long identifier used by GPG for this key.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fingerprint",
                    "type": "string"
                },
                "fingerprint_short": {
                    "readOnly": true,
                    "title": "Fingerprint short",
                    "type": "string"
                },
                "public_key": {
                    "description": "The public key given to repository users.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Public key",
                    "type": "string"
                }
            },
            "required": [
                "comment"
            ],
            "type": "object"
        },
        "RepositoryGpgKeyCreate": {
            "properties": {
                "gpg_passphrase": {
                    "description": "The GPG passphrase used for signing.",
                    "minLength": 1,
                    "title": "Gpg passphrase",
                    "type": "string"
                },
                "gpg_private_key": {
                    "description": "The GPG private key.",
                    "minLength": 1,
                    "title": "Gpg private key",
                    "type": "string"
                }
            },
            "required": [
                "gpg_private_key"
            ],
            "type": "object"
        },
        "RepositoryPrivilegeDict": {
            "properties": {
                "privilege": {
                    "description": "The level of privilege that the user or team should be granted to the specified repository.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Privilege",
                    "type": "string"
                },
                "service": {
                    "description": "The service identifier (slug).",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Service",
                    "type": "string"
                },
                "team": {
                    "description": "The team identifier (slug).",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Team",
                    "type": "string"
                },
                "user": {
                    "description": "The user identifier (slug).",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "User",
                    "type": "string"
                }
            },
            "required": [
                "privilege"
            ],
            "type": "object"
        },
        "RepositoryPrivilegeInput": {
            "properties": {
                "privileges": {
                    "description": "List of objects with explicit privileges to the repository.",
                    "items": {
                        "$ref": "#/definitions/RepositoryPrivilegeDict"
                    },
                    "type": "array"
                }
            },
            "required": [
                "privileges"
            ],
            "type": "object"
        },
        "RepositoryPrivilegeInputRequest": {
            "properties": {
                "privileges": {
                    "description": "List of objects with explicit privileges to the repository.",
                    "items": {
                        "$ref": "#/definitions/RepositoryPrivilegeDict"
                    },
                    "type": "array"
                }
            },
            "required": [
                "privileges"
            ],
            "type": "object"
        },
        "RepositoryPrivilegeInputRequestPatch": {
            "properties": {
                "privileges": {
                    "description": "List of objects with explicit privileges to the repository.",
                    "items": {
                        "$ref": "#/definitions/RepositoryPrivilegeDict"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RepositoryRequestPatch": {
            "properties": {
                "content_kind": {
                    "default": "Standard",
                    "description": "The repository content kind determines whether this repository contains packages, or provides a distribution of packages from other repositories. You can only select the content kind at repository creation time.",
                    "enum": [
                        "Standard",
                        "Distribution",
                        "Upstream"
                    ],
                    "title": "Content kind",
                    "type": "string"
                },
                "contextual_auth_realm": {
                    "description": "If checked, missing credentials for this repository where basic authentication is required shall present an enriched value in the 'WWW-Authenticate' header containing the namespace and repository. This can be useful for tooling such as SBT where the authentication realm is used to distinguish and disambiguate credentials.",
                    "title": "Contextual Authentication Realm?",
                    "type": "boolean"
                },
                "copy_own": {
                    "description": "If checked, users can copy any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Copy Own Packages",
                    "type": "boolean"
                },
                "copy_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to copy packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific copy setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Copy packages",
                    "type": "string"
                },
                "cosign_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) OCI packages and artifacts will be signed using cosign with the repository's ECDSA key. This generates a distinct cosign signature artifact per artifact.",
                    "title": "Cosign Signing Enabled?",
                    "type": "boolean"
                },
                "default_privilege": {
                    "default": "None",
                    "description": "This defines the default level of privilege that all of your organization members have for this repository. This does not include collaborators, but applies to any member of the org regardless of their own membership role (i.e. it applies to owners, managers and members). Be careful if setting this to admin, because any member will be able to change settings.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read",
                        "None"
                    ],
                    "title": "Default privilege",
                    "type": "string"
                },
                "delete_own": {
                    "description": "If checked, users can delete any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Delete Own Packages",
                    "type": "boolean"
                },
                "delete_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to delete packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific delete setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Delete packages",
                    "type": "string"
                },
                "description": {
                    "description": "A description of the repository's purpose/contents.",
                    "title": "Description",
                    "type": "string"
                },
                "distributes": {
                    "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                    "items": {
                        "description": "The repositories distributed through this repo. Adding repos here is only valid if the content_kind is DISTRIBUTION.",
                        "format": "slug",
                        "pattern": "^[-a-zA-Z0-9_]+$",
                        "type": "string"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "docker_refresh_tokens_enabled": {
                    "description": "If checked, refresh tokens will be issued in addition to access tokens for Docker authentication. This allows unlimited extension of the lifetime of access tokens.",
                    "title": "Docker Auth Refresh Enabled?",
                    "type": "boolean"
                },
                "enforce_eula": {
                    "description": "If checked, downloads will explicitly require acceptance of an EULA.",
                    "title": "Require EULA acceptance for downloads?",
                    "type": "boolean"
                },
                "index_files": {
                    "description": "If checked, files contained in packages will be indexed, which increase the synchronisation time required for packages. Note that it is recommended you keep this enabled unless the synchronisation time is significantly impacted.",
                    "title": "Index Files?",
                    "type": "boolean"
                },
                "manage_entitlements_privilege": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to manage entitlement tokens with private repositories. Management is the ability to create, alter, enable, disable or delete all tokens without a repository.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Manage entitlements privilege",
                    "type": "string"
                },
                "move_own": {
                    "description": "If checked, users can move any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Move Own Packages",
                    "type": "boolean"
                },
                "move_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to move packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific move setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Move packages",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for the repository.",
                    "maxLength": 50,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "nuget_native_signing_enabled": {
                    "description": "When enabled, all pushed (or pulled from upstream) nuget packages and artifacts will be signed using the repository's X.509 RSA certificate. Additionally, the nuget RepositorySignature index will list all of the repository's signing certificates including the ones from configured upstreams.",
                    "title": "Nuget Native Signing Enabled?",
                    "type": "boolean"
                },
                "open_source_license": {
                    "description": "The SPDX identifier of the open source license.",
                    "title": "Open source license",
                    "type": "string",
                    "x-nullable": true
                },
                "open_source_project_url": {
                    "description": "The URL to the Open-Source project, used for validating that the project meets the requirements for Open-Source.",
                    "format": "uri",
                    "maxLength": 200,
                    "title": "Open-Source Project URL",
                    "type": "string",
                    "x-nullable": true
                },
                "proxy_npmjs": {
                    "description": "If checked, Npm packages that are not in the repository when requested by clients will automatically be proxied from the public npmjs.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Npm Packages?",
                    "type": "boolean"
                },
                "proxy_pypi": {
                    "description": "If checked, Python packages that are not in the repository when requested by clients will automatically be proxied from the public pypi.python.org registry. If there is at least one version for a package, others will not be proxied.",
                    "title": "Proxy Python Packages?",
                    "type": "boolean"
                },
                "raw_package_index_enabled": {
                    "description": "If checked, HTML and JSON indexes will be generated that list all available raw packages in the repository.",
                    "title": "Serve index for raw packages?",
                    "type": "boolean"
                },
                "raw_package_index_signatures_enabled": {
                    "description": "If checked, the HTML and JSON indexes will display raw package GPG signatures alongside the index packages.",
                    "title": "Display generated GPG signatures for the raw package index?",
                    "type": "boolean"
                },
                "replace_packages": {
                    "default": "Write",
                    "description": "This defines the minimum level of privilege required for a user to republish packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific republish setting. Please note that the user still requires the privilege to delete packages that will be replaced by the new package; otherwise the republish will fail.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Replace packages",
                    "type": "string"
                },
                "replace_packages_by_default": {
                    "description": "If checked, uploaded packages will overwrite/replace any others with the same attributes (e.g. same version) by default. This only applies if the user has the required privilege for the republishing AND has the required privilege to delete existing packages that they don't own.",
                    "title": "Replace packages by default",
                    "type": "boolean"
                },
                "repository_type_str": {
                    "default": "Public",
                    "description": "The repository type changes how it is accessed and billed. Private repositories are visible only to you or authorized delegates. Public repositories are visible to all Cloudsmith users.",
                    "enum": [
                        "Public",
                        "Private",
                        "Open-Source"
                    ],
                    "title": "Repository type str",
                    "type": "string"
                },
                "resync_own": {
                    "description": "If checked, users can resync any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Resync Own Packages",
                    "type": "boolean"
                },
                "resync_packages": {
                    "default": "Admin",
                    "description": "This defines the minimum level of privilege required for a user to resync packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific resync setting.",
                    "enum": [
                        "Admin",
                        "Write"
                    ],
                    "title": "Resync packages",
                    "type": "string"
                },
                "scan_own": {
                    "description": "If checked, users can scan any of their own packages that they have uploaded, assuming that they still have write privilege for the repository. This takes precedence over privileges configured in the 'Access Controls' section of the repository, and any inherited from the org.",
                    "title": "Users Can Scan Own Packages",
                    "type": "boolean"
                },
                "scan_packages": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to scan packages. Unless the package was uploaded by that user, in which the permission may be overridden by the user-specific scan setting.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Scan packages",
                    "type": "string"
                },
                "show_setup_all": {
                    "description": "If checked, the Set Me Up help for all formats will always be shown, even if you don't have packages of that type uploaded. Otherwise, help will only be shown for packages that are in the repository. For example, if you have uploaded only NuGet packages, then the Set Me Up help for NuGet packages will be shown only.",
                    "title": "Always show Set Me Up for all formats?",
                    "type": "boolean"
                },
                "slug": {
                    "description": "The slug identifies the repository in URIs.",
                    "title": "Slug",
                    "type": "string"
                },
                "strict_npm_validation": {
                    "description": "If checked, npm packages will be validated strictly to ensure the package matches specifcation. You can turn this on if you want to guarantee that the packages will work with npm-cli and other tools correctly.",
                    "title": "Strict Npm Validation?",
                    "type": "boolean"
                },
                "tag_pre_releases_as_latest": {
                    "description": "If checked, packages pushed with a pre-release component on that version will be marked with the 'latest' tag. Note that if unchecked, a repository containing ONLY pre-release versions, will have no version marked latest which may cause incompatibility with native tools ",
                    "title": "Apply Latest Tag for Pre-Release Versions?",
                    "type": "boolean"
                },
                "use_debian_labels": {
                    "description": "If checked, a 'Label' field will be present in Debian-based repositories. It will contain a string that identifies the entitlement token used to authenticate the repository, in the form of 'source=t-<identifier>'; or 'source=none' if no token was used. You can use this to help with pinning.",
                    "title": "Use Debian Labels?",
                    "type": "boolean"
                },
                "use_default_cargo_upstream": {
                    "description": "If checked, dependencies of uploaded Cargo crates which do not set an explicit value for \"registry\" will be assumed to be available from crates.io. If unchecked, dependencies with unspecified \"registry\" values will be assumed to be available in the registry being uploaded to. Uncheck this if you want to ensure that dependencies are only ever installed from Cloudsmith unless explicitly specified as belong to another registry.",
                    "title": "Use crates.io as default Cargo upstream?",
                    "type": "boolean"
                },
                "use_entitlements_privilege": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to see/use entitlement tokens with private repositories. If a user does not have the permission, they will only be able to download packages using other credentials, such as email/password via basic authentication. Use this if you want to force users to only use their user-based token, which is tied to their access (if removed, they can't use it).",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "Use entitlements privilege",
                    "type": "string"
                },
                "use_noarch_packages": {
                    "description": "If checked, noarch packages (if supported) are enabled in installations/configurations. A noarch package is one that is not tied to specific system architecture (like i686).",
                    "title": "Use/Configure NoArch Packages?",
                    "type": "boolean"
                },
                "use_source_packages": {
                    "description": "If checked, source packages (if supported) are enabled in installations/configurations. A source package is one that contains source code rather than built binaries.",
                    "title": "Use/Configure Source Packages?",
                    "type": "boolean"
                },
                "use_vulnerability_scanning": {
                    "description": "If checked, vulnerability scanning will be enabled for all supported packages within this repository.",
                    "title": "Use Vulnerability Scanning?",
                    "type": "boolean"
                },
                "user_entitlements_enabled": {
                    "description": "If checked, users can use and manage their own user-specific entitlement token for the repository (if private). Otherwise, user-specific entitlements are disabled for all users.",
                    "title": "User Entitlements Enabled",
                    "type": "boolean"
                },
                "view_statistics": {
                    "default": "Read",
                    "description": "This defines the minimum level of privilege required for a user to view repository statistics, to include entitlement-based usage, if applicable. If a user does not have the permission, they won't be able to view any statistics, either via the UI, API or CLI.",
                    "enum": [
                        "Admin",
                        "Write",
                        "Read"
                    ],
                    "title": "View statistics",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RepositoryRetentionRules": {
            "properties": {
                "retention_count_limit": {
                    "description": "The maximum X number of packages to retain.",
                    "maximum": 10000,
                    "minimum": 0,
                    "title": "Retention count limit",
                    "type": "integer"
                },
                "retention_days_limit": {
                    "description": "The X number of days of packages to retain.",
                    "maximum": 180,
                    "minimum": 0,
                    "title": "Retention days limit",
                    "type": "integer"
                },
                "retention_enabled": {
                    "description": "If checked, the retention lifecycle rules will be activated for the repository. Any packages that don't match will be deleted automatically, and the rest are retained.",
                    "title": "Retention Enabled?",
                    "type": "boolean"
                },
                "retention_group_by_format": {
                    "description": "If checked, retention will apply to packages by package formats rather than across all package formats.For example, when retaining by a limit of 1 and you upload PythonPkg 1.0 and RubyPkg 1.0, no packages are deleted because they are different formats.",
                    "title": "Retention group by format",
                    "type": "boolean"
                },
                "retention_group_by_name": {
                    "description": "If checked, retention will apply to groups of packages by name rather than all packages.<br>For example, when retaining by a limit of 1 and you upload PkgA 1.0, PkgB 1.0 and PkgB 1.1; only PkgB 1.0 is deleted because there are two (2) PkgBs and one (1) PkgA.",
                    "title": "Retention Group By Name?",
                    "type": "boolean"
                },
                "retention_group_by_package_type": {
                    "description": "If checked, retention will apply to packages by package type (e.g. by binary, by source, etc.), rather than across all package types for one or more formats. <br>For example, when retaining by a limit of 1 and you upload DebPackage 1.0 and DebSourcePackage 1.0, no packages are deleted because they are different package types, binary and source respectively.",
                    "title": "Retention Group By Package Type?",
                    "type": "boolean"
                },
                "retention_size_limit": {
                    "description": "The maximum X total size (in bytes) of packages to retain.",
                    "maximum": 21474836480,
                    "minimum": 0,
                    "title": "Retention size limit",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "RepositoryRetentionRulesRequestPatch": {
            "properties": {
                "retention_count_limit": {
                    "description": "The maximum X number of packages to retain.",
                    "maximum": 10000,
                    "minimum": 0,
                    "title": "Retention count limit",
                    "type": "integer"
                },
                "retention_days_limit": {
                    "description": "The X number of days of packages to retain.",
                    "maximum": 180,
                    "minimum": 0,
                    "title": "Retention days limit",
                    "type": "integer"
                },
                "retention_enabled": {
                    "description": "If checked, the retention lifecycle rules will be activated for the repository. Any packages that don't match will be deleted automatically, and the rest are retained.",
                    "title": "Retention Enabled?",
                    "type": "boolean"
                },
                "retention_group_by_format": {
                    "description": "If checked, retention will apply to packages by package formats rather than across all package formats.For example, when retaining by a limit of 1 and you upload PythonPkg 1.0 and RubyPkg 1.0, no packages are deleted because they are different formats.",
                    "title": "Retention group by format",
                    "type": "boolean"
                },
                "retention_group_by_name": {
                    "description": "If checked, retention will apply to groups of packages by name rather than all packages.<br>For example, when retaining by a limit of 1 and you upload PkgA 1.0, PkgB 1.0 and PkgB 1.1; only PkgB 1.0 is deleted because there are two (2) PkgBs and one (1) PkgA.",
                    "title": "Retention Group By Name?",
                    "type": "boolean"
                },
                "retention_group_by_package_type": {
                    "description": "If checked, retention will apply to packages by package type (e.g. by binary, by source, etc.), rather than across all package types for one or more formats. <br>For example, when retaining by a limit of 1 and you upload DebPackage 1.0 and DebSourcePackage 1.0, no packages are deleted because they are different package types, binary and source respectively.",
                    "title": "Retention Group By Package Type?",
                    "type": "boolean"
                },
                "retention_size_limit": {
                    "description": "The maximum X total size (in bytes) of packages to retain.",
                    "maximum": 21474836480,
                    "minimum": 0,
                    "title": "Retention size limit",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "RepositoryRsaKey": {
            "properties": {
                "active": {
                    "description": "If selected this is the active key for this repository.",
                    "readOnly": true,
                    "title": "Active",
                    "type": "boolean"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "default": {
                    "description": "If selected this is the default key for this repository.",
                    "readOnly": true,
                    "title": "Default",
                    "type": "boolean"
                },
                "fingerprint": {
                    "description": "The long identifier used by RSA for this key.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fingerprint",
                    "type": "string"
                },
                "fingerprint_short": {
                    "readOnly": true,
                    "title": "Fingerprint short",
                    "type": "string"
                },
                "public_key": {
                    "description": "The public key given to repository users.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Public key",
                    "type": "string"
                },
                "ssh_fingerprint": {
                    "description": "The SSH fingerprint used by RSA for this key.",
                    "readOnly": true,
                    "title": "Ssh fingerprint",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "RepositoryRsaKeyCreate": {
            "properties": {
                "rsa_passphrase": {
                    "description": "The RSA passphrase used for signing.",
                    "minLength": 1,
                    "title": "Rsa passphrase",
                    "type": "string"
                },
                "rsa_private_key": {
                    "description": "The RSA private key.",
                    "minLength": 1,
                    "title": "Rsa private key",
                    "type": "string"
                }
            },
            "required": [
                "rsa_private_key"
            ],
            "type": "object"
        },
        "RepositoryToken": {
            "properties": {
                "clients": {
                    "readOnly": true,
                    "title": "Clients",
                    "type": "integer"
                },
                "created_at": {
                    "description": "The datetime the token was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "created_by": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Created by",
                    "type": "string"
                },
                "created_by_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Created by url",
                    "type": "string"
                },
                "default": {
                    "description": "If selected this is the default token for this repository.",
                    "readOnly": true,
                    "title": "Default",
                    "type": "boolean"
                },
                "disable_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Disable url",
                    "type": "string"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "enable_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Enable url",
                    "type": "string"
                },
                "eula_accepted": {
                    "$ref": "#/definitions/Eula"
                },
                "eula_accepted_at": {
                    "description": "The datetime the EULA was accepted at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Eula accepted at",
                    "type": "string",
                    "x-nullable": true
                },
                "eula_accepted_from": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Eula accepted from",
                    "type": "string",
                    "x-nullable": true
                },
                "eula_required": {
                    "description": "If checked, a EULA acceptance is required for this token.",
                    "title": "Eula required",
                    "type": "boolean"
                },
                "has_limits": {
                    "readOnly": true,
                    "title": "Has limits",
                    "type": "boolean"
                },
                "identifier": {
                    "description": "Deprecated (23-05-15): Please use 'slug_perm' instead. Previously: A monotonically increasing number that identified an entitlement within a repository.",
                    "readOnly": true,
                    "title": "Identifier",
                    "type": "integer",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
                    "title": "Token Active",
                    "type": "boolean"
                },
                "is_limited": {
                    "readOnly": true,
                    "title": "Is limited",
                    "type": "boolean"
                },
                "limit_bandwidth": {
                    "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit bandwidth",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_bandwidth_unit": {
                    "default": "Byte",
                    "enum": [
                        "Byte",
                        "Kilobyte",
                        "Megabyte",
                        "Gigabyte",
                        "Terabyte",
                        "Petabyte",
                        "Exabyte",
                        "Zettabyte",
                        "Yottabyte"
                    ],
                    "title": "Limit bandwidth unit",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_from": {
                    "description": "The starting date/time the token is allowed to be used from.",
                    "format": "date-time",
                    "title": "Limit date range from",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_to": {
                    "description": "The ending date/time the token is allowed to be used until.",
                    "format": "date-time",
                    "title": "Limit date range to",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_num_clients": {
                    "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num clients",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_num_downloads": {
                    "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num downloads",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_package_query": {
                    "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
                    "maxLength": 1024,
                    "title": "Limit package query",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_path_query": {
                    "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
                    "maxLength": 1024,
                    "title": "Limit path query",
                    "type": "string",
                    "x-nullable": true
                },
                "metadata": {
                    "title": "Metadata",
                    "type": "object",
                    "x-nullable": true
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "refresh_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Refresh url",
                    "type": "string"
                },
                "reset_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Reset url",
                    "type": "string"
                },
                "scheduled_reset_at": {
                    "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
                    "format": "date-time",
                    "title": "Scheduled reset at",
                    "type": "string",
                    "x-nullable": true
                },
                "scheduled_reset_period": {
                    "default": "Never Reset",
                    "enum": [
                        "Never Reset",
                        "Daily",
                        "Weekly",
                        "Fortnightly",
                        "Monthly",
                        "Bi-Monthly",
                        "Quarterly",
                        "Every 6 months",
                        "Annual"
                    ],
                    "title": "Scheduled reset period",
                    "type": "string",
                    "x-nullable": true
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "token": {
                    "minLength": 1,
                    "title": "Token",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The datetime the token was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "updated_by": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Updated by",
                    "type": "string",
                    "x-nullable": true
                },
                "updated_by_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Updated by url",
                    "type": "string",
                    "x-nullable": true
                },
                "usage": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Usage",
                    "type": "string"
                },
                "user": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User",
                    "type": "string",
                    "x-nullable": true
                },
                "user_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "User url",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "RepositoryTokenAction": {
            "properties": {},
            "type": "object"
        },
        "RepositoryTokenRefresh": {
            "properties": {
                "clients": {
                    "readOnly": true,
                    "title": "Clients",
                    "type": "integer"
                },
                "created_at": {
                    "description": "The datetime the token was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "created_by": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Created by",
                    "type": "string"
                },
                "created_by_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Created by url",
                    "type": "string"
                },
                "default": {
                    "description": "If selected this is the default token for this repository.",
                    "readOnly": true,
                    "title": "Default",
                    "type": "boolean"
                },
                "disable_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Disable url",
                    "type": "string"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "enable_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Enable url",
                    "type": "string"
                },
                "eula_accepted": {
                    "$ref": "#/definitions/Eula"
                },
                "eula_accepted_at": {
                    "description": "The datetime the EULA was accepted at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Eula accepted at",
                    "type": "string",
                    "x-nullable": true
                },
                "eula_accepted_from": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Eula accepted from",
                    "type": "string",
                    "x-nullable": true
                },
                "eula_required": {
                    "description": "If checked, a EULA acceptance is required for this token.",
                    "title": "Eula required",
                    "type": "boolean"
                },
                "has_limits": {
                    "readOnly": true,
                    "title": "Has limits",
                    "type": "boolean"
                },
                "identifier": {
                    "description": "Deprecated (23-05-15): Please use 'slug_perm' instead. Previously: A monotonically increasing number that identified an entitlement within a repository.",
                    "readOnly": true,
                    "title": "Identifier",
                    "type": "integer",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
                    "title": "Token Active",
                    "type": "boolean"
                },
                "is_limited": {
                    "readOnly": true,
                    "title": "Is limited",
                    "type": "boolean"
                },
                "limit_bandwidth": {
                    "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit bandwidth",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_bandwidth_unit": {
                    "default": "Byte",
                    "enum": [
                        "Byte",
                        "Kilobyte",
                        "Megabyte",
                        "Gigabyte",
                        "Terabyte",
                        "Petabyte",
                        "Exabyte",
                        "Zettabyte",
                        "Yottabyte"
                    ],
                    "title": "Limit bandwidth unit",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_from": {
                    "description": "The starting date/time the token is allowed to be used from.",
                    "format": "date-time",
                    "title": "Limit date range from",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_to": {
                    "description": "The ending date/time the token is allowed to be used until.",
                    "format": "date-time",
                    "title": "Limit date range to",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_num_clients": {
                    "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num clients",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_num_downloads": {
                    "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num downloads",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_package_query": {
                    "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
                    "maxLength": 1024,
                    "title": "Limit package query",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_path_query": {
                    "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
                    "maxLength": 1024,
                    "title": "Limit path query",
                    "type": "string",
                    "x-nullable": true
                },
                "metadata": {
                    "title": "Metadata",
                    "type": "object",
                    "x-nullable": true
                },
                "name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Name",
                    "type": "string"
                },
                "refresh_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Refresh url",
                    "type": "string"
                },
                "reset_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Reset url",
                    "type": "string"
                },
                "scheduled_reset_at": {
                    "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
                    "format": "date-time",
                    "title": "Scheduled reset at",
                    "type": "string",
                    "x-nullable": true
                },
                "scheduled_reset_period": {
                    "default": "Never Reset",
                    "enum": [
                        "Never Reset",
                        "Daily",
                        "Weekly",
                        "Fortnightly",
                        "Monthly",
                        "Bi-Monthly",
                        "Quarterly",
                        "Every 6 months",
                        "Annual"
                    ],
                    "title": "Scheduled reset period",
                    "type": "string",
                    "x-nullable": true
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "token": {
                    "minLength": 1,
                    "title": "Token",
                    "type": "string"
                },
                "updated_at": {
                    "description": "The datetime the token was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "updated_by": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Updated by",
                    "type": "string",
                    "x-nullable": true
                },
                "updated_by_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Updated by url",
                    "type": "string",
                    "x-nullable": true
                },
                "usage": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Usage",
                    "type": "string"
                },
                "user": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "User",
                    "type": "string",
                    "x-nullable": true
                },
                "user_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "User url",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "RepositoryTokenRefreshRequest": {
            "properties": {
                "eula_required": {
                    "description": "If checked, a EULA acceptance is required for this token.",
                    "title": "Eula required",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
                    "title": "Token Active",
                    "type": "boolean"
                },
                "limit_bandwidth": {
                    "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit bandwidth",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_bandwidth_unit": {
                    "default": "Byte",
                    "enum": [
                        "Byte",
                        "Kilobyte",
                        "Megabyte",
                        "Gigabyte",
                        "Terabyte",
                        "Petabyte",
                        "Exabyte",
                        "Zettabyte",
                        "Yottabyte"
                    ],
                    "title": "Limit bandwidth unit",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_from": {
                    "description": "The starting date/time the token is allowed to be used from.",
                    "format": "date-time",
                    "title": "Limit date range from",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_to": {
                    "description": "The ending date/time the token is allowed to be used until.",
                    "format": "date-time",
                    "title": "Limit date range to",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_num_clients": {
                    "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num clients",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_num_downloads": {
                    "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num downloads",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_package_query": {
                    "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
                    "maxLength": 1024,
                    "title": "Limit package query",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_path_query": {
                    "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
                    "maxLength": 1024,
                    "title": "Limit path query",
                    "type": "string",
                    "x-nullable": true
                },
                "metadata": {
                    "title": "Metadata",
                    "type": "object",
                    "x-nullable": true
                },
                "scheduled_reset_at": {
                    "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
                    "format": "date-time",
                    "title": "Scheduled reset at",
                    "type": "string",
                    "x-nullable": true
                },
                "scheduled_reset_period": {
                    "default": "Never Reset",
                    "enum": [
                        "Never Reset",
                        "Daily",
                        "Weekly",
                        "Fortnightly",
                        "Monthly",
                        "Bi-Monthly",
                        "Quarterly",
                        "Every 6 months",
                        "Annual"
                    ],
                    "title": "Scheduled reset period",
                    "type": "string",
                    "x-nullable": true
                },
                "token": {
                    "minLength": 1,
                    "title": "Token",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RepositoryTokenRequest": {
            "properties": {
                "eula_required": {
                    "description": "If checked, a EULA acceptance is required for this token.",
                    "title": "Eula required",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
                    "title": "Token Active",
                    "type": "boolean"
                },
                "limit_bandwidth": {
                    "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit bandwidth",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_bandwidth_unit": {
                    "default": "Byte",
                    "enum": [
                        "Byte",
                        "Kilobyte",
                        "Megabyte",
                        "Gigabyte",
                        "Terabyte",
                        "Petabyte",
                        "Exabyte",
                        "Zettabyte",
                        "Yottabyte"
                    ],
                    "title": "Limit bandwidth unit",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_from": {
                    "description": "The starting date/time the token is allowed to be used from.",
                    "format": "date-time",
                    "title": "Limit date range from",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_to": {
                    "description": "The ending date/time the token is allowed to be used until.",
                    "format": "date-time",
                    "title": "Limit date range to",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_num_clients": {
                    "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num clients",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_num_downloads": {
                    "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num downloads",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_package_query": {
                    "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
                    "maxLength": 1024,
                    "title": "Limit package query",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_path_query": {
                    "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
                    "maxLength": 1024,
                    "title": "Limit path query",
                    "type": "string",
                    "x-nullable": true
                },
                "metadata": {
                    "title": "Metadata",
                    "type": "object",
                    "x-nullable": true
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "scheduled_reset_at": {
                    "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
                    "format": "date-time",
                    "title": "Scheduled reset at",
                    "type": "string",
                    "x-nullable": true
                },
                "scheduled_reset_period": {
                    "default": "Never Reset",
                    "enum": [
                        "Never Reset",
                        "Daily",
                        "Weekly",
                        "Fortnightly",
                        "Monthly",
                        "Bi-Monthly",
                        "Quarterly",
                        "Every 6 months",
                        "Annual"
                    ],
                    "title": "Scheduled reset period",
                    "type": "string",
                    "x-nullable": true
                },
                "token": {
                    "minLength": 1,
                    "title": "Token",
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "RepositoryTokenRequestPatch": {
            "properties": {
                "eula_required": {
                    "description": "If checked, a EULA acceptance is required for this token.",
                    "title": "Eula required",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "If enabled, the token will allow downloads based on configured restrictions (if any).",
                    "title": "Token Active",
                    "type": "boolean"
                },
                "limit_bandwidth": {
                    "description": "The maximum download bandwidth allowed for the token. Values are expressed as the selected unit of bandwidth. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point. ",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit bandwidth",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_bandwidth_unit": {
                    "default": "Byte",
                    "enum": [
                        "Byte",
                        "Kilobyte",
                        "Megabyte",
                        "Gigabyte",
                        "Terabyte",
                        "Petabyte",
                        "Exabyte",
                        "Zettabyte",
                        "Yottabyte"
                    ],
                    "title": "Limit bandwidth unit",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_from": {
                    "description": "The starting date/time the token is allowed to be used from.",
                    "format": "date-time",
                    "title": "Limit date range from",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_date_range_to": {
                    "description": "The ending date/time the token is allowed to be used until.",
                    "format": "date-time",
                    "title": "Limit date range to",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_num_clients": {
                    "description": "The maximum number of unique clients allowed for the token. Please note that since clients are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num clients",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_num_downloads": {
                    "description": "The maximum number of downloads allowed for the token. Please note that since downloads are calculated asynchronously (after the download happens), the limit may not be imposed immediately but at a later point.",
                    "maximum": 9223372036854775807,
                    "minimum": -9223372036854775808,
                    "title": "Limit num downloads",
                    "type": "integer",
                    "x-nullable": true
                },
                "limit_package_query": {
                    "description": "The package-based search query to apply to restrict downloads to. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. This will still allow access to non-package files, such as metadata.",
                    "maxLength": 1024,
                    "title": "Limit package query",
                    "type": "string",
                    "x-nullable": true
                },
                "limit_path_query": {
                    "description": "THIS WILL SOON BE DEPRECATED, please use limit_package_query instead. The path-based search query to apply to restrict downloads to. This supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. The path evaluated does not include the domain name, the namespace, the entitlement code used, the package format, etc. and it always starts with a forward slash.",
                    "maxLength": 1024,
                    "title": "Limit path query",
                    "type": "string",
                    "x-nullable": true
                },
                "metadata": {
                    "title": "Metadata",
                    "type": "object",
                    "x-nullable": true
                },
                "name": {
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "scheduled_reset_at": {
                    "description": "The time at which the scheduled reset period has elapsed and the token limits were automatically reset to zero.",
                    "format": "date-time",
                    "title": "Scheduled reset at",
                    "type": "string",
                    "x-nullable": true
                },
                "scheduled_reset_period": {
                    "default": "Never Reset",
                    "enum": [
                        "Never Reset",
                        "Daily",
                        "Weekly",
                        "Fortnightly",
                        "Monthly",
                        "Bi-Monthly",
                        "Quarterly",
                        "Every 6 months",
                        "Annual"
                    ],
                    "title": "Scheduled reset period",
                    "type": "string",
                    "x-nullable": true
                },
                "token": {
                    "minLength": 1,
                    "title": "Token",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RepositoryTokenSync": {
            "properties": {
                "tokens": {
                    "description": "The entitlements that have been synchronised.",
                    "items": {
                        "$ref": "#/definitions/RepositoryToken"
                    },
                    "readOnly": true,
                    "type": "array"
                }
            },
            "type": "object"
        },
        "RepositoryTokenSyncRequest": {
            "properties": {
                "source": {
                    "description": "The source repository slug (in the same owner namespace).",
                    "minLength": 1,
                    "title": "Source",
                    "type": "string"
                }
            },
            "required": [
                "source"
            ],
            "type": "object"
        },
        "RepositoryTransferRegion": {
            "properties": {
                "storage_region": {
                    "default": "default",
                    "description": "The Cloudsmith region in which package files are stored.",
                    "title": "Storage region",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RepositoryTransferRegionRequest": {
            "properties": {
                "storage_region": {
                    "default": "default",
                    "description": "The Cloudsmith region in which package files are stored.",
                    "title": "Storage region",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RepositoryWebhook": {
            "properties": {
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "created_by": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Created by",
                    "type": "string"
                },
                "created_by_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Created by url",
                    "type": "string"
                },
                "disable_reason": {
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "integer"
                },
                "disable_reason_str": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Disable reason str",
                    "type": "string"
                },
                "events": {
                    "items": {
                        "enum": [
                            "*",
                            "package.created",
                            "package.deleted",
                            "package.downloaded",
                            "package.failed",
                            "package.quarantined",
                            "package.released",
                            "package.restored",
                            "package.security_scanned",
                            "package.synced",
                            "package.syncing",
                            "package.tags_updated"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "identifier": {
                    "description": "Deprecated (23-05-15): Please use 'slug_perm' instead. Previously: A monotonically increasing number that identified a webhook request within a repository.",
                    "readOnly": true,
                    "title": "Identifier",
                    "type": "integer",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.",
                    "title": "Webhook Active",
                    "type": "boolean"
                },
                "is_last_response_bad": {
                    "readOnly": true,
                    "title": "Is last response bad",
                    "type": "boolean"
                },
                "last_response_status": {
                    "readOnly": true,
                    "title": "Last response status",
                    "type": "integer"
                },
                "last_response_status_str": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Last response status str",
                    "type": "string"
                },
                "num_sent": {
                    "readOnly": true,
                    "title": "Num sent",
                    "type": "integer"
                },
                "package_query": {
                    "description": "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.",
                    "maxLength": 1024,
                    "title": "Package query",
                    "type": "string",
                    "x-nullable": true
                },
                "request_body_format": {
                    "description": "The format of the payloads for webhook requests. Valid options are: (0) JSON, (1) JSON array, (2) form encoded JSON and (3) Handlebars template.",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "title": "Payload Format",
                    "type": "integer"
                },
                "request_body_format_str": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Request body format str",
                    "type": "string"
                },
                "request_body_template_format": {
                    "description": "The format of the payloads for webhook requests. Valid options are: (0) Generic/user defined, (1) JSON and (2) XML.",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "title": "Payload Template Format",
                    "type": "integer"
                },
                "request_body_template_format_str": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Request body template format str",
                    "type": "string"
                },
                "request_content_type": {
                    "description": "The value that will be sent for the 'Content Type' header. ",
                    "maxLength": 128,
                    "title": "Content Type Header Value",
                    "type": "string",
                    "x-nullable": true
                },
                "secret_header": {
                    "description": "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Secret Header",
                    "type": "string",
                    "x-nullable": true
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "target_url": {
                    "description": "The destination URL that webhook payloads will be POST'ed to.",
                    "format": "uri",
                    "maxLength": 255,
                    "minLength": 1,
                    "title": "Payload URL",
                    "type": "string"
                },
                "templates": {
                    "items": {
                        "$ref": "#/definitions/WebhookTemplate"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "updated_by": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Updated by",
                    "type": "string"
                },
                "updated_by_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Updated by url",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "events",
                "target_url",
                "templates"
            ],
            "type": "object"
        },
        "RepositoryWebhookRequest": {
            "properties": {
                "events": {
                    "items": {
                        "enum": [
                            "*",
                            "package.created",
                            "package.deleted",
                            "package.downloaded",
                            "package.failed",
                            "package.quarantined",
                            "package.released",
                            "package.restored",
                            "package.security_scanned",
                            "package.synced",
                            "package.syncing",
                            "package.tags_updated"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.",
                    "title": "Webhook Active",
                    "type": "boolean"
                },
                "package_query": {
                    "description": "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.",
                    "maxLength": 1024,
                    "title": "Package query",
                    "type": "string",
                    "x-nullable": true
                },
                "request_body_format": {
                    "description": "The format of the payloads for webhook requests. Valid options are: (0) JSON, (1) JSON array, (2) form encoded JSON and (3) Handlebars template.",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "title": "Payload Format",
                    "type": "integer"
                },
                "request_body_template_format": {
                    "description": "The format of the payloads for webhook requests. Valid options are: (0) Generic/user defined, (1) JSON and (2) XML.",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "title": "Payload Template Format",
                    "type": "integer"
                },
                "request_content_type": {
                    "description": "The value that will be sent for the 'Content Type' header. ",
                    "maxLength": 128,
                    "title": "Content Type Header Value",
                    "type": "string",
                    "x-nullable": true
                },
                "secret_header": {
                    "description": "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Secret Header",
                    "type": "string",
                    "x-nullable": true
                },
                "secret_value": {
                    "description": "The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can use this as a form of authentication on the endpoint side.",
                    "maxLength": 512,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Secret Value",
                    "type": "string",
                    "x-nullable": true
                },
                "signature_key": {
                    "description": "The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note: this is treated as a passphrase and is encrypted when we store it).",
                    "maxLength": 512,
                    "minLength": 1,
                    "title": "HMAC Signature Key",
                    "type": "string"
                },
                "target_url": {
                    "description": "The destination URL that webhook payloads will be POST'ed to.",
                    "format": "uri",
                    "maxLength": 255,
                    "minLength": 1,
                    "title": "Payload URL",
                    "type": "string"
                },
                "templates": {
                    "items": {
                        "$ref": "#/definitions/WebhookTemplate"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "events",
                "target_url",
                "templates"
            ],
            "type": "object"
        },
        "RepositoryWebhookRequestPatch": {
            "properties": {
                "events": {
                    "items": {
                        "enum": [
                            "*",
                            "package.created",
                            "package.deleted",
                            "package.downloaded",
                            "package.failed",
                            "package.quarantined",
                            "package.released",
                            "package.restored",
                            "package.security_scanned",
                            "package.synced",
                            "package.syncing",
                            "package.tags_updated"
                        ],
                        "type": "string"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "If enabled, the webhook will trigger on subscribed events and send payloads to the configured target URL.",
                    "title": "Webhook Active",
                    "type": "boolean"
                },
                "package_query": {
                    "description": "The package-based search query for webhooks to fire. This uses the same syntax as the standard search used for repositories, and also supports boolean logic operators such as OR/AND/NOT and parentheses for grouping. If a package does not match, the webhook will not fire.",
                    "maxLength": 1024,
                    "title": "Package query",
                    "type": "string",
                    "x-nullable": true
                },
                "request_body_format": {
                    "description": "The format of the payloads for webhook requests. Valid options are: (0) JSON, (1) JSON array, (2) form encoded JSON and (3) Handlebars template.",
                    "enum": [
                        0,
                        1,
                        2,
                        3
                    ],
                    "title": "Payload Format",
                    "type": "integer"
                },
                "request_body_template_format": {
                    "description": "The format of the payloads for webhook requests. Valid options are: (0) Generic/user defined, (1) JSON and (2) XML.",
                    "enum": [
                        0,
                        1,
                        2
                    ],
                    "title": "Payload Template Format",
                    "type": "integer"
                },
                "request_content_type": {
                    "description": "The value that will be sent for the 'Content Type' header. ",
                    "maxLength": 128,
                    "title": "Content Type Header Value",
                    "type": "string",
                    "x-nullable": true
                },
                "secret_header": {
                    "description": "The header to send the predefined secret in. This must be unique from existing headers or it won't be sent. You can use this as a form of authentication on the endpoint side.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Secret Header",
                    "type": "string",
                    "x-nullable": true
                },
                "secret_value": {
                    "description": "The value for the predefined secret (note: this is treated as a passphrase and is encrypted when we store it). You can use this as a form of authentication on the endpoint side.",
                    "maxLength": 512,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Secret Value",
                    "type": "string",
                    "x-nullable": true
                },
                "signature_key": {
                    "description": "The value for the signature key - This is used to generate an HMAC-based hex digest of the request body, which we send as the X-Cloudsmith-Signature header so that you can ensure that the request wasn't modified by a malicious party (note: this is treated as a passphrase and is encrypted when we store it).",
                    "maxLength": 512,
                    "minLength": 1,
                    "title": "HMAC Signature Key",
                    "type": "string"
                },
                "target_url": {
                    "description": "The destination URL that webhook payloads will be POST'ed to.",
                    "format": "uri",
                    "maxLength": 255,
                    "minLength": 1,
                    "title": "Payload URL",
                    "type": "string"
                },
                "templates": {
                    "items": {
                        "$ref": "#/definitions/WebhookTemplate"
                    },
                    "type": "array",
                    "x-nullable": true
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates is verified when webhooks are sent. It's recommended to leave this enabled as not verifying the integrity of SSL certificates leaves you susceptible to Man-in-the-Middle (MITM) attacks.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RepositoryX509EcdsaCertificate": {
            "properties": {
                "active": {
                    "description": "If selected this is the active key for this repository.",
                    "readOnly": true,
                    "title": "Active",
                    "type": "boolean"
                },
                "certificate": {
                    "description": "The issued certificate.",
                    "readOnly": true,
                    "title": "Certificate",
                    "type": "string",
                    "x-nullable": true
                },
                "certificate_chain": {
                    "description": "Base64 encoded CA certificate chain.",
                    "readOnly": true,
                    "title": "Certificate chain",
                    "type": "string",
                    "x-nullable": true
                },
                "certificate_chain_fingerprint": {
                    "readOnly": true,
                    "title": "Certificate chain fingerprint",
                    "type": "string"
                },
                "certificate_chain_fingerprint_short": {
                    "readOnly": true,
                    "title": "Certificate chain fingerprint short",
                    "type": "string"
                },
                "certificate_fingerprint": {
                    "description": "The SHA-256 long identifier used",
                    "readOnly": true,
                    "title": "Certificate fingerprint",
                    "type": "string",
                    "x-nullable": true
                },
                "certificate_fingerprint_short": {
                    "readOnly": true,
                    "title": "Certificate fingerprint short",
                    "type": "string"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "default": {
                    "description": "If selected this is the default key for this repository.",
                    "readOnly": true,
                    "title": "Default",
                    "type": "boolean"
                },
                "issuing_status": {
                    "default": "Certificate is pending to be issued",
                    "enum": [
                        "Certificate is pending to be issued",
                        "Certificate successfully issued",
                        "Error issuing certificate"
                    ],
                    "title": "Issuing status",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RepositoryX509RsaCertificate": {
            "properties": {
                "active": {
                    "description": "If selected this is the active key for this repository.",
                    "readOnly": true,
                    "title": "Active",
                    "type": "boolean"
                },
                "certificate": {
                    "description": "The issued certificate.",
                    "readOnly": true,
                    "title": "Certificate",
                    "type": "string",
                    "x-nullable": true
                },
                "certificate_chain": {
                    "description": "Base64 encoded CA certificate chain.",
                    "readOnly": true,
                    "title": "Certificate chain",
                    "type": "string",
                    "x-nullable": true
                },
                "certificate_chain_fingerprint": {
                    "readOnly": true,
                    "title": "Certificate chain fingerprint",
                    "type": "string"
                },
                "certificate_chain_fingerprint_short": {
                    "readOnly": true,
                    "title": "Certificate chain fingerprint short",
                    "type": "string"
                },
                "certificate_fingerprint": {
                    "description": "The SHA-256 long identifier used",
                    "readOnly": true,
                    "title": "Certificate fingerprint",
                    "type": "string",
                    "x-nullable": true
                },
                "certificate_fingerprint_short": {
                    "readOnly": true,
                    "title": "Certificate fingerprint short",
                    "type": "string"
                },
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "default": {
                    "description": "If selected this is the default key for this repository.",
                    "readOnly": true,
                    "title": "Default",
                    "type": "boolean"
                },
                "issuing_status": {
                    "default": "Certificate is pending to be issued",
                    "enum": [
                        "Certificate is pending to be issued",
                        "Certificate successfully issued",
                        "Error issuing certificate"
                    ],
                    "title": "Issuing status",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "ResourcesRateCheck": {
            "properties": {
                "resources": {
                    "additionalProperties": {
                        "$ref": "#/definitions/RateCheck"
                    },
                    "description": "Rate limit values per resource",
                    "readOnly": true,
                    "title": "Resources",
                    "type": "object"
                }
            },
            "type": "object"
        },
        "RespositoryGeoIpEnableDisable": {
            "properties": {},
            "type": "object"
        },
        "RespositoryGeoIpEnableDisableRequest": {
            "properties": {},
            "type": "object"
        },
        "RpmPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RpmPackageUploadRequest": {
            "properties": {
                "distribution": {
                    "description": "The distribution to store the package for.",
                    "minLength": 1,
                    "title": "Distribution",
                    "type": "string"
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "distribution",
                "package_file"
            ],
            "type": "object"
        },
        "RpmUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "distro_version": {
                    "description": "The distribution version that packages found on this upstream will be associated with.",
                    "title": "Distro version",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "include_sources": {
                    "description": "When checked, source packages will be available from this upstream.",
                    "title": "Source Packages",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verification_status": {
                    "default": "Unknown",
                    "description": "The signature verification status for this upstream.",
                    "enum": [
                        "Unknown",
                        "Invalid",
                        "Valid",
                        "Invalid (No Key)"
                    ],
                    "readOnly": true,
                    "title": "Verification status",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "distro_version",
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "RpmUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "distro_version": {
                    "description": "The distribution version that packages found on this upstream will be associated with.",
                    "title": "Distro version",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "include_sources": {
                    "description": "When checked, source packages will be available from this upstream.",
                    "title": "Source Packages",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "distro_version",
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "RpmUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "distro_version": {
                    "description": "The distribution version that packages found on this upstream will be associated with.",
                    "title": "Distro version",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_inline": {
                    "description": "A public GPG key to associate with packages found on this upstream. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "title": "GPG Key",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_key_url": {
                    "description": "When provided, Cloudsmith will fetch, validate, and associate a public GPG key found at the provided URL. When using the Cloudsmith setup script, this GPG key will be automatically imported on your deployment machines to allow upstream packages to validate and install.",
                    "format": "uri",
                    "maxLength": 254,
                    "title": "GPG Key URL",
                    "type": "string",
                    "x-nullable": true
                },
                "gpg_verification": {
                    "default": "Allow All",
                    "description": "The GPG signature verification mode for this upstream.",
                    "enum": [
                        "Allow All",
                        "Warn on Invalid",
                        "Reject Invalid"
                    ],
                    "title": "Gpg verification",
                    "type": "string"
                },
                "include_sources": {
                    "description": "When checked, source packages will be available from this upstream.",
                    "title": "Source Packages",
                    "type": "boolean"
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "RubyPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "RubyPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "RubyUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "RubyUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "RubyUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Service": {
            "properties": {
                "created_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "created_by": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Created by",
                    "type": "string"
                },
                "created_by_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Created by url",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the service",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "key": {
                    "description": "The API key of the service",
                    "readOnly": true,
                    "title": "Key",
                    "type": "string"
                },
                "key_expires_at": {
                    "description": "The time at which the API key will expire. This will only be populated if the Organization has an active API Key Policy.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Key expires at",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of the service",
                    "maxLength": 120,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "description": "The role of the service.",
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "slug": {
                    "description": "The slug of the service",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "teams": {
                    "items": {
                        "$ref": "#/definitions/ServiceTeams"
                    },
                    "type": "array"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "ServiceRequest": {
            "properties": {
                "description": {
                    "description": "The description of the service",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the service",
                    "maxLength": 120,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "description": "The role of the service.",
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "teams": {
                    "items": {
                        "$ref": "#/definitions/ServiceTeams"
                    },
                    "type": "array"
                }
            },
            "required": [
                "name"
            ],
            "type": "object"
        },
        "ServiceRequestPatch": {
            "properties": {
                "description": {
                    "description": "The description of the service",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "name": {
                    "description": "The name of the service",
                    "maxLength": 120,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "role": {
                    "default": "Member",
                    "description": "The role of the service.",
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "teams": {
                    "items": {
                        "$ref": "#/definitions/ServiceTeams"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "ServiceTeams": {
            "properties": {
                "role": {
                    "default": "Manager",
                    "description": "The team role associated with the service",
                    "enum": [
                        "Manager",
                        "Member"
                    ],
                    "title": "Role",
                    "type": "string"
                },
                "slug": {
                    "description": "The teams associated with the service",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "title": "Slug",
                    "type": "string"
                }
            },
            "required": [
                "slug"
            ],
            "type": "object"
        },
        "StatusBasic": {
            "properties": {
                "detail": {
                    "default": "Cloudsmith API is operational.",
                    "description": "The message describing the state of the API.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Detail",
                    "type": "string"
                },
                "version": {
                    "default": "1.690.7",
                    "description": "The current version for the Cloudsmith service.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Version",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StorageAllocatedLimit": {
            "properties": {
                "configured": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Configured",
                    "type": "string"
                },
                "peak": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Peak",
                    "type": "string"
                },
                "percentage_used": {
                    "maxLength": 10,
                    "minLength": 1,
                    "title": "Percentage used",
                    "type": "string"
                },
                "plan_limit": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Plan limit",
                    "type": "string"
                },
                "used": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Used",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StorageAllocatedLimitRaw": {
            "properties": {
                "configured": {
                    "title": "Configured",
                    "type": "integer"
                },
                "peak": {
                    "title": "Peak",
                    "type": "integer"
                },
                "percentage_used": {
                    "format": "decimal",
                    "title": "Percentage used",
                    "type": "string"
                },
                "plan_limit": {
                    "title": "Plan limit",
                    "type": "integer"
                },
                "used": {
                    "title": "Used",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "StorageRegion": {
            "properties": {
                "label": {
                    "description": "Name of the storage region",
                    "minLength": 1,
                    "title": "Label",
                    "type": "string"
                },
                "slug": {
                    "description": "Slug for the storage region",
                    "minLength": 1,
                    "title": "Slug",
                    "type": "string"
                }
            },
            "required": [
                "label",
                "slug"
            ],
            "type": "object"
        },
        "StorageUsage": {
            "properties": {
                "limit": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Limit",
                    "type": "string"
                },
                "peak": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Peak",
                    "type": "string"
                },
                "percentage": {
                    "maxLength": 10,
                    "minLength": 1,
                    "title": "Percentage",
                    "type": "string"
                },
                "used": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Used",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "StorageUsageRaw": {
            "properties": {
                "limit": {
                    "title": "Limit",
                    "type": "integer"
                },
                "peak": {
                    "title": "Peak",
                    "type": "integer"
                },
                "percentage": {
                    "format": "decimal",
                    "title": "Percentage",
                    "type": "string"
                },
                "used": {
                    "title": "Used",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "SwiftPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "author_name": {
                    "description": "The name of the author of the package.",
                    "minLength": 1,
                    "title": "Author name",
                    "type": "string"
                },
                "author_org": {
                    "description": "The organization of the author.",
                    "minLength": 1,
                    "title": "Author org",
                    "type": "string"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "license_url": {
                    "description": "The license URL of this package.",
                    "format": "uri",
                    "maxLength": 200,
                    "title": "License url",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string"
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "readme_url": {
                    "description": "The URL of the readme for the package.",
                    "format": "uri",
                    "minLength": 1,
                    "title": "Readme url",
                    "type": "string"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "description": "The URL of the SCM repository for the package.",
                    "format": "uri",
                    "minLength": 1,
                    "title": "Repository url",
                    "type": "string"
                },
                "scope": {
                    "description": "A scope provides a namespace for related packages within the package registry.",
                    "maxLength": 39,
                    "minLength": 1,
                    "title": "Scope",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string"
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "scope",
                "version"
            ],
            "type": "object"
        },
        "SwiftPackageUploadRequest": {
            "properties": {
                "author_name": {
                    "description": "The name of the author of the package.",
                    "minLength": 1,
                    "title": "Author name",
                    "type": "string"
                },
                "author_org": {
                    "description": "The organization of the author.",
                    "minLength": 1,
                    "title": "Author org",
                    "type": "string"
                },
                "license_url": {
                    "description": "The license URL of this package.",
                    "format": "uri",
                    "maxLength": 200,
                    "title": "License url",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string"
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "readme_url": {
                    "description": "The URL of the readme for the package.",
                    "format": "uri",
                    "minLength": 1,
                    "title": "Readme url",
                    "type": "string"
                },
                "repository_url": {
                    "description": "The URL of the SCM repository for the package.",
                    "format": "uri",
                    "minLength": 1,
                    "title": "Repository url",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "scope": {
                    "description": "A scope provides a namespace for related packages within the package registry.",
                    "maxLength": 39,
                    "minLength": 1,
                    "title": "Scope",
                    "type": "string"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "package_file",
                "scope",
                "version"
            ],
            "type": "object"
        },
        "SwiftUpstream": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "created_at": {
                    "description": "The datetime the upstream source was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "disable_reason": {
                    "default": "N/A",
                    "enum": [
                        "N/A",
                        "Upstream points to its own repository",
                        "Missing upstream source",
                        "Upstream was disabled by request of user"
                    ],
                    "readOnly": true,
                    "title": "Disable reason",
                    "type": "string"
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "pending_validation": {
                    "description": "When true, this upstream source is pending validation.",
                    "readOnly": true,
                    "title": "Pending validation",
                    "type": "boolean"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "updated_at": {
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Updated at",
                    "type": "string"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "SwiftUpstreamRequest": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "required": [
                "name",
                "upstream_url"
            ],
            "type": "object"
        },
        "SwiftUpstreamRequestPatch": {
            "properties": {
                "auth_mode": {
                    "default": "None",
                    "description": "The authentication mode to use when accessing this upstream. ",
                    "enum": [
                        "None",
                        "Username and Password"
                    ],
                    "title": "Auth mode",
                    "type": "string"
                },
                "auth_secret": {
                    "description": "Secret to provide with requests to upstream.",
                    "maxLength": 4096,
                    "title": "Secret",
                    "type": "string",
                    "x-nullable": true
                },
                "auth_username": {
                    "description": "Username to provide with requests to upstream.",
                    "maxLength": 64,
                    "title": "Username",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_1": {
                    "description": "The key for extra header #1 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_header_2": {
                    "description": "The key for extra header #2 to send to upstream.",
                    "maxLength": 64,
                    "pattern": "^[-\\w]+$",
                    "title": "Header #2",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_1": {
                    "description": "The value for extra header #1 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #1",
                    "type": "string",
                    "x-nullable": true
                },
                "extra_value_2": {
                    "description": "The value for extra header #2 to send to upstream. This is stored as plaintext, and is NOT encrypted.",
                    "maxLength": 128,
                    "pattern": "^[^\\n\\r]+$",
                    "title": "Value #2",
                    "type": "string",
                    "x-nullable": true
                },
                "is_active": {
                    "description": "Whether or not this upstream is active and ready for requests.",
                    "title": "Is active",
                    "type": "boolean"
                },
                "mode": {
                    "default": "Proxy Only",
                    "description": "The mode that this upstream should operate in. Upstream sources can be used to proxy resolved packages, as well as operate in a proxy/cache or cache only mode.",
                    "enum": [
                        "Proxy Only",
                        "Cache and Proxy"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "name": {
                    "description": "A descriptive name for this upstream source. A shortened version of this name will be used for tagging cached packages retrieved from this upstream.",
                    "maxLength": 64,
                    "minLength": 1,
                    "pattern": "^\\w[\\w \\-'\\.\\/()]+$",
                    "title": "Name",
                    "type": "string"
                },
                "priority": {
                    "description": "Upstream sources are selected for resolving requests by sequential order (1..n), followed by creation date.",
                    "maximum": 32767,
                    "minimum": 1,
                    "title": "Priority",
                    "type": "integer"
                },
                "upstream_url": {
                    "description": "The URL for this upstream source. This must be a fully qualified URL including any path elements required to reach the root of the repository. ",
                    "format": "uri",
                    "maxLength": 200,
                    "minLength": 1,
                    "title": "Upstream URL",
                    "type": "string"
                },
                "verify_ssl": {
                    "description": "If enabled, SSL certificates are verified when requests are made to this upstream. It's recommended to leave this enabled for all public sources to help mitigate Man-In-The-Middle (MITM) attacks. Please note this only applies to HTTPS upstreams.",
                    "title": "Verify SSL Certificates",
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "Tags": {
            "description": "All tags on the package, grouped by tag type. This includes immutable tags, but doesn't distinguish them from mutable. To see which tags are immutable specifically, see the tags_immutable field.",
            "properties": {},
            "type": "object"
        },
        "TerraformPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "readOnly": true,
                    "title": "Version",
                    "type": "string",
                    "x-nullable": true
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "TerraformPackageUploadRequest": {
            "properties": {
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "package_file"
            ],
            "type": "object"
        },
        "Usage": {
            "properties": {
                "limit": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Limit",
                    "type": "string"
                },
                "percentage": {
                    "maxLength": 10,
                    "minLength": 1,
                    "title": "Percentage",
                    "type": "string"
                },
                "used": {
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Used",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UsageFieldset": {
            "properties": {
                "display": {
                    "$ref": "#/definitions/UsageLimits"
                },
                "raw": {
                    "$ref": "#/definitions/UsageLimitsRaw"
                }
            },
            "required": [
                "display",
                "raw"
            ],
            "type": "object"
        },
        "UsageLimits": {
            "properties": {
                "bandwidth": {
                    "$ref": "#/definitions/AllocatedLimit"
                },
                "storage": {
                    "$ref": "#/definitions/StorageAllocatedLimit"
                }
            },
            "required": [
                "bandwidth",
                "storage"
            ],
            "type": "object"
        },
        "UsageLimitsRaw": {
            "properties": {
                "bandwidth": {
                    "$ref": "#/definitions/AllocatedLimitRaw"
                },
                "storage": {
                    "$ref": "#/definitions/StorageAllocatedLimitRaw"
                }
            },
            "required": [
                "bandwidth",
                "storage"
            ],
            "type": "object"
        },
        "UsageRaw": {
            "properties": {
                "limit": {
                    "title": "Limit",
                    "type": "integer"
                },
                "percentage": {
                    "format": "decimal",
                    "title": "Percentage",
                    "type": "string"
                },
                "used": {
                    "title": "Used",
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "UserAuthenticationToken": {
            "properties": {
                "created": {
                    "description": "The time at which the API key was created.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created",
                    "type": "string"
                },
                "key": {
                    "description": "The unique API key used for authentication. This will be obfuscated on read-only HTTP methods.",
                    "readOnly": true,
                    "title": "Key",
                    "type": "string"
                },
                "slug_perm": {
                    "description": "The slug_perm for token.",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserAuthToken": {
            "properties": {
                "token": {
                    "description": "API token for the authenticated user",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Token",
                    "type": "string"
                },
                "two_factor_required": {
                    "description": "Flag indicating whether a 2FA code is required to complete authentication",
                    "readOnly": true,
                    "title": "Two factor required",
                    "type": "boolean"
                },
                "two_factor_token": {
                    "description": "Token to use when providing 2FA code",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Two factor token",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserAuthTokenRequest": {
            "properties": {
                "email": {
                    "description": "Email address to authenticate with",
                    "format": "email",
                    "minLength": 1,
                    "title": "Email",
                    "type": "string"
                },
                "password": {
                    "description": "Password to authenticate with",
                    "minLength": 1,
                    "title": "Password",
                    "type": "string"
                },
                "totp_token": {
                    "description": "Two-factor authentication code",
                    "minLength": 1,
                    "title": "Two-factor code",
                    "type": "string"
                }
            },
            "type": "object"
        },
        "UserBrief": {
            "properties": {
                "authenticated": {
                    "description": "If true then you're logged in as a user.",
                    "readOnly": true,
                    "title": "Authenticated",
                    "type": "boolean"
                },
                "email": {
                    "description": "Your email address that we use to contact you. This is only visible to you.",
                    "format": "email",
                    "maxLength": 254,
                    "minLength": 1,
                    "title": "Email address",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The full name of the user (if any).",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Name",
                    "type": "string",
                    "x-nullable": true
                },
                "profile_url": {
                    "description": "The URL for the full profile of the user.",
                    "format": "uri",
                    "readOnly": true,
                    "title": "Profile url",
                    "type": "string",
                    "x-nullable": true
                },
                "self_url": {
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "slug": {
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string",
                    "x-nullable": true
                },
                "slug_perm": {
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "type": "object"
        },
        "UserProfile": {
            "properties": {
                "company": {
                    "maxLength": 64,
                    "title": "Company",
                    "type": "string",
                    "x-nullable": true
                },
                "first_name": {
                    "maxLength": 120,
                    "minLength": 1,
                    "title": "First name",
                    "type": "string"
                },
                "job_title": {
                    "maxLength": 64,
                    "title": "Job title",
                    "type": "string",
                    "x-nullable": true
                },
                "joined_at": {
                    "format": "date-time",
                    "title": "Joined at",
                    "type": "string"
                },
                "last_name": {
                    "maxLength": 120,
                    "minLength": 1,
                    "title": "Last name",
                    "type": "string"
                },
                "name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Name",
                    "type": "string"
                },
                "slug": {
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "tagline": {
                    "description": "Your tagline is a sentence about you. Make it funny. Make it professional. Either way, it's public and it represents who you are.",
                    "maxLength": 1024,
                    "title": "Tagline",
                    "type": "string",
                    "x-nullable": true
                },
                "url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Url",
                    "type": "string"
                }
            },
            "required": [
                "first_name",
                "last_name"
            ],
            "type": "object"
        },
        "VagrantPackageUpload": {
            "properties": {
                "architectures": {
                    "items": {
                        "$ref": "#/definitions/Architecture"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "cdn_url": {
                    "readOnly": true,
                    "title": "Cdn url",
                    "type": "string",
                    "x-nullable": true
                },
                "checksum_md5": {
                    "readOnly": true,
                    "title": "Checksum md5",
                    "type": "string"
                },
                "checksum_sha1": {
                    "readOnly": true,
                    "title": "Checksum sha1",
                    "type": "string"
                },
                "checksum_sha256": {
                    "readOnly": true,
                    "title": "Checksum sha256",
                    "type": "string"
                },
                "checksum_sha512": {
                    "readOnly": true,
                    "title": "Checksum sha512",
                    "type": "string"
                },
                "dependencies_checksum_md5": {
                    "description": "A checksum of all of the package's dependencies.",
                    "readOnly": true,
                    "title": "Dependencies checksum md5",
                    "type": "string",
                    "x-nullable": true
                },
                "dependencies_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Dependencies url",
                    "type": "string"
                },
                "description": {
                    "description": "A textual description of this package.",
                    "readOnly": true,
                    "title": "Description",
                    "type": "string",
                    "x-nullable": true
                },
                "display_name": {
                    "readOnly": true,
                    "title": "Display name",
                    "type": "string"
                },
                "distro": {
                    "$ref": "#/definitions/Distribution"
                },
                "distro_version": {
                    "$ref": "#/definitions/DistributionVersion"
                },
                "downloads": {
                    "readOnly": true,
                    "title": "Downloads",
                    "type": "integer"
                },
                "epoch": {
                    "description": "The epoch of the package version (if any).",
                    "readOnly": true,
                    "title": "Epoch",
                    "type": "integer",
                    "x-nullable": true
                },
                "extension": {
                    "readOnly": true,
                    "title": "Extension",
                    "type": "string"
                },
                "filename": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Filename",
                    "type": "string"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/PackageFile"
                    },
                    "readOnly": true,
                    "type": "array"
                },
                "format": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Format",
                    "type": "string"
                },
                "format_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Format url",
                    "type": "string"
                },
                "freeable_storage": {
                    "description": "Amount of storage that will be freed if this package is deleted",
                    "readOnly": true,
                    "title": "Freeable storage",
                    "type": "integer"
                },
                "fully_qualified_name": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Fully qualified name",
                    "type": "string",
                    "x-nullable": true
                },
                "identifier_perm": {
                    "description": "Unique and permanent identifier for the package.",
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Identifier perm",
                    "type": "string"
                },
                "identifiers": {
                    "additionalProperties": {
                        "type": "string",
                        "x-nullable": true
                    },
                    "description": "Return a map of identifier field names and their values.",
                    "readOnly": true,
                    "title": "Identifiers",
                    "type": "object"
                },
                "indexed": {
                    "readOnly": true,
                    "title": "Indexed",
                    "type": "boolean"
                },
                "is_cancellable": {
                    "readOnly": true,
                    "title": "Is cancellable",
                    "type": "boolean"
                },
                "is_copyable": {
                    "readOnly": true,
                    "title": "Is copyable",
                    "type": "boolean"
                },
                "is_deleteable": {
                    "readOnly": true,
                    "title": "Is deleteable",
                    "type": "boolean"
                },
                "is_downloadable": {
                    "readOnly": true,
                    "title": "Is downloadable",
                    "type": "boolean"
                },
                "is_moveable": {
                    "readOnly": true,
                    "title": "Is moveable",
                    "type": "boolean"
                },
                "is_quarantinable": {
                    "readOnly": true,
                    "title": "Is quarantinable",
                    "type": "boolean"
                },
                "is_quarantined": {
                    "readOnly": true,
                    "title": "Is quarantined",
                    "type": "boolean"
                },
                "is_resyncable": {
                    "readOnly": true,
                    "title": "Is resyncable",
                    "type": "boolean"
                },
                "is_security_scannable": {
                    "readOnly": true,
                    "title": "Is security scannable",
                    "type": "boolean"
                },
                "is_sync_awaiting": {
                    "readOnly": true,
                    "title": "Is sync awaiting",
                    "type": "boolean"
                },
                "is_sync_completed": {
                    "readOnly": true,
                    "title": "Is sync completed",
                    "type": "boolean"
                },
                "is_sync_failed": {
                    "readOnly": true,
                    "title": "Is sync failed",
                    "type": "boolean"
                },
                "is_sync_in_flight": {
                    "readOnly": true,
                    "title": "Is sync in flight",
                    "type": "boolean"
                },
                "is_sync_in_progress": {
                    "readOnly": true,
                    "title": "Is sync in progress",
                    "type": "boolean"
                },
                "license": {
                    "description": "The license of this package.",
                    "readOnly": true,
                    "title": "License",
                    "type": "string",
                    "x-nullable": true
                },
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string"
                },
                "namespace": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Namespace",
                    "type": "string"
                },
                "namespace_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Namespace url",
                    "type": "string"
                },
                "num_files": {
                    "readOnly": true,
                    "title": "Num files",
                    "type": "integer"
                },
                "origin_repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Origin repository",
                    "type": "string"
                },
                "origin_repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Origin repository url",
                    "type": "string"
                },
                "package_type": {
                    "description": "The type of package contents.",
                    "enum": [
                        1,
                        2,
                        3,
                        9
                    ],
                    "readOnly": true,
                    "title": "Package type",
                    "type": "integer"
                },
                "policy_violated": {
                    "description": "Whether or not the package has violated any policy.",
                    "readOnly": true,
                    "title": "Policy violated",
                    "type": "boolean"
                },
                "provider": {
                    "description": "The virtual machine provider for the box.",
                    "minLength": 1,
                    "title": "Provider",
                    "type": "string"
                },
                "release": {
                    "description": "The release of the package version (if any).",
                    "readOnly": true,
                    "title": "Release",
                    "type": "string",
                    "x-nullable": true
                },
                "repository": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Repository",
                    "type": "string"
                },
                "repository_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Repository url",
                    "type": "string"
                },
                "security_scan_completed_at": {
                    "description": "The datetime the security scanning was completed.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan completed at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_started_at": {
                    "description": "The datetime the security scanning was started.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan started at",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status": {
                    "default": "Awaiting Security Scan",
                    "enum": [
                        "Awaiting Security Scan",
                        "Security Scanning in Progress",
                        "Scan Detected Vulnerabilities",
                        "Scan Detected No Vulnerabilities",
                        "Security Scanning Disabled",
                        "Security Scanning Failed",
                        "Security Scanning Skipped",
                        "Security Scanning Not Supported"
                    ],
                    "readOnly": true,
                    "title": "Security scan status",
                    "type": "string",
                    "x-nullable": true
                },
                "security_scan_status_updated_at": {
                    "description": "The datetime the security scanning status was updated.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Security scan status updated at",
                    "type": "string",
                    "x-nullable": true
                },
                "self_html_url": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Self html url",
                    "type": "string"
                },
                "self_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Self url",
                    "type": "string"
                },
                "signature_url": {
                    "readOnly": true,
                    "title": "Signature url",
                    "type": "string",
                    "x-nullable": true
                },
                "size": {
                    "description": "The calculated size of the package.",
                    "readOnly": true,
                    "title": "Size",
                    "type": "integer"
                },
                "slug": {
                    "description": "The public unique identifier for the package.",
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug",
                    "type": "string"
                },
                "slug_perm": {
                    "format": "slug",
                    "minLength": 1,
                    "pattern": "^[-a-zA-Z0-9_]+$",
                    "readOnly": true,
                    "title": "Slug perm",
                    "type": "string"
                },
                "stage": {
                    "description": "The synchronisation (in progress) stage of the package.",
                    "enum": [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12
                    ],
                    "readOnly": true,
                    "title": "Stage",
                    "type": "integer"
                },
                "stage_str": {
                    "readOnly": true,
                    "title": "Stage str",
                    "type": "string"
                },
                "stage_updated_at": {
                    "description": "The datetime the package stage was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Stage updated at",
                    "type": "string"
                },
                "status": {
                    "description": "The synchronisation status of the package.",
                    "enum": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7
                    ],
                    "readOnly": true,
                    "title": "Status",
                    "type": "integer"
                },
                "status_reason": {
                    "description": "A textual description for the synchronous status reason (if any",
                    "readOnly": true,
                    "title": "Status reason",
                    "type": "string",
                    "x-nullable": true
                },
                "status_str": {
                    "readOnly": true,
                    "title": "Status str",
                    "type": "string"
                },
                "status_updated_at": {
                    "description": "The datetime the package status was updated at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Status updated at",
                    "type": "string"
                },
                "status_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Status url",
                    "type": "string"
                },
                "subtype": {
                    "readOnly": true,
                    "title": "Subtype",
                    "type": "string"
                },
                "summary": {
                    "description": "A one-liner synopsis of this package.",
                    "readOnly": true,
                    "title": "Summary",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_finished_at": {
                    "description": "The datetime the package sync was finished at.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Sync finished at",
                    "type": "string",
                    "x-nullable": true
                },
                "sync_progress": {
                    "description": "Synchronisation progress (from 0-100)",
                    "readOnly": true,
                    "title": "Sync progress",
                    "type": "integer"
                },
                "tags_immutable": {
                    "$ref": "#/definitions/Tags"
                },
                "type_display": {
                    "readOnly": true,
                    "title": "Type display",
                    "type": "string"
                },
                "uploaded_at": {
                    "description": "The date this package was uploaded.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Uploaded at",
                    "type": "string"
                },
                "uploader": {
                    "minLength": 1,
                    "readOnly": true,
                    "title": "Uploader",
                    "type": "string"
                },
                "uploader_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Uploader url",
                    "type": "string"
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string"
                },
                "version_orig": {
                    "readOnly": true,
                    "title": "Version orig",
                    "type": "string"
                },
                "vulnerability_scan_results_url": {
                    "format": "uri",
                    "readOnly": true,
                    "title": "Vulnerability scan results url",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "provider",
                "version"
            ],
            "type": "object"
        },
        "VagrantPackageUploadRequest": {
            "properties": {
                "name": {
                    "description": "The name of this package.",
                    "maxLength": 200,
                    "title": "Name",
                    "type": "string"
                },
                "package_file": {
                    "description": "The primary file for the package.",
                    "minLength": 1,
                    "title": "Package file",
                    "type": "string"
                },
                "provider": {
                    "description": "The virtual machine provider for the box.",
                    "minLength": 1,
                    "title": "Provider",
                    "type": "string"
                },
                "republish": {
                    "description": "If true, the uploaded package will overwrite any others with the same attributes (e.g. same version); otherwise, it will be flagged as a duplicate.",
                    "title": "Republish",
                    "type": "boolean"
                },
                "tags": {
                    "description": "A comma-separated values list of tags to add to the package.",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Tags",
                    "type": "string",
                    "x-nullable": true
                },
                "version": {
                    "description": "The raw version for this package.",
                    "maxLength": 128,
                    "title": "Version",
                    "type": "string"
                }
            },
            "required": [
                "name",
                "package_file",
                "provider",
                "version"
            ],
            "type": "object"
        },
        "Vulnerability": {
            "properties": {
                "affected_version": {
                    "$ref": "#/definitions/VulnerabilityScanVersion"
                },
                "description": {
                    "maxLength": 1028,
                    "minLength": 1,
                    "title": "Description",
                    "type": "string"
                },
                "fixed_version": {
                    "$ref": "#/definitions/VulnerabilityScanVersion"
                },
                "package_name": {
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Package name",
                    "type": "string"
                },
                "references": {
                    "items": {
                        "maxLength": 2048,
                        "minLength": 1,
                        "type": "string"
                    },
                    "type": "array"
                },
                "severity": {
                    "default": "Unknown",
                    "enum": [
                        "Unknown",
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Severity",
                    "type": "string"
                },
                "severity_source": {
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Severity source",
                    "type": "string"
                },
                "title": {
                    "maxLength": 512,
                    "minLength": 1,
                    "title": "Title",
                    "type": "string"
                },
                "vulnerability_id": {
                    "maxLength": 13,
                    "minLength": 1,
                    "title": "Vulnerability id",
                    "type": "string"
                }
            },
            "required": [
                "affected_version",
                "description",
                "fixed_version",
                "package_name",
                "references",
                "severity_source",
                "title",
                "vulnerability_id"
            ],
            "type": "object"
        },
        "VulnerabilityScan": {
            "properties": {
                "results": {
                    "items": {
                        "$ref": "#/definitions/Vulnerability"
                    },
                    "type": "array"
                },
                "target": {
                    "minLength": 1,
                    "title": "Target",
                    "type": "string"
                },
                "type": {
                    "minLength": 1,
                    "title": "Type",
                    "type": "string"
                }
            },
            "required": [
                "results",
                "target",
                "type"
            ],
            "type": "object"
        },
        "VulnerabilityScanResults": {
            "properties": {
                "created_at": {
                    "description": "The time this scan result was stored.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "has_vulnerabilities": {
                    "description": "Do the results contain any known vulnerabilities?",
                    "readOnly": true,
                    "title": "Has vulnerabilities",
                    "type": "boolean"
                },
                "identifier": {
                    "minLength": 1,
                    "title": "Identifier",
                    "type": "string"
                },
                "max_severity": {
                    "default": "Unknown",
                    "enum": [
                        "Unknown",
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Max severity",
                    "type": "string"
                },
                "num_vulnerabilities": {
                    "default": 0,
                    "title": "Num vulnerabilities",
                    "type": "integer"
                },
                "package": {
                    "$ref": "#/definitions/PackageVulnerability"
                },
                "scan_id": {
                    "description": "Deprecated (23-05-15): Please use 'identifier' instead. Previously: A monotonically increasing number that identified a scan within a repository.",
                    "title": "Scan id",
                    "type": "integer",
                    "x-nullable": true
                },
                "scans": {
                    "items": {
                        "$ref": "#/definitions/VulnerabilityScan"
                    },
                    "type": "array"
                }
            },
            "required": [
                "identifier",
                "package",
                "scan_id",
                "scans"
            ],
            "type": "object"
        },
        "VulnerabilityScanResultsList": {
            "properties": {
                "created_at": {
                    "description": "The time this scan result was stored.",
                    "format": "date-time",
                    "readOnly": true,
                    "title": "Created at",
                    "type": "string"
                },
                "has_vulnerabilities": {
                    "description": "Do the results contain any known vulnerabilities?",
                    "readOnly": true,
                    "title": "Has vulnerabilities",
                    "type": "boolean"
                },
                "identifier": {
                    "minLength": 1,
                    "title": "Identifier",
                    "type": "string"
                },
                "max_severity": {
                    "default": "Unknown",
                    "enum": [
                        "Unknown",
                        "Low",
                        "Medium",
                        "High",
                        "Critical"
                    ],
                    "title": "Max severity",
                    "type": "string"
                },
                "num_vulnerabilities": {
                    "default": 0,
                    "title": "Num vulnerabilities",
                    "type": "integer"
                },
                "package": {
                    "$ref": "#/definitions/PackageVulnerability"
                },
                "scan_id": {
                    "description": "Deprecated (23-05-15): Please use 'identifier' instead. Previously: A monotonically increasing number that identified a scan within a repository.",
                    "title": "Scan id",
                    "type": "integer",
                    "x-nullable": true
                }
            },
            "required": [
                "identifier",
                "package",
                "scan_id"
            ],
            "type": "object"
        },
        "VulnerabilityScanVersion": {
            "properties": {
                "major": {
                    "title": "Major",
                    "type": "integer"
                },
                "minor": {
                    "title": "Minor",
                    "type": "integer"
                },
                "operator": {
                    "default": "",
                    "maxLength": 32,
                    "minLength": 1,
                    "title": "Operator",
                    "type": "string"
                },
                "patch": {
                    "title": "Patch",
                    "type": "integer"
                },
                "raw_version": {
                    "default": "",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Raw version",
                    "type": "string"
                },
                "version": {
                    "default": "",
                    "maxLength": 1024,
                    "minLength": 1,
                    "title": "Version",
                    "type": "string"
                }
            },
            "required": [
                "major",
                "minor",
                "patch"
            ],
            "type": "object"
        },
        "WebhookTemplate": {
            "properties": {
                "event": {
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Event",
                    "type": "string"
                },
                "template": {
                    "maxLength": 4096,
                    "title": "Template",
                    "type": "string",
                    "x-nullable": true
                }
            },
            "required": [
                "event"
            ],
            "type": "object",
            "x-nullable": true
        }
    },
    "host": "api.cloudsmith.io",
    "info": {
        "contact": {
            "email": "support@cloudsmith.io",
            "name": "Cloudsmith Support",
            "url": "https://help.cloudsmith.io"
        },
        "description": "The API to the Cloudsmith Service",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "termsOfService": "https://help.cloudsmith.io",
        "title": "Cloudsmith API (v1)",
        "version": "v1"
    },
    "paths": {
        "/audit-log/{owner}/": {
            "get": {
                "description": "Lists audit log entries for a specific namespace.",
                "operationId": "audit_log_namespace_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "A search term for querying events, actors, or timestamps of log records.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of audit log entries",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/NamespaceAuditLog"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Audit logs are not active; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Lists audit log entries for a specific namespace.",
                "tags": [
                    "audit-log"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/audit-log/{owner}/{repo}/": {
            "get": {
                "description": "Lists audit log entries for a specific repository.",
                "operationId": "audit_log_repo_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "A search term for querying events, actors, or timestamps of log records.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of audit log entries",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RepositoryAuditLog"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Audit logs are not active; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Lists audit log entries for a specific repository.",
                "tags": [
                    "audit-log"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/badges/version/{owner}/{repo}/{package_format}/{package_name}/{package_version}/{package_identifiers}/": {
            "get": {
                "description": "Get latest package version for a package or package group.",
                "operationId": "badges_version_list",
                "parameters": [
                    {
                        "default": "",
                        "description": "Badge token to authenticate for private packages",
                        "in": "query",
                        "name": "badge_token",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "300",
                        "description": "Override the shields.io badge cacheSeconds value.",
                        "in": "query",
                        "name": "cacheSeconds",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "12577E",
                        "description": "Override the shields.io badge color value.",
                        "in": "query",
                        "name": "color",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "cloudsmith",
                        "description": "Override the shields.io badge label value.",
                        "in": "query",
                        "name": "label",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "021F2F",
                        "description": "Override the shields.io badge labelColor value.",
                        "in": "query",
                        "name": "labelColor",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "45B6EE",
                        "description": "Override the shields.io badge logoColor value.",
                        "in": "query",
                        "name": "logoColor",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "10",
                        "description": "Override the shields.io badge logoWidth value.",
                        "in": "query",
                        "name": "logoWidth",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": false,
                        "description": "If true, badge will be rendered",
                        "in": "query",
                        "name": "render",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": false,
                        "description": "If true, a shields response will be generated",
                        "in": "query",
                        "name": "shields",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": false,
                        "description": "If true, for latest version badges a '(latest)' suffix is added",
                        "in": "query",
                        "name": "show_latest",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "flat-square",
                        "description": "Override the shields.io badge style value.",
                        "in": "query",
                        "name": "style",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageVersionBadge"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get latest package version for a package or package group.",
                "tags": [
                    "badges"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "package_format",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "package_name",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "package_version",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "package_identifiers",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/distros/": {
            "get": {
                "description": "Get a list of all supported distributions.",
                "operationId": "distros_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Available package formats retrieved",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/DistributionFull"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all supported distributions.",
                "tags": [
                    "distros"
                ]
            },
            "parameters": []
        },
        "/distros/{slug}/": {
            "get": {
                "description": "View for viewing/listing distributions.",
                "operationId": "distros_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DistributionFull"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "View for viewing/listing distributions.",
                "tags": [
                    "distros"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/entitlements/{owner}/{repo}/": {
            "get": {
                "description": "Get a list of all entitlements in a repository.",
                "operationId": "entitlements_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "default": false,
                        "description": "Show entitlement token strings in results",
                        "in": "query",
                        "name": "show_tokens",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "A search term for querying names of entitlements.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": false,
                        "description": "If true, only include active tokens",
                        "in": "query",
                        "name": "active",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "name",
                        "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of entitlement tokens",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RepositoryToken"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all entitlements in a repository.",
                "tags": [
                    "entitlements"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a specific entitlement in a repository.",
                "operationId": "entitlements_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryTokenRequest"
                        }
                    },
                    {
                        "default": false,
                        "description": "Show entitlement token strings in results",
                        "in": "query",
                        "name": "show_tokens",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created the specified entitlement",
                        "schema": {
                            "$ref": "#/definitions/RepositoryToken"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a specific entitlement in a repository.",
                "tags": [
                    "entitlements"
                ]
            }
        },
        "/entitlements/{owner}/{repo}/{identifier}/": {
            "delete": {
                "description": "Delete a specific entitlement in a repository.",
                "operationId": "entitlements_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Soft-deleted the specified entitlement token successfully."
                    },
                    "400": {
                        "description": "The entitlement cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a specific entitlement in a repository.",
                "tags": [
                    "entitlements"
                ]
            },
            "get": {
                "description": "Get a specific entitlement in a repository.",
                "operationId": "entitlements_read",
                "parameters": [
                    {
                        "default": false,
                        "description": "If true, entitlement identifiers including name will be fuzzy matched.",
                        "in": "query",
                        "name": "fuzzy",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": false,
                        "description": "Show entitlement token strings in results",
                        "in": "query",
                        "name": "show_tokens",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the specified entitlement",
                        "schema": {
                            "$ref": "#/definitions/RepositoryToken"
                        }
                    },
                    "400": {
                        "description": "Couldn't retrieve the specified token because the request contains an error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a specific entitlement in a repository.",
                "tags": [
                    "entitlements"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a specific entitlement in a repository.",
                "operationId": "entitlements_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryTokenRequestPatch"
                        }
                    },
                    {
                        "default": false,
                        "description": "Show entitlement token strings in results",
                        "in": "query",
                        "name": "show_tokens",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the specified entitlement",
                        "schema": {
                            "$ref": "#/definitions/RepositoryToken"
                        }
                    },
                    "400": {
                        "description": "The entitlement cannot be edited.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a specific entitlement in a repository.",
                "tags": [
                    "entitlements"
                ]
            }
        },
        "/entitlements/{owner}/{repo}/{identifier}/disable/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Disable an entitlement token in a repository.",
                "operationId": "entitlements_disable",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The entitlement token has been disabled."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Disable an entitlement token in a repository.",
                "tags": [
                    "entitlements"
                ]
            }
        },
        "/entitlements/{owner}/{repo}/{identifier}/enable/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Enable an entitlement token in a repository.",
                "operationId": "entitlements_enable",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "The entitlement token has been enabled."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Enable an entitlement token in a repository.",
                "tags": [
                    "entitlements"
                ]
            }
        },
        "/entitlements/{owner}/{repo}/{identifier}/refresh/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Refresh an entitlement token in a repository.",
                "operationId": "entitlements_refresh",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryTokenRefreshRequest"
                        }
                    },
                    {
                        "default": false,
                        "description": "Show entitlement token strings in results",
                        "in": "query",
                        "name": "show_tokens",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The entitlement token has been refreshed.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryTokenRefresh"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Refresh an entitlement token in a repository.",
                "tags": [
                    "entitlements"
                ]
            }
        },
        "/entitlements/{owner}/{repo}/{identifier}/reset/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Reset the statistics for an entitlement token in a repository.",
                "operationId": "entitlements_reset",
                "parameters": [
                    {
                        "default": false,
                        "description": "Show entitlement token strings in results",
                        "in": "query",
                        "name": "show_tokens",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The entitlement token statistics have been reset."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Reset the statistics for an entitlement token in a repository.",
                "tags": [
                    "entitlements"
                ]
            }
        },
        "/entitlements/{owner}/{repo}/sync/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Synchronise tokens from a source repository.",
                "operationId": "entitlements_sync",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryTokenSyncRequest"
                        }
                    },
                    {
                        "default": false,
                        "description": "Show entitlement token strings in results",
                        "in": "query",
                        "name": "show_tokens",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The tokens have been synchronised from the source repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryTokenSync"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Synchronise tokens from a source repository.",
                "tags": [
                    "entitlements"
                ]
            }
        },
        "/files/{owner}/{repo}/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Request URL(s) to upload new package file upload(s) to.",
                "operationId": "files_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageFileUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The upload request was accepted",
                        "schema": {
                            "$ref": "#/definitions/PackageFileUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Request URL(s) to upload new package file upload(s) to.",
                "tags": [
                    "files"
                ]
            }
        },
        "/files/{owner}/{repo}/{identifier}/abort/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Abort a multipart file upload.",
                "operationId": "files_abort",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageFileUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The multipart upload was aborted successfully."
                    },
                    "400": {
                        "description": "The multipart upload could not be aborted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner), repository or upload file not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Abort a multipart file upload.",
                "tags": [
                    "files"
                ]
            }
        },
        "/files/{owner}/{repo}/{identifier}/complete/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Complete a multipart file upload.",
                "operationId": "files_complete",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageFileUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The multipart upload was completed successfully.",
                        "schema": {
                            "$ref": "#/definitions/PackageFileUpload"
                        }
                    },
                    "400": {
                        "description": "The multipart upload could not be completed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner), repository or upload file not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Complete a multipart file upload.",
                "tags": [
                    "files"
                ]
            }
        },
        "/files/{owner}/{repo}/{identifier}/info/": {
            "get": {
                "description": "Get upload information to perform a multipart file upload.",
                "operationId": "files_info",
                "parameters": [
                    {
                        "description": "The filename of the file being uploaded",
                        "in": "query",
                        "name": "filename",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The part number to be uploaded next",
                        "in": "query",
                        "name": "part_number",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information for multipart uploaded retrieved successfully.",
                        "schema": {
                            "$ref": "#/definitions/PackageFilePartsUpload"
                        }
                    },
                    "400": {
                        "description": "The provided upload file was not a multipart upload.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner), repository or upload file not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get upload information to perform a multipart file upload.",
                "tags": [
                    "files"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/files/{owner}/{repo}/validate/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters used for create.",
                "operationId": "files_validate",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageFileUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters used for create.",
                "tags": [
                    "files"
                ]
            }
        },
        "/formats/": {
            "get": {
                "description": "Get a list of all supported package formats.",
                "operationId": "formats_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Available package formats retrieved",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Format"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all supported package formats.",
                "tags": [
                    "formats"
                ]
            },
            "parameters": []
        },
        "/formats/{slug}/": {
            "get": {
                "description": "Get a specific supported package format.",
                "operationId": "formats_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Format"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a specific supported package format.",
                "tags": [
                    "formats"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/metrics/entitlements/{owner}/": {
            "get": {
                "description": "View for listing entitlement token metrics, across an account.",
                "operationId": "metrics_entitlements_account_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Include metrics upto and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
                        "in": "query",
                        "name": "finish",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Include metrics from and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
                        "in": "query",
                        "name": "start",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "A comma seperated list of tokens (slug perm) to include in the results.",
                        "in": "query",
                        "name": "tokens",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the metrics for entitlements.",
                        "schema": {
                            "$ref": "#/definitions/EntitlementUsageMetrics"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "View for listing entitlement token metrics, across an account.",
                "tags": [
                    "metrics"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/metrics/entitlements/{owner}/{repo}/": {
            "get": {
                "description": "View for listing entitlement token metrics, for a repository.",
                "operationId": "metrics_entitlements_repo_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Include metrics upto and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
                        "in": "query",
                        "name": "finish",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Include metrics from and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
                        "in": "query",
                        "name": "start",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "A comma seperated list of tokens (slug perm) to include in the results.",
                        "in": "query",
                        "name": "tokens",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the metrics for entitlements.",
                        "schema": {
                            "$ref": "#/definitions/EntitlementUsageMetrics"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "View for listing entitlement token metrics, for a repository.",
                "tags": [
                    "metrics"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/metrics/packages/{owner}/{repo}/": {
            "get": {
                "description": "View for listing package usage metrics, for a repository.",
                "operationId": "metrics_packages_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Include metrics upto and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
                        "in": "query",
                        "name": "finish",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "A comma seperated list of packages (slug perm) to include in the results.",
                        "in": "query",
                        "name": "packages",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Include metrics from and including this UTC date or UTC datetime. For example '2020-12-31' or '2021-12-13T00:00:00Z'.",
                        "in": "query",
                        "name": "start",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the metrics for packages.",
                        "schema": {
                            "$ref": "#/definitions/PackageUsageMetrics"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "View for listing package usage metrics, for a repository.",
                "tags": [
                    "metrics"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/namespaces/": {
            "get": {
                "description": "Get a list of all namespaces the user belongs to.",
                "operationId": "namespaces_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Namespace"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all namespaces the user belongs to.",
                "tags": [
                    "namespaces"
                ]
            },
            "parameters": []
        },
        "/namespaces/{slug}/": {
            "get": {
                "description": "Get a specific namespace that the user belongs to.",
                "operationId": "namespaces_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Namespace"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a specific namespace that the user belongs to.",
                "tags": [
                    "namespaces"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/": {
            "get": {
                "description": "Get a list of all the organizations you are associated with.",
                "operationId": "orgs_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Organization"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all the organizations you are associated with.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": []
        },
        "/orgs/{org}/": {
            "delete": {
                "description": "Delete the specified organization.",
                "operationId": "orgs_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete the specified organization.",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Get the details for the specific organization.",
                "operationId": "orgs_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the details for the specific organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/deny-policy/": {
            "get": {
                "description": "Get a list of all package deny policies.",
                "operationId": "orgs_deny-policy_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PackageDenyPolicy"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all package deny policies.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a package deny policy.",
                "operationId": "orgs_deny-policy_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageDenyPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PackageDenyPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a package deny policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/deny-policy/{slug_perm}/": {
            "delete": {
                "description": "Delete a package deny policy.",
                "operationId": "orgs_deny-policy_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a package deny policy.",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Get a package deny policy.",
                "operationId": "orgs_deny-policy_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageDenyPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a package deny policy.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a package deny policy.",
                "operationId": "orgs_deny-policy_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageDenyPolicyRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageDenyPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a package deny policy.",
                "tags": [
                    "orgs"
                ]
            },
            "put": {
                "description": "Update a package deny policy.",
                "operationId": "orgs_deny-policy_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageDenyPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageDenyPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a package deny policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/invites/": {
            "get": {
                "description": "Get a list of all invites for an organization.",
                "operationId": "orgs_invites_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of organization invites",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/OrganizationInvite"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization invites not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all invites for an organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create an organization invite for a specific user",
                "operationId": "orgs_invites_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationInviteRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Invite sent",
                        "schema": {
                            "$ref": "#/definitions/OrganizationInvite"
                        }
                    },
                    "400": {
                        "description": "The invite cannot be created.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create an organization invite for a specific user",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/invites/{slug_perm}/": {
            "delete": {
                "description": "Delete a specific organization invite",
                "operationId": "orgs_invites_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Deleted the organization invite successfully."
                    },
                    "400": {
                        "description": "The organization invite cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a specific organization invite",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a specific organization invite.",
                "operationId": "orgs_invites_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationInviteUpdateRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invite updated",
                        "schema": {
                            "$ref": "#/definitions/OrganizationInvite"
                        }
                    },
                    "400": {
                        "description": "The invite cannot be updated.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Invite not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a specific organization invite.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/invites/{slug_perm}/extend/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Extend an organization invite.",
                "operationId": "orgs_invites_extend",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The invite has been extended",
                        "schema": {
                            "$ref": "#/definitions/OrganizationInviteExtend"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Invite not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Extend an organization invite.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/invites/{slug_perm}/resend/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Resend an organization invite.",
                "operationId": "orgs_invites_resend",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The invite has been resent",
                        "schema": {
                            "$ref": "#/definitions/OrganizationInviteExtend"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Invite not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Resend an organization invite.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/license-policy-violation/": {
            "get": {
                "description": "List all current license policy violations for this Organization.",
                "operationId": "orgs_license-policy-violation_list",
                "parameters": [
                    {
                        "description": "The pagination cursor value.",
                        "in": "query",
                        "name": "cursor",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "next": {
                                    "format": "uri",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "format": "uri",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "results": {
                                    "items": {
                                        "$ref": "#/definitions/PackageLicensePolicyViolationLog"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "results"
                            ],
                            "title": "PackageLicensePolicyViolationLogCursorPage",
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List all current license policy violations for this Organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/license-policy/": {
            "get": {
                "description": "Get a list of all package license policies.",
                "operationId": "orgs_license-policy_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/OrganizationPackageLicensePolicy"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all package license policies.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a package license policy.",
                "operationId": "orgs_license-policy_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageLicensePolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageLicensePolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a package license policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/license-policy/{policy_slug_perm}/evaluation/": {
            "get": {
                "description": "List evaluation requests for this policy.",
                "operationId": "orgs_license-policy_evaluation_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PackageLicensePolicyEvaluationRequest"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List evaluation requests for this policy.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "policy_slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create an evaluation request for this policy.",
                "operationId": "orgs_license-policy_evaluation_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageLicensePolicyEvaluationRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PackageLicensePolicyEvaluationRequest"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create an evaluation request for this policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/license-policy/{policy_slug_perm}/evaluation/{slug_perm}/": {
            "get": {
                "description": "Retrieve an evaluation request for this policy.",
                "operationId": "orgs_license-policy_evaluation_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageLicensePolicyEvaluationRequest"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve an evaluation request for this policy.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "policy_slug_perm",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/license-policy/{slug_perm}/": {
            "delete": {
                "description": "Delete a package license policy.",
                "operationId": "orgs_license-policy_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a package license policy.",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Get a package license policy.",
                "operationId": "orgs_license-policy_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageLicensePolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a package license policy.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a package license policy.",
                "operationId": "orgs_license-policy_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageLicensePolicyRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageLicensePolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a package license policy.",
                "tags": [
                    "orgs"
                ]
            },
            "put": {
                "description": "Update a package license policy.",
                "operationId": "orgs_license-policy_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageLicensePolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageLicensePolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a package license policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/members/": {
            "get": {
                "description": "Get the details for all organization members.",
                "operationId": "orgs_members_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "default": false,
                        "description": "Filter for active/inactive users.",
                        "in": "query",
                        "name": "is_active",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "",
                        "description": "A search term for querying of members within an Organization.Available options are: email, org, user, userslug, inactive, user_name, role",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "user_name",
                        "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-user_name`). Available options: user_name, role.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of organization's members",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/OrganizationMembership"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the details for all organization members.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/members/{member}/": {
            "delete": {
                "description": "Removes a member from the organization.",
                "operationId": "orgs_members_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Removed the organization member successfully."
                    },
                    "400": {
                        "description": "The organization member cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Removes a member from the organization.",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Get the details for a specific organization member.",
                "operationId": "orgs_members_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationMembership"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the details for a specific organization member.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "member",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Views for working with organization members.",
                "operationId": "orgs_members_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationMembershipRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationMembership"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Views for working with organization members.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/members/{member}/refresh/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "member",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Refresh a member of the organization's API key.",
                "operationId": "orgs_members_refresh",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Org member API key has been refreshed."
                    },
                    "400": {
                        "description": "The org member's API key cannot be refreshed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org member not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Refresh a member of the organization's API key.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/members/{member}/remove/": {
            "get": {
                "description": "Removes a member from the organization (deprecated, use DELETE instead).",
                "operationId": "orgs_members_remove",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Removed the organization member successfully."
                    },
                    "400": {
                        "description": "The organization member cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Removes a member from the organization (deprecated, use DELETE instead).",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "member",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/members/{member}/update-role/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "member",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a member's role in the organization.",
                "operationId": "orgs_members_update_role",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationMembershipRoleUpdateRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationMembershipRoleUpdate"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a member's role in the organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/members/{member}/update-visibility/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "member",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a member's visibility in the organization.",
                "operationId": "orgs_members_update_visibility",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationMembershipVisibilityUpdateRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationMembershipVisibilityUpdate"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a member's visibility in the organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/openid-connect/": {
            "get": {
                "description": "Retrieve the list of OpenID Connect provider settings for the org.",
                "operationId": "orgs_openid-connect_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "default": "",
                        "description": "A search term for querying of OpenID Connect (OIDC) provider settings.Available options are: name, provider_url, service_account",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "name",
                        "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of OpenID Connect provider settings for the org",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ProviderSettings"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the list of OpenID Connect provider settings for the org.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create the OpenID Connect provider settings for the org.",
                "operationId": "orgs_openid-connect_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ProviderSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created the OpenID Connect provider settings for the org",
                        "schema": {
                            "$ref": "#/definitions/ProviderSettings"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create the OpenID Connect provider settings for the org.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/openid-connect/{slug_perm}/": {
            "delete": {
                "description": "Delete a specific OpenID Connect provider setting for the org.",
                "operationId": "orgs_openid-connect_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Deleted the specified OpenID Connect provider setting successfully."
                    },
                    "400": {
                        "description": "The specified OpenID Connect provider setting cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a specific OpenID Connect provider setting for the org.",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Retrieve a specific OpenID Connect provider setting for the org.",
                "operationId": "orgs_openid-connect_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ProviderSettings"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a specific OpenID Connect provider setting for the org.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a specific OpenID Connect provider setting for the org.",
                "operationId": "orgs_openid-connect_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ProviderSettingsRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the specified OpenID Connect provider setting for the org",
                        "schema": {
                            "$ref": "#/definitions/ProviderSettings"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a specific OpenID Connect provider setting for the org.",
                "tags": [
                    "orgs"
                ]
            },
            "put": {
                "description": "Update a specific OpenID Connect provider setting for the org.",
                "operationId": "orgs_openid-connect_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ProviderSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the specified OpenID Connect provider setting for the org",
                        "schema": {
                            "$ref": "#/definitions/ProviderSettings"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a specific OpenID Connect provider setting for the org.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/saml-authentication": {
            "get": {
                "description": "Retrieve the SAML Authentication settings for this Organization.",
                "operationId": "orgs_saml-authentication_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the SAML Authentication settings.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationSAMLAuth"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "SAML Authentication is not available; please upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the SAML Authentication settings for this Organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update the SAML Authentication settings for this Organization.",
                "operationId": "orgs_saml-authentication_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationSAMLAuthRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the SAML Authentication settings.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationSAMLAuth"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "SAML Authentication is not available; please upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update the SAML Authentication settings for this Organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/saml-group-sync/": {
            "get": {
                "description": "Get the details of all SAML Group Sync mapping within an organization.",
                "operationId": "orgs_saml-group-sync_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of all SAML Group Sync mappings for this org",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/OrganizationGroupSync"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the details of all SAML Group Sync mapping within an organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new SAML Group Sync mapping within an organization.",
                "operationId": "orgs_saml-group-sync_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationGroupSyncRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The SAML Group Sync mapping was created.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationGroupSync"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new SAML Group Sync mapping within an organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/saml-group-sync/{slug_perm}/": {
            "delete": {
                "description": "Delete a SAML Group Sync mapping from an organization.",
                "operationId": "orgs_saml-group-sync_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Mapping removed successfully"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a SAML Group Sync mapping from an organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/saml-group-sync/disable/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Disable SAML Group Sync for this organization.",
                "operationId": "orgs_saml-group-sync_disable",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "SAML Group Sync has been disabled for this organization."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Disable SAML Group Sync for this organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/saml-group-sync/enable/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Enable SAML Group Sync for this organization.",
                "operationId": "orgs_saml-group-sync_enable",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "SAML Group Sync has been enabled for this organization."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Enable SAML Group Sync for this organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/saml-group-sync/status/": {
            "get": {
                "description": "Retrieve the SAML Group Sync status for this organization.",
                "operationId": "orgs_saml-group-sync_status",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the SAML Group Sync status for this organization.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationGroupSyncStatus"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the SAML Group Sync status for this organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/services/": {
            "get": {
                "description": "Get a list of all services within an organization.",
                "operationId": "orgs_services_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "default": "",
                        "description": "A search term for querying of services within an Organization.Available options are: name, role",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "created_at",
                        "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-created_at`). Available options: created_at, name, role.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of services within the org",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Service"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all services within an organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a service within an organization.",
                "operationId": "orgs_services_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created the service within the org",
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a service within an organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/services/{service}/": {
            "delete": {
                "description": "Delete a specific service",
                "operationId": "orgs_services_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Deleted the service successfully."
                    },
                    "400": {
                        "description": "The service cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a specific service",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Retrieve details of a single service within an organization.",
                "operationId": "orgs_services_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve details of a single service within an organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "service",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a service within an organization.",
                "operationId": "orgs_services_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ServiceRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the service within the org",
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a service within an organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/services/{service}/refresh/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "service",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Refresh service API token.",
                "operationId": "orgs_services_refresh",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Refreshed the service token successfully.",
                        "schema": {
                            "$ref": "#/definitions/Service"
                        }
                    },
                    "400": {
                        "description": "The service token cannot be refreshed.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Refresh service API token.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/teams/": {
            "get": {
                "description": "Get the details of all teams within an organization.",
                "operationId": "orgs_teams_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "default": false,
                        "description": "Filter for teams that you are a member of.",
                        "in": "query",
                        "name": "for_user",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "default": "",
                        "description": "A search term for querying of teams within an Organization.Available options are: name, slug, user, userslug",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "name",
                        "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name, members.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of teams within the org",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/OrganizationTeam"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Org namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the details of all teams within an organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a team for this organization.",
                "operationId": "orgs_teams_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Team created",
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeam"
                        }
                    },
                    "400": {
                        "description": "The team cannot be created.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a team for this organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/teams/{team}/": {
            "delete": {
                "description": "Delete a specific team in a organization.",
                "operationId": "orgs_teams_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Deleted the team successfully."
                    },
                    "400": {
                        "description": "The team cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Team not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a specific team in a organization.",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Get the details of a specific team within an organization.",
                "operationId": "orgs_teams_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the details of the requested team.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeam"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Team not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the details of a specific team within an organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "team",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a specific team in a organization.",
                "operationId": "orgs_teams_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the specified team.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeam"
                        }
                    },
                    "400": {
                        "description": "The team cannot be edited.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Team not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a specific team in a organization.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/teams/{team}/members": {
            "get": {
                "description": "List all members for the team.",
                "operationId": "orgs_teams_members_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved users for the specified team.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeamMembers"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Team not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List all members for the team.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "team",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Add users to a team.",
                "operationId": "orgs_teams_members_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeamMembers"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The users were added to the team.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeamMembers"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Team not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Add users to a team.",
                "tags": [
                    "orgs"
                ]
            },
            "put": {
                "description": "Replace all team members.",
                "operationId": "orgs_teams_members_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeamMembers"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "The team members were replaced.",
                        "schema": {
                            "$ref": "#/definitions/OrganizationTeamMembers"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Team not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Replace all team members.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/vulnerability-policy-violation/": {
            "get": {
                "description": "List all current vulnerability policy violations for this Organization.",
                "operationId": "orgs_vulnerability-policy-violation_list",
                "parameters": [
                    {
                        "description": "The pagination cursor value.",
                        "in": "query",
                        "name": "cursor",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "properties": {
                                "next": {
                                    "format": "uri",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "previous": {
                                    "format": "uri",
                                    "type": "string",
                                    "x-nullable": true
                                },
                                "results": {
                                    "items": {
                                        "$ref": "#/definitions/PackageVulnerabilityPolicyViolationLog"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "results"
                            ],
                            "title": "PackageVulnerabilityPolicyViolationLogCursorPage",
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List all current vulnerability policy violations for this Organization.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/vulnerability-policy/": {
            "get": {
                "description": "Get a list of all package vulnerability policies.",
                "operationId": "orgs_vulnerability-policy_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all package vulnerability policies.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a package vulnerability policy.",
                "operationId": "orgs_vulnerability-policy_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a package vulnerability policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/vulnerability-policy/{policy_slug_perm}/evaluation/": {
            "get": {
                "description": "List evaluation requests for this policy.",
                "operationId": "orgs_vulnerability-policy_evaluation_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequest"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List evaluation requests for this policy.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "policy_slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create an evaluation request for this policy.",
                "operationId": "orgs_vulnerability-policy_evaluation_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequestRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequest"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create an evaluation request for this policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/orgs/{org}/vulnerability-policy/{policy_slug_perm}/evaluation/{slug_perm}/": {
            "get": {
                "description": "Retrieve an evaluation request for this policy.",
                "operationId": "orgs_vulnerability-policy_evaluation_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PackageVulnerabilityPolicyEvaluationRequest"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve an evaluation request for this policy.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "policy_slug_perm",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/orgs/{org}/vulnerability-policy/{slug_perm}/": {
            "delete": {
                "description": "Delete a package vulnerability policy.",
                "operationId": "orgs_vulnerability-policy_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a package vulnerability policy.",
                "tags": [
                    "orgs"
                ]
            },
            "get": {
                "description": "Get a package vulnerability policy.",
                "operationId": "orgs_vulnerability-policy_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a package vulnerability policy.",
                "tags": [
                    "orgs"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "org",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a package vulnerability policy.",
                "operationId": "orgs_vulnerability-policy_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicyRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a package vulnerability policy.",
                "tags": [
                    "orgs"
                ]
            },
            "put": {
                "description": "Update a package vulnerability policy.",
                "operationId": "orgs_vulnerability-policy_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OrganizationPackageVulnerabilityPolicy"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a package vulnerability policy.",
                "tags": [
                    "orgs"
                ]
            }
        },
        "/packages/{owner}/{repo}/": {
            "get": {
                "description": "Get a list of all packages associated with repository.",
                "operationId": "packages_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "default": "",
                        "description": "A search term for querying names, filenames, versions, distributions, architectures, formats or statuses of packages.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "-date",
                        "description": "A field for sorting objects in ascending or descending order.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of packages",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Package"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all packages associated with repository.",
                "tags": [
                    "packages"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/packages/{owner}/{repo}/{identifier}/": {
            "delete": {
                "description": "Delete a specific package in a repository.",
                "operationId": "packages_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Deleted the specified package successfully."
                    },
                    "400": {
                        "description": "The package cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a specific package in a repository.",
                "tags": [
                    "packages"
                ]
            },
            "get": {
                "description": "Get a specific package in a repository.",
                "operationId": "packages_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the specified package successfully.",
                        "schema": {
                            "$ref": "#/definitions/Package"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a specific package in a repository.",
                "tags": [
                    "packages"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/packages/{owner}/{repo}/{identifier}/copy/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Copy a package to another repository.",
                "operationId": "packages_copy",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageCopyRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Copied specified package to destination repository.",
                        "schema": {
                            "$ref": "#/definitions/PackageCopy"
                        }
                    },
                    "400": {
                        "description": "The package is in the wrong state for the requested operation.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Copy a package to another repository.",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/{identifier}/dependencies/": {
            "get": {
                "description": "Get the list of dependencies for a package. Transitive dependencies are included where supported.",
                "operationId": "packages_dependencies",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved stored dependencies for specified package.",
                        "schema": {
                            "$ref": "#/definitions/PackageDependencies"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the list of dependencies for a package. Transitive dependencies are included where supported.",
                "tags": [
                    "packages"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/packages/{owner}/{repo}/{identifier}/move/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Move a package to another repository.",
                "operationId": "packages_move",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageMoveRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Moved specified package to destination repository.",
                        "schema": {
                            "$ref": "#/definitions/PackageMove"
                        }
                    },
                    "400": {
                        "description": "The package is in the wrong state for the requested operation.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Move a package to another repository.",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/{identifier}/quarantine/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Quarantine or release a package.",
                "operationId": "packages_quarantine",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageQuarantineRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Changed the package's quarantine status.",
                        "schema": {
                            "$ref": "#/definitions/PackageQuarantine"
                        }
                    },
                    "400": {
                        "description": "The package is in the wrong state for the requested operation.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Quarantine or release a package.",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/{identifier}/resync/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Schedule a package for resynchronisation.",
                "operationId": "packages_resync",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Scheduled the package for resynchronisation.",
                        "schema": {
                            "$ref": "#/definitions/PackageResync"
                        }
                    },
                    "400": {
                        "description": "The package is in the wrong state for the requested operation.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Schedule a package for resynchronisation.",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/{identifier}/scan/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Schedule a package for scanning.",
                "operationId": "packages_scan",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Scheduled the package for scanning.",
                        "schema": {
                            "$ref": "#/definitions/Package"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Schedule a package for scanning.",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/{identifier}/status/": {
            "get": {
                "description": "Get the synchronization status for a package.",
                "operationId": "packages_status",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved status for specified package.",
                        "schema": {
                            "$ref": "#/definitions/PackageStatus"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get the synchronization status for a package.",
                "tags": [
                    "packages"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/packages/{owner}/{repo}/{identifier}/tag/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Add/Replace/Remove tags for a package.",
                "operationId": "packages_tag",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PackageTagRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Modified tags for the package.",
                        "schema": {
                            "$ref": "#/definitions/Package"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Add/Replace/Remove tags for a package.",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/groups/": {
            "get": {
                "description": "Return a list of Package Groups in a repository.",
                "operationId": "packages_groups_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "default": "name",
                        "description": "A field to group packages by. Available options: name, backend_kind.",
                        "in": "query",
                        "name": "group_by",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "",
                        "description": "A search term for querying names, filenames, versions, distributions, architectures, formats, or statuses of packages.",
                        "in": "query",
                        "name": "query",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "default": "name",
                        "description": "A field for sorting objects in ascending or descending order. Use `-` prefix for descending order (e.g., `-name`). Available options: name, count, num_downloads, size, last_push, backend_kind.",
                        "in": "query",
                        "name": "sort",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of package groups.",
                        "schema": {
                            "properties": {
                                "results": {
                                    "items": {
                                        "$ref": "#/definitions/PackageGroup"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "results"
                            ],
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Return a list of Package Groups in a repository.",
                "tags": [
                    "packages"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/packages/{owner}/{repo}/upload/alpine/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Alpine package",
                "operationId": "packages_upload_alpine",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AlpinePackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/AlpinePackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Alpine package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/cargo/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Cargo package",
                "operationId": "packages_upload_cargo",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CargoPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/CargoPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Cargo package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/cocoapods/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new CocoaPods package",
                "operationId": "packages_upload_cocoapods",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CocoapodsPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/CocoapodsPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new CocoaPods package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/composer/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Composer package",
                "operationId": "packages_upload_composer",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposerPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/ComposerPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Composer package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/conan/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Conan package",
                "operationId": "packages_upload_conan",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ConanPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/ConanPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Conan package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/conda/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Conda package",
                "operationId": "packages_upload_conda",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CondaPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/CondaPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Conda package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/cran/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new CRAN package",
                "operationId": "packages_upload_cran",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CranPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/CranPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new CRAN package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/dart/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Dart package",
                "operationId": "packages_upload_dart",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DartPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/DartPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Dart package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/deb/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Debian package",
                "operationId": "packages_upload_deb",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DebPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/DebPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Debian package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/docker/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Docker package",
                "operationId": "packages_upload_docker",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DockerPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/DockerPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Docker package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/go/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Go package",
                "operationId": "packages_upload_go",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/GoPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/GoPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Go package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/helm/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Helm package",
                "operationId": "packages_upload_helm",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HelmPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/HelmPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Helm package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/hex/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Hex package",
                "operationId": "packages_upload_hex",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HexPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/HexPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Hex package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/luarocks/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new LuaRocks package",
                "operationId": "packages_upload_luarocks",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/LuarocksPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/LuarocksPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new LuaRocks package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/maven/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Maven package",
                "operationId": "packages_upload_maven",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MavenPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/MavenPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Maven package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/npm/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new npm package",
                "operationId": "packages_upload_npm",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NpmPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/NpmPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new npm package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/nuget/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new NuGet package",
                "operationId": "packages_upload_nuget",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NugetPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/NugetPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new NuGet package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/p2/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new P2 package",
                "operationId": "packages_upload_p2",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/P2PackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/P2PackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new P2 package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/python/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Python package",
                "operationId": "packages_upload_python",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PythonPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/PythonPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Python package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/raw/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Raw package",
                "operationId": "packages_upload_raw",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RawPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/RawPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Raw package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/rpm/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new RedHat package",
                "operationId": "packages_upload_rpm",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RpmPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/RpmPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new RedHat package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/ruby/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Ruby package",
                "operationId": "packages_upload_ruby",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RubyPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/RubyPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Ruby package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/swift/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Swift package",
                "operationId": "packages_upload_swift",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SwiftPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/SwiftPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Swift package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/terraform/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Terraform package",
                "operationId": "packages_upload_terraform",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TerraformPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/TerraformPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Terraform package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/upload/vagrant/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new Vagrant package",
                "operationId": "packages_upload_vagrant",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/VagrantPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Upload acknowledged and queued for synchronization.",
                        "schema": {
                            "$ref": "#/definitions/VagrantPackageUpload"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new Vagrant package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/alpine/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Alpine package",
                "operationId": "packages_validate-upload_alpine",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AlpinePackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Alpine package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/cargo/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Cargo package",
                "operationId": "packages_validate-upload_cargo",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CargoPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Cargo package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/cocoapods/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create CocoaPods package",
                "operationId": "packages_validate-upload_cocoapods",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CocoapodsPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create CocoaPods package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/composer/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Composer package",
                "operationId": "packages_validate-upload_composer",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposerPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Composer package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/conan/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Conan package",
                "operationId": "packages_validate-upload_conan",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ConanPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Conan package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/conda/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Conda package",
                "operationId": "packages_validate-upload_conda",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CondaPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Conda package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/cran/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create CRAN package",
                "operationId": "packages_validate-upload_cran",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CranPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create CRAN package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/dart/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Dart package",
                "operationId": "packages_validate-upload_dart",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DartPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Dart package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/deb/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Debian package",
                "operationId": "packages_validate-upload_deb",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DebPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Debian package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/docker/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Docker package",
                "operationId": "packages_validate-upload_docker",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DockerPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Docker package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/go/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Go package",
                "operationId": "packages_validate-upload_go",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/GoPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Go package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/helm/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Helm package",
                "operationId": "packages_validate-upload_helm",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HelmPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Helm package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/hex/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Hex package",
                "operationId": "packages_validate-upload_hex",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HexPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Hex package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/luarocks/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create LuaRocks package",
                "operationId": "packages_validate-upload_luarocks",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/LuarocksPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create LuaRocks package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/maven/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Maven package",
                "operationId": "packages_validate-upload_maven",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MavenPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Maven package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/npm/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create npm package",
                "operationId": "packages_validate-upload_npm",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NpmPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create npm package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/nuget/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create NuGet package",
                "operationId": "packages_validate-upload_nuget",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NugetPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create NuGet package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/p2/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create P2 package",
                "operationId": "packages_validate-upload_p2",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/P2PackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create P2 package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/python/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Python package",
                "operationId": "packages_validate-upload_python",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PythonPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Python package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/raw/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Raw package",
                "operationId": "packages_validate-upload_raw",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RawPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Raw package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/rpm/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create RedHat package",
                "operationId": "packages_validate-upload_rpm",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RpmPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create RedHat package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/ruby/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Ruby package",
                "operationId": "packages_validate-upload_ruby",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RubyPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Ruby package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/swift/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Swift package",
                "operationId": "packages_validate-upload_swift",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SwiftPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Swift package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/terraform/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Terraform package",
                "operationId": "packages_validate-upload_terraform",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/TerraformPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Terraform package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/packages/{owner}/{repo}/validate-upload/vagrant/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Validate parameters for create Vagrant package",
                "operationId": "packages_validate-upload_vagrant",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/VagrantPackageUploadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Validation was successful, parameters are OK."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Namespace (owner) or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Validate parameters for create Vagrant package",
                "tags": [
                    "packages"
                ]
            }
        },
        "/quota/{owner}/": {
            "get": {
                "description": "Quota usage for a given namespace.",
                "operationId": "quota_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Quota"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Quota usage for a given namespace.",
                "tags": [
                    "quota"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/quota/history/{owner}/": {
            "get": {
                "description": "Quota history for a given namespace.",
                "operationId": "quota_history_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QuotaHistory"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Quota history for a given namespace.",
                "tags": [
                    "quota"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/quota/oss/{owner}/": {
            "get": {
                "description": "Open-source Quota usage for a given namespace.",
                "operationId": "quota_oss_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Quota"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Open-source Quota usage for a given namespace.",
                "tags": [
                    "quota"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/quota/oss/history/{owner}/": {
            "get": {
                "description": "Open-source Quota history for a given namespace.",
                "operationId": "quota_oss_history_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/QuotaHistory"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Open-source Quota history for a given namespace.",
                "tags": [
                    "quota"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/rates/limits/": {
            "get": {
                "description": "Endpoint to check rate limits for current user.",
                "operationId": "rates_limits_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Rate check was successful",
                        "schema": {
                            "$ref": "#/definitions/ResourcesRateCheck"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Endpoint to check rate limits for current user.",
                "tags": [
                    "rates"
                ]
            },
            "parameters": []
        },
        "/repos/": {
            "get": {
                "description": "Get a list of all repositories associated with current user.",
                "operationId": "repos_user_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of repositories",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Repository"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all repositories associated with current user.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": []
        },
        "/repos/{owner}/": {
            "get": {
                "description": "Get a list of all repositories within a namespace.",
                "operationId": "repos_namespace_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of repositories",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/Repository"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all repositories within a namespace.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a new repository in a given namespace.",
                "operationId": "repos_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The repository was created.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryCreate"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a new repository in a given namespace.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/": {
            "delete": {
                "description": "Delete a repository in a given namespace.",
                "operationId": "repos_delete",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "The repository has been scheduled for deletion."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Unable to find repository with that name in the provided namespace.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a repository in a given namespace.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Get a specific repository.",
                "operationId": "repos_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the specified repository",
                        "schema": {
                            "$ref": "#/definitions/Repository"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a specific repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update details about a repository in a given namespace.",
                "operationId": "repos_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The repository was updated.",
                        "schema": {
                            "$ref": "#/definitions/Repository"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Unable to find repository with that name in the provided namespace.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update details about a repository in a given namespace.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/ecdsa/": {
            "get": {
                "description": "Retrieve the active ECDSA key for the Repository.",
                "operationId": "repos_ecdsa_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the active ECDSA key.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryEcdsaKey"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the active ECDSA key for the Repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Set the active ECDSA key for the Repository.",
                "operationId": "repos_ecdsa_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryEcdsaKeyCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The provided ECDSA key is the same as the current ECDSA key.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryEcdsaKey"
                        }
                    },
                    "201": {
                        "description": "The provided ECDSA key was assigned to the Repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryEcdsaKey"
                        }
                    },
                    "400": {
                        "description": "The provided ECDSA key is not valid",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Custom ECDSA keys are not active; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization/Repository does not exist, or you do not have permissions.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Set the active ECDSA key for the Repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/ecdsa/regenerate/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Regenerate ECDSA Key for the Repository.",
                "operationId": "repos_ecdsa_regenerate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "An ECDSA key was generated for the Repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryEcdsaKey"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Regenerate ECDSA Key for the Repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/geoip": {
            "get": {
                "description": "List all repository geoip rules.",
                "operationId": "repos_geoip_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpRules"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Geo/IP restrictions are not available; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List all repository geoip rules.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update repository geoip rules.",
                "operationId": "repos_geoip_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpRulesRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpRules"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Geo/IP restrictions are not available; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update repository geoip rules.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Replace repository geoip rules.",
                "operationId": "repos_geoip_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpRulesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpRules"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Geo/IP restrictions are not available; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Replace repository geoip rules.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/geoip/disable/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Disable GeoIP for this repository.",
                "operationId": "repos_geoip_disable",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RespositoryGeoIpEnableDisableRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GeoIP has been disabled for this repository."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Geo/IP restrictions are not available; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Disable GeoIP for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/geoip/enable/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Enable GeoIP for this repository.",
                "operationId": "repos_geoip_enable",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RespositoryGeoIpEnableDisableRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GeoIP has been enabled for this repository."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Geo/IP restrictions are not available; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Enable GeoIP for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/geoip/status/": {
            "get": {
                "description": "Retrieve the GeoIP status for this repository.",
                "operationId": "api_repos_geoip_status",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the GeoIP status for this repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpStatus"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Geo/IP restrictions are not available; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the GeoIP status for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/repos/{owner}/{identifier}/geoip/test/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Test a list of IP addresses against the repository's current GeoIP rules.",
                "operationId": "repos_geoip_test",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpTestAddress"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfuly tested addresses against the repository's GeoIP rules",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGeoIpTestAddressResponse"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Geo/IP restrictions are not available; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Test a list of IP addresses against the repository's current GeoIP rules.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/gpg/": {
            "get": {
                "description": "Retrieve the active GPG key for the Repository.",
                "operationId": "repos_gpg_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the active GPG key.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGpgKey"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the active GPG key for the Repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Set the active GPG key for the Repository.",
                "operationId": "repos_gpg_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryGpgKeyCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The provided GPG key is the same as the current GPG key.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGpgKey"
                        }
                    },
                    "201": {
                        "description": "The provided GPG key was assigned to the Repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGpgKey"
                        }
                    },
                    "400": {
                        "description": "The provided GPG key is not valid",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Custom GPG keys are not active; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization/Repository does not exist, or you do not have permissions.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Set the active GPG key for the Repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/gpg/regenerate/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Regenerate GPG Key for the Repository.",
                "operationId": "repos_gpg_regenerate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "A GPG key was generated for the Repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryGpgKey"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Regenerate GPG Key for the Repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/privileges": {
            "get": {
                "description": "List all explicity created privileges for the repository.",
                "operationId": "repos_privileges_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved privileges for the specified repository",
                        "schema": {
                            "$ref": "#/definitions/RepositoryPrivilegeInput"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List all explicity created privileges for the repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Modify privileges for the repository.",
                "operationId": "repos_privileges_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryPrivilegeInputRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Repository privileges updated"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Modify privileges for the repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Replace all existing repository privileges with those specified.",
                "operationId": "repos_privileges_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryPrivilegeInputRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Repository privileges replaced"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Replace all existing repository privileges with those specified.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/rsa/": {
            "get": {
                "description": "Retrieve the active RSA key for the Repository.",
                "operationId": "repos_rsa_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the active RSA key.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryRsaKey"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the active RSA key for the Repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Set the active RSA key for the Repository.",
                "operationId": "repos_rsa_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryRsaKeyCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The provided RSA key is the same as the current RSA key.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryRsaKey"
                        }
                    },
                    "201": {
                        "description": "The provided RSA key was assigned to the Repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryRsaKey"
                        }
                    },
                    "400": {
                        "description": "The provided RSA key is not valid",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Custom RSA keys are not active; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Organization/Repository does not exist, or you do not have permissions.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Set the active RSA key for the Repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/rsa/regenerate/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Regenerate RSA Key for the Repository.",
                "operationId": "repos_rsa_regenerate",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "An RSA key was generated for the Repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryRsaKey"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Regenerate RSA Key for the Repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/composer/": {
            "get": {
                "description": "List Composer upstream configs for this repository.",
                "operationId": "repos_upstream_composer_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/ComposerUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Composer upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Composer upstream config for this repository.",
                "operationId": "repos_upstream_composer_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposerUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/ComposerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Composer upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/composer/{slug_perm}/": {
            "delete": {
                "description": "Delete a Composer upstream config for this repository.",
                "operationId": "repos_upstream_composer_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Composer upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Composer upstream config for this repository.",
                "operationId": "repos_upstream_composer_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComposerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Composer upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Composer upstream config for this repository.",
                "operationId": "repos_upstream_composer_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposerUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComposerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Composer upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Composer upstream config for this repository.",
                "operationId": "repos_upstream_composer_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposerUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/ComposerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Composer upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/cran/": {
            "get": {
                "description": "List CRAN upstream configs for this repository.",
                "operationId": "repos_upstream_cran_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/CranUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List CRAN upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a CRAN upstream config for this repository.",
                "operationId": "repos_upstream_cran_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CranUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/CranUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a CRAN upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/cran/{slug_perm}/": {
            "delete": {
                "description": "Delete a CRAN upstream config for this repository.",
                "operationId": "repos_upstream_cran_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a CRAN upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a CRAN upstream config for this repository.",
                "operationId": "repos_upstream_cran_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CranUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a CRAN upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a CRAN upstream config for this repository.",
                "operationId": "repos_upstream_cran_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CranUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CranUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a CRAN upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a CRAN upstream config for this repository.",
                "operationId": "repos_upstream_cran_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/CranUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CranUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a CRAN upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/dart/": {
            "get": {
                "description": "List Dart upstream configs for this repository.",
                "operationId": "repos_upstream_dart_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/DartUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Dart upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Dart upstream config for this repository.",
                "operationId": "repos_upstream_dart_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DartUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DartUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Dart upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/dart/{slug_perm}/": {
            "delete": {
                "description": "Delete a Dart upstream config for this repository.",
                "operationId": "repos_upstream_dart_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Dart upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Dart upstream config for this repository.",
                "operationId": "repos_upstream_dart_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DartUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Dart upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Dart upstream config for this repository.",
                "operationId": "repos_upstream_dart_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DartUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DartUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Dart upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Dart upstream config for this repository.",
                "operationId": "repos_upstream_dart_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DartUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DartUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Dart upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/deb/": {
            "get": {
                "description": "List Debian upstream configs for this repository.",
                "operationId": "repos_upstream_deb_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/DebUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Debian upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Debian upstream config for this repository.",
                "operationId": "repos_upstream_deb_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DebUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DebUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Debian upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/deb/{slug_perm}/": {
            "delete": {
                "description": "Delete a Debian upstream config for this repository.",
                "operationId": "repos_upstream_deb_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Debian upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Debian upstream config for this repository.",
                "operationId": "repos_upstream_deb_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DebUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Debian upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Debian upstream config for this repository.",
                "operationId": "repos_upstream_deb_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DebUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DebUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Debian upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Debian upstream config for this repository.",
                "operationId": "repos_upstream_deb_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DebUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DebUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Debian upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/docker/": {
            "get": {
                "description": "List Docker upstream configs for this repository.",
                "operationId": "repos_upstream_docker_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/DockerUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Docker upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Docker upstream config for this repository.",
                "operationId": "repos_upstream_docker_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DockerUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/DockerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Docker upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/docker/{slug_perm}/": {
            "delete": {
                "description": "Delete a Docker upstream config for this repository.",
                "operationId": "repos_upstream_docker_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Docker upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Docker upstream config for this repository.",
                "operationId": "repos_upstream_docker_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DockerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Docker upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Docker upstream config for this repository.",
                "operationId": "repos_upstream_docker_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DockerUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DockerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Docker upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Docker upstream config for this repository.",
                "operationId": "repos_upstream_docker_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/DockerUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DockerUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Docker upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/go/": {
            "get": {
                "description": "List Go upstream configs for this repository.",
                "operationId": "repos_upstream_go_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/GoUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Go upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Go upstream config for this repository.",
                "operationId": "repos_upstream_go_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/GoUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/GoUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Go upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/go/{slug_perm}/": {
            "delete": {
                "description": "Delete a Go upstream config for this repository.",
                "operationId": "repos_upstream_go_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Go upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Go upstream config for this repository.",
                "operationId": "repos_upstream_go_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GoUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Go upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Go upstream config for this repository.",
                "operationId": "repos_upstream_go_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/GoUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GoUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Go upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Go upstream config for this repository.",
                "operationId": "repos_upstream_go_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/GoUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/GoUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Go upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/helm/": {
            "get": {
                "description": "List Helm upstream configs for this repository.",
                "operationId": "repos_upstream_helm_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/HelmUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Helm upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Helm upstream config for this repository.",
                "operationId": "repos_upstream_helm_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HelmUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/HelmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Helm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/helm/{slug_perm}/": {
            "delete": {
                "description": "Delete a Helm upstream config for this repository.",
                "operationId": "repos_upstream_helm_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Helm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Helm upstream config for this repository.",
                "operationId": "repos_upstream_helm_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HelmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Helm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Helm upstream config for this repository.",
                "operationId": "repos_upstream_helm_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HelmUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HelmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Helm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Helm upstream config for this repository.",
                "operationId": "repos_upstream_helm_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HelmUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HelmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Helm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/hex/": {
            "get": {
                "description": "List Hex upstream configs for this repository.",
                "operationId": "repos_upstream_hex_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/HexUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Hex upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Hex upstream config for this repository.",
                "operationId": "repos_upstream_hex_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HexUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/HexUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Hex upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/hex/{slug_perm}/": {
            "delete": {
                "description": "Delete a Hex upstream config for this repository.",
                "operationId": "repos_upstream_hex_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Hex upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Hex upstream config for this repository.",
                "operationId": "repos_upstream_hex_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HexUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Hex upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Hex upstream config for this repository.",
                "operationId": "repos_upstream_hex_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HexUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HexUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Hex upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Hex upstream config for this repository.",
                "operationId": "repos_upstream_hex_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HexUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HexUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Hex upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/maven/": {
            "get": {
                "description": "List Maven upstream configs for this repository.",
                "operationId": "repos_upstream_maven_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/MavenUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Maven upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Maven upstream config for this repository.",
                "operationId": "repos_upstream_maven_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MavenUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/MavenUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Maven upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/maven/{slug_perm}/": {
            "delete": {
                "description": "Delete a Maven upstream config for this repository.",
                "operationId": "repos_upstream_maven_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Maven upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Maven upstream config for this repository.",
                "operationId": "repos_upstream_maven_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MavenUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Maven upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Maven upstream config for this repository.",
                "operationId": "repos_upstream_maven_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MavenUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MavenUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Maven upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Maven upstream config for this repository.",
                "operationId": "repos_upstream_maven_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/MavenUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/MavenUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Maven upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/npm/": {
            "get": {
                "description": "List npm upstream configs for this repository.",
                "operationId": "repos_upstream_npm_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/NpmUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List npm upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a npm upstream config for this repository.",
                "operationId": "repos_upstream_npm_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NpmUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a npm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/npm/{slug_perm}/": {
            "delete": {
                "description": "Delete a npm upstream config for this repository.",
                "operationId": "repos_upstream_npm_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a npm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a npm upstream config for this repository.",
                "operationId": "repos_upstream_npm_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a npm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a npm upstream config for this repository.",
                "operationId": "repos_upstream_npm_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NpmUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a npm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a npm upstream config for this repository.",
                "operationId": "repos_upstream_npm_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NpmUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a npm upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/nuget/": {
            "get": {
                "description": "List NuGet upstream configs for this repository.",
                "operationId": "repos_upstream_nuget_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/NugetUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List NuGet upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a NuGet upstream config for this repository.",
                "operationId": "repos_upstream_nuget_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NugetUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/NugetUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a NuGet upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/nuget/{slug_perm}/": {
            "delete": {
                "description": "Delete a NuGet upstream config for this repository.",
                "operationId": "repos_upstream_nuget_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a NuGet upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a NuGet upstream config for this repository.",
                "operationId": "repos_upstream_nuget_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NugetUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a NuGet upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a NuGet upstream config for this repository.",
                "operationId": "repos_upstream_nuget_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NugetUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NugetUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a NuGet upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a NuGet upstream config for this repository.",
                "operationId": "repos_upstream_nuget_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/NugetUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/NugetUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a NuGet upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/python/": {
            "get": {
                "description": "List Python upstream configs for this repository.",
                "operationId": "repos_upstream_python_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/PythonUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Python upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Python upstream config for this repository.",
                "operationId": "repos_upstream_python_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PythonUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/PythonUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Python upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/python/{slug_perm}/": {
            "delete": {
                "description": "Delete a Python upstream config for this repository.",
                "operationId": "repos_upstream_python_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Python upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Python upstream config for this repository.",
                "operationId": "repos_upstream_python_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PythonUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Python upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Python upstream config for this repository.",
                "operationId": "repos_upstream_python_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PythonUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PythonUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Python upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Python upstream config for this repository.",
                "operationId": "repos_upstream_python_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/PythonUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/PythonUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Python upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/rpm/": {
            "get": {
                "description": "List RedHat upstream configs for this repository.",
                "operationId": "repos_upstream_rpm_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RpmUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List RedHat upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a RedHat upstream config for this repository.",
                "operationId": "repos_upstream_rpm_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RpmUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/RpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a RedHat upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/rpm/{slug_perm}/": {
            "delete": {
                "description": "Delete a RedHat upstream config for this repository.",
                "operationId": "repos_upstream_rpm_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a RedHat upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a RedHat upstream config for this repository.",
                "operationId": "repos_upstream_rpm_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a RedHat upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a RedHat upstream config for this repository.",
                "operationId": "repos_upstream_rpm_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RpmUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a RedHat upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a RedHat upstream config for this repository.",
                "operationId": "repos_upstream_rpm_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RpmUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RpmUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a RedHat upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/ruby/": {
            "get": {
                "description": "List Ruby upstream configs for this repository.",
                "operationId": "repos_upstream_ruby_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RubyUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Ruby upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Ruby upstream config for this repository.",
                "operationId": "repos_upstream_ruby_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RubyUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/RubyUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Ruby upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/ruby/{slug_perm}/": {
            "delete": {
                "description": "Delete a Ruby upstream config for this repository.",
                "operationId": "repos_upstream_ruby_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Ruby upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Ruby upstream config for this repository.",
                "operationId": "repos_upstream_ruby_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RubyUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Ruby upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Ruby upstream config for this repository.",
                "operationId": "repos_upstream_ruby_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RubyUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RubyUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Ruby upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Ruby upstream config for this repository.",
                "operationId": "repos_upstream_ruby_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RubyUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RubyUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Ruby upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/swift/": {
            "get": {
                "description": "List Swift upstream configs for this repository.",
                "operationId": "repos_upstream_swift_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/SwiftUpstream"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "List Swift upstream configs for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a Swift upstream config for this repository.",
                "operationId": "repos_upstream_swift_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SwiftUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/SwiftUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a Swift upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/upstream/swift/{slug_perm}/": {
            "delete": {
                "description": "Delete a Swift upstream config for this repository.",
                "operationId": "repos_upstream_swift_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a Swift upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "get": {
                "description": "Retrieve a Swift upstream config for this repository.",
                "operationId": "repos_upstream_swift_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SwiftUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve a Swift upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Partially update a Swift upstream config for this repository.",
                "operationId": "repos_upstream_swift_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SwiftUpstreamRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SwiftUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Partially update a Swift upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            },
            "put": {
                "description": "Update a Swift upstream config for this repository.",
                "operationId": "repos_upstream_swift_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/SwiftUpstreamRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/SwiftUpstream"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a Swift upstream config for this repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{identifier}/x509-ecdsa/": {
            "get": {
                "description": "Retrieve the active X.509 ECDSA certificate for the Repository.",
                "operationId": "repos_x509_ecdsa_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the active X.509 ECDSA Certificate.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryX509EcdsaCertificate"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the active X.509 ECDSA certificate for the Repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/repos/{owner}/{identifier}/x509-rsa/": {
            "get": {
                "description": "Retrieve the active X.509 RSA certificate for the Repository.",
                "operationId": "repos_x509_rsa_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the active X.509 RSA Certificate.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryX509RsaCertificate"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the active X.509 RSA certificate for the Repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/repos/{owner}/{repo}/retention/": {
            "get": {
                "description": "Retrieve the retention rules for the repository.",
                "operationId": "repo_retention_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved the retention rules for the repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryRetentionRules"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the retention rules for the repository.",
                "tags": [
                    "repos"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update the retention rules for the repository.",
                "operationId": "repo_retention_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryRetentionRulesRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the retention rules for the repository.",
                        "schema": {
                            "$ref": "#/definitions/RepositoryRetentionRules"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update the retention rules for the repository.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/repos/{owner}/{repo}/transfer-region/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Transfer a repository to a different region.",
                "operationId": "repos_transfer_region",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryTransferRegionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Repository region transfer initiated."
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "402": {
                        "description": "Custom storage regions not available on plan; upgrade your account!",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner, namespace or repository not found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Transfer a repository to a different region.",
                "tags": [
                    "repos"
                ]
            }
        },
        "/status/check/basic/": {
            "get": {
                "description": "Endpoint to check basic API connectivity.",
                "operationId": "status_check_basic",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Status check was successful",
                        "schema": {
                            "$ref": "#/definitions/StatusBasic"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "security": [],
                "summary": "Endpoint to check basic API connectivity.",
                "tags": [
                    "status"
                ]
            },
            "parameters": []
        },
        "/storage-regions/": {
            "get": {
                "description": "Get a list of all available storage regions.",
                "operationId": "storage-regions_list",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Available storage regions retrieved",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/StorageRegion"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all available storage regions.",
                "tags": [
                    "storage-regions"
                ]
            },
            "parameters": []
        },
        "/storage-regions/{slug}/": {
            "get": {
                "description": "Get a specific storage region.",
                "operationId": "storage-regions_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/StorageRegion"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a specific storage region.",
                "tags": [
                    "storage-regions"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/user/self/": {
            "get": {
                "description": "Provide a brief for the current user (if any).",
                "operationId": "user_self",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved brief for the current user",
                        "schema": {
                            "$ref": "#/definitions/UserBrief"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Provide a brief for the current user (if any).",
                "tags": [
                    "user"
                ]
            },
            "parameters": []
        },
        "/user/token/": {
            "parameters": [],
            "post": {
                "description": "Handles both:\n- Users authenticating with basic credentials to get a token\n- Two-factor authentication flow",
                "operationId": "user_token_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/UserAuthTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Retrieved/created user API token/key.",
                        "schema": {
                            "$ref": "#/definitions/UserAuthToken"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "403": {
                        "description": "Locked out.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Failed to authenticate.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Create or retrieve API token for a user.",
                "tags": [
                    "user"
                ]
            }
        },
        "/user/tokens/": {
            "get": {
                "description": "Retrieve the API key assigned to the user that is currently authenticated.",
                "operationId": "user_tokens_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the API key for the user that is currently authenticated.",
                        "schema": {
                            "properties": {
                                "results": {
                                    "items": {
                                        "$ref": "#/definitions/UserAuthenticationToken"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "results"
                            ],
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Retrieve the API key assigned to the user that is currently authenticated.",
                "tags": [
                    "user"
                ]
            },
            "parameters": [],
            "post": {
                "description": "Create an API key for the user that is currently authenticated.",
                "operationId": "user_tokens_create",
                "parameters": [],
                "responses": {
                    "201": {
                        "description": "Created an API key for the user that is currently authenticated.",
                        "schema": {
                            "$ref": "#/definitions/UserAuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "User has already created an API key.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create an API key for the user that is currently authenticated.",
                "tags": [
                    "user"
                ]
            }
        },
        "/user/tokens/{slug_perm}/refresh/": {
            "parameters": [
                {
                    "in": "path",
                    "name": "slug_perm",
                    "required": true,
                    "type": "string"
                }
            ],
            "put": {
                "description": "Refresh the specified API key for the user that is currently authenticated.",
                "operationId": "user_tokens_refresh",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed the API key.",
                        "schema": {
                            "$ref": "#/definitions/UserAuthenticationToken"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "The specified API key cannot be found.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Refresh the specified API key for the user that is currently authenticated.",
                "tags": [
                    "user"
                ]
            }
        },
        "/users/profile/{slug}/": {
            "get": {
                "description": "Provide a brief for the specified user (if any).",
                "operationId": "users_profile_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "Retrieved details for the specified user (or current user, if none was specified)",
                        "schema": {
                            "$ref": "#/definitions/UserProfile"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Provide a brief for the specified user (if any).",
                "tags": [
                    "users"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "slug",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/vulnerabilities/{owner}/": {
            "get": {
                "description": "Lists scan results for a specific namespace.",
                "operationId": "vulnerabilities_namespace_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/VulnerabilityScanResultsList"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Lists scan results for a specific namespace.",
                "tags": [
                    "vulnerabilities"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/vulnerabilities/{owner}/{repo}/": {
            "get": {
                "description": "Lists scan results for a specific repository.",
                "operationId": "vulnerabilities_repo_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/VulnerabilityScanResultsList"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Lists scan results for a specific repository.",
                "tags": [
                    "vulnerabilities"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/vulnerabilities/{owner}/{repo}/{package}/": {
            "get": {
                "description": "Lists scan results for a specific package.",
                "operationId": "vulnerabilities_package_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/VulnerabilityScanResultsList"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Lists scan results for a specific package.",
                "tags": [
                    "vulnerabilities"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "package",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/vulnerabilities/{owner}/{repo}/{package}/{identifier}/": {
            "get": {
                "description": "Get a scan result.",
                "operationId": "vulnerabilities_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/VulnerabilityScanResults"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a scan result.",
                "tags": [
                    "vulnerabilities"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "package",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/webhooks/{owner}/{repo}/": {
            "get": {
                "description": "Get a list of all webhooks in a repository.",
                "operationId": "webhooks_list",
                "parameters": [
                    {
                        "description": "A page number within the paginated result set.",
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Number of results to return per page.",
                        "in": "query",
                        "name": "page_size",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved the list of webhooks",
                        "schema": {
                            "items": {
                                "$ref": "#/definitions/RepositoryWebhook"
                            },
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Get a list of all webhooks in a repository.",
                "tags": [
                    "webhooks"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                }
            ],
            "post": {
                "description": "Create a specific webhook in a repository.",
                "operationId": "webhooks_create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryWebhookRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created the specified webhook",
                        "schema": {
                            "$ref": "#/definitions/RepositoryWebhook"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Create a specific webhook in a repository.",
                "tags": [
                    "webhooks"
                ]
            }
        },
        "/webhooks/{owner}/{repo}/{identifier}/": {
            "delete": {
                "description": "Delete a specific webhook in a repository.",
                "operationId": "webhooks_delete",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Deleted the specified webhook successfully."
                    },
                    "400": {
                        "description": "The webhook cannot be deleted.",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Delete a specific webhook in a repository.",
                "tags": [
                    "webhooks"
                ]
            },
            "get": {
                "description": "Views for working with repository webhooks.",
                "operationId": "webhooks_read",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/RepositoryWebhook"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Views for working with repository webhooks.",
                "tags": [
                    "webhooks"
                ]
            },
            "parameters": [
                {
                    "in": "path",
                    "name": "owner",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "repo",
                    "required": true,
                    "type": "string"
                },
                {
                    "in": "path",
                    "name": "identifier",
                    "required": true,
                    "type": "string"
                }
            ],
            "patch": {
                "description": "Update a specific webhook in a repository.",
                "operationId": "webhooks_partial_update",
                "parameters": [
                    {
                        "in": "body",
                        "name": "data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RepositoryWebhookRequestPatch"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated the specified webhook",
                        "schema": {
                            "$ref": "#/definitions/RepositoryWebhook"
                        }
                    },
                    "400": {
                        "description": "Request could not be processed (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "404": {
                        "description": "Owner namespace or repository not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    },
                    "422": {
                        "description": "Missing or invalid parameters (see detail).",
                        "schema": {
                            "$ref": "#/definitions/ErrorDetail"
                        }
                    }
                },
                "summary": "Update a specific webhook in a repository.",
                "tags": [
                    "webhooks"
                ]
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "schemes": [
        "https"
    ],
    "security": [
        {
            "apikey": []
        },
        {
            "basic": []
        }
    ],
    "securityDefinitions": {
        "apikey": {
            "in": "header",
            "name": "X-Api-Key",
            "type": "apiKey"
        },
        "basic": {
            "type": "basic"
        }
    },
    "swagger": "2.0"
}